{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { TextureCubeUVNode } from './TextureCubeUVNode.js';\nimport { ReflectNode } from '../accessors/ReflectNode.js';\nimport { NormalNode } from '../accessors/NormalNode.js';\nfunction TextureCubeNode(value, uv, bias) {\n  TempNode.call(this, 'v4');\n  this.value = value;\n  this.radianceNode = new TextureCubeUVNode(this.value, uv || new ReflectNode(ReflectNode.VECTOR),\n  // bias should be replaced in builder.context in build process\n  bias);\n  this.irradianceNode = new TextureCubeUVNode(this.value, new NormalNode(NormalNode.WORLD), new FloatNode(1).setReadonly(true));\n}\nTextureCubeNode.prototype = Object.create(TempNode.prototype);\nTextureCubeNode.prototype.constructor = TextureCubeNode;\nTextureCubeNode.prototype.nodeType = 'TextureCube';\nTextureCubeNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    builder.require('irradiance');\n    if (builder.context.bias) {\n      builder.context.bias.setTexture(this.value);\n    }\n    var scopeNode = builder.slot === 'irradiance' ? this.irradianceNode : this.radianceNode;\n    return scopeNode.build(builder, output);\n  } else {\n    console.warn('THREE.TextureCubeNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('vec4( 0.0 )', this.getType(builder), output);\n  }\n};\nTextureCubeNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.value = source.value;\n  return this;\n};\nTextureCubeNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { TextureCubeNode };","map":{"version":3,"names":["TempNode","FloatNode","TextureCubeUVNode","ReflectNode","NormalNode","TextureCubeNode","value","uv","bias","call","radianceNode","VECTOR","irradianceNode","WORLD","setReadonly","prototype","Object","create","constructor","nodeType","generate","builder","output","isShader","require","context","setTexture","scopeNode","slot","build","console","warn","shader","format","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/nodes/misc/TextureCubeNode.js"],"sourcesContent":["import { TempNode } from '../core/TempNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { TextureCubeUVNode } from './TextureCubeUVNode.js';\nimport { ReflectNode } from '../accessors/ReflectNode.js';\nimport { NormalNode } from '../accessors/NormalNode.js';\n\nfunction TextureCubeNode(value, uv, bias) {\n  TempNode.call(this, 'v4');\n  this.value = value;\n  this.radianceNode = new TextureCubeUVNode(this.value, uv || new ReflectNode(ReflectNode.VECTOR), // bias should be replaced in builder.context in build process\n  bias);\n  this.irradianceNode = new TextureCubeUVNode(this.value, new NormalNode(NormalNode.WORLD), new FloatNode(1).setReadonly(true));\n}\n\nTextureCubeNode.prototype = Object.create(TempNode.prototype);\nTextureCubeNode.prototype.constructor = TextureCubeNode;\nTextureCubeNode.prototype.nodeType = 'TextureCube';\n\nTextureCubeNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    builder.require('irradiance');\n\n    if (builder.context.bias) {\n      builder.context.bias.setTexture(this.value);\n    }\n\n    var scopeNode = builder.slot === 'irradiance' ? this.irradianceNode : this.radianceNode;\n    return scopeNode.build(builder, output);\n  } else {\n    console.warn('THREE.TextureCubeNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('vec4( 0.0 )', this.getType(builder), output);\n  }\n};\n\nTextureCubeNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.value = source.value;\n  return this;\n};\n\nTextureCubeNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { TextureCubeNode };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,UAAU,QAAQ,4BAA4B;AAEvD,SAASC,eAAeA,CAACC,KAAK,EAAEC,EAAE,EAAEC,IAAI,EAAE;EACxCR,QAAQ,CAACS,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;EACzB,IAAI,CAACH,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACI,YAAY,GAAG,IAAIR,iBAAiB,CAAC,IAAI,CAACI,KAAK,EAAEC,EAAE,IAAI,IAAIJ,WAAW,CAACA,WAAW,CAACQ,MAAM,CAAC;EAAE;EACjGH,IAAI,CAAC;EACL,IAAI,CAACI,cAAc,GAAG,IAAIV,iBAAiB,CAAC,IAAI,CAACI,KAAK,EAAE,IAAIF,UAAU,CAACA,UAAU,CAACS,KAAK,CAAC,EAAE,IAAIZ,SAAS,CAAC,CAAC,CAAC,CAACa,WAAW,CAAC,IAAI,CAAC,CAAC;AAC/H;AAEAT,eAAe,CAACU,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACjB,QAAQ,CAACe,SAAS,CAAC;AAC7DV,eAAe,CAACU,SAAS,CAACG,WAAW,GAAGb,eAAe;AACvDA,eAAe,CAACU,SAAS,CAACI,QAAQ,GAAG,aAAa;AAElDd,eAAe,CAACU,SAAS,CAACK,QAAQ,GAAG,UAAUC,OAAO,EAAEC,MAAM,EAAE;EAC9D,IAAID,OAAO,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;IAChCF,OAAO,CAACG,OAAO,CAAC,YAAY,CAAC;IAE7B,IAAIH,OAAO,CAACI,OAAO,CAACjB,IAAI,EAAE;MACxBa,OAAO,CAACI,OAAO,CAACjB,IAAI,CAACkB,UAAU,CAAC,IAAI,CAACpB,KAAK,CAAC;IAC7C;IAEA,IAAIqB,SAAS,GAAGN,OAAO,CAACO,IAAI,KAAK,YAAY,GAAG,IAAI,CAAChB,cAAc,GAAG,IAAI,CAACF,YAAY;IACvF,OAAOiB,SAAS,CAACE,KAAK,CAACR,OAAO,EAAEC,MAAM,CAAC;EACzC,CAAC,MAAM;IACLQ,OAAO,CAACC,IAAI,CAAC,+CAA+C,GAAGV,OAAO,CAACW,MAAM,GAAG,UAAU,CAAC;IAC3F,OAAOX,OAAO,CAACY,MAAM,CAAC,aAAa,EAAE,IAAI,CAACC,OAAO,CAACb,OAAO,CAAC,EAAEC,MAAM,CAAC;EACrE;AACF,CAAC;AAEDjB,eAAe,CAACU,SAAS,CAACoB,IAAI,GAAG,UAAUC,MAAM,EAAE;EACjDpC,QAAQ,CAACe,SAAS,CAACoB,IAAI,CAAC1B,IAAI,CAAC,IAAI,EAAE2B,MAAM,CAAC;EAC1C,IAAI,CAAC9B,KAAK,GAAG8B,MAAM,CAAC9B,KAAK;EACzB,OAAO,IAAI;AACb,CAAC;AAEDD,eAAe,CAACU,SAAS,CAACsB,MAAM,GAAG,UAAUC,IAAI,EAAE;EACjD,IAAIC,IAAI,GAAG,IAAI,CAACC,WAAW,CAACF,IAAI,CAAC;EAEjC,IAAI,CAACC,IAAI,EAAE;IACTA,IAAI,GAAG,IAAI,CAACE,cAAc,CAACH,IAAI,CAAC;IAChCC,IAAI,CAACjC,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC+B,MAAM,CAACC,IAAI,CAAC,CAACI,IAAI;EAC3C;EAEA,OAAOH,IAAI;AACb,CAAC;AAED,SAASlC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}