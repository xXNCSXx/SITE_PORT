{"ast":null,"code":"import { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from 'three';\nvar DDSLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\nDDSLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: DDSLoader,\n  parse: function (buffer, loadMipmaps) {\n    var dds = {\n      mipmaps: [],\n      width: 0,\n      height: 0,\n      format: null,\n      mipmapCount: 1\n    }; // Adapted from @toji's DDS utils\n    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n    // All values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n    var DDS_MAGIC = 0x20534444; // var DDSD_CAPS = 0x1;\n    // var DDSD_HEIGHT = 0x2;\n    // var DDSD_WIDTH = 0x4;\n    // var DDSD_PITCH = 0x8;\n    // var DDSD_PIXELFORMAT = 0x1000;\n\n    var DDSD_MIPMAPCOUNT = 0x20000; // var DDSD_LINEARSIZE = 0x80000;\n    // var DDSD_DEPTH = 0x800000;\n    // var DDSCAPS_COMPLEX = 0x8;\n    // var DDSCAPS_MIPMAP = 0x400000;\n    // var DDSCAPS_TEXTURE = 0x1000;\n\n    var DDSCAPS2_CUBEMAP = 0x200;\n    var DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\n    var DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\n    var DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\n    var DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\n    var DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\n    var DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000; // var DDSCAPS2_VOLUME = 0x200000;\n    // var DDPF_ALPHAPIXELS = 0x1;\n    // var DDPF_ALPHA = 0x2;\n\n    var DDPF_FOURCC = 0x4; // var DDPF_RGB = 0x40;\n    // var DDPF_YUV = 0x200;\n    // var DDPF_LUMINANCE = 0x20000;\n\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n    }\n    function loadARGBMip(buffer, dataOffset, width, height) {\n      var dataLength = width * height * 4;\n      var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n      var byteArray = new Uint8Array(dataLength);\n      var dst = 0;\n      var src = 0;\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          var b = srcBuffer[src];\n          src++;\n          var g = srcBuffer[src];\n          src++;\n          var r = srcBuffer[src];\n          src++;\n          var a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++; //r\n\n          byteArray[dst] = g;\n          dst++; //g\n\n          byteArray[dst] = b;\n          dst++; //b\n\n          byteArray[dst] = a;\n          dst++; //a\n        }\n      }\n      return byteArray;\n    }\n    var FOURCC_DXT1 = fourCCToInt32('DXT1');\n    var FOURCC_DXT3 = fourCCToInt32('DXT3');\n    var FOURCC_DXT5 = fourCCToInt32('DXT5');\n    var FOURCC_ETC1 = fourCCToInt32('ETC1');\n    var headerLengthInt = 31; // The header length in 32 bit ints\n    // Offsets into the header array\n\n    var off_magic = 0;\n    var off_size = 1;\n    var off_flags = 2;\n    var off_height = 3;\n    var off_width = 4;\n    var off_mipmapCount = 7;\n    var off_pfFlags = 20;\n    var off_pfFourCC = 21;\n    var off_RGBBitCount = 22;\n    var off_RBitMask = 23;\n    var off_GBitMask = 24;\n    var off_BBitMask = 25;\n    var off_ABitMask = 26; // var off_caps = 27;\n\n    var off_caps2 = 28; // var off_caps3 = 29;\n    // var off_caps4 = 30;\n    // Parse header\n\n    var header = new Int32Array(buffer, 0, headerLengthInt);\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n      return dds;\n    }\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n      return dds;\n    }\n    var blockBytes;\n    var fourCC = header[off_pfFourCC];\n    var isRGBAUncompressed = false;\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = RGB_S3TC_DXT1_Format;\n        break;\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT3_Format;\n        break;\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT5_Format;\n        break;\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = RGB_ETC1_Format;\n        break;\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = RGBAFormat;\n        } else {\n          console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n          return dds;\n        }\n    }\n    dds.mipmapCount = 1;\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n    var caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n      return dds;\n    }\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    var dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n    var faces = dds.isCubemap ? 6 : 1;\n    for (let face = 0; face < faces; face++) {\n      var width = dds.width;\n      var height = dds.height;\n      for (let i = 0; i < dds.mipmapCount; i++) {\n        if (isRGBAUncompressed) {\n          var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          var dataLength = byteArray.length;\n        } else {\n          var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n        var mipmap = {\n          data: byteArray,\n          width: width,\n          height: height\n        };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n    return dds;\n  }\n});\nexport { DDSLoader };","map":{"version":3,"names":["CompressedTextureLoader","RGBAFormat","RGB_ETC1_Format","RGBA_S3TC_DXT5_Format","RGBA_S3TC_DXT3_Format","RGB_S3TC_DXT1_Format","DDSLoader","manager","call","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","dds","mipmaps","width","height","format","mipmapCount","DDS_MAGIC","DDSD_MIPMAPCOUNT","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDPF_FOURCC","fourCCToInt32","value","charCodeAt","int32ToFourCC","String","fromCharCode","loadARGBMip","dataOffset","dataLength","srcBuffer","Uint8Array","byteArray","dst","src","y","x","b","g","r","a","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","headerLengthInt","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_RGBBitCount","off_RBitMask","off_GBitMask","off_BBitMask","off_ABitMask","off_caps2","header","Int32Array","console","error","blockBytes","fourCC","isRGBAUncompressed","Math","max","caps2","isCubemap","faces","face","i","length","mipmap","data","push"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/DDSLoader.js"],"sourcesContent":["import { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from 'three';\n\nvar DDSLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nDDSLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: DDSLoader,\n  parse: function (buffer, loadMipmaps) {\n    var dds = {\n      mipmaps: [],\n      width: 0,\n      height: 0,\n      format: null,\n      mipmapCount: 1\n    }; // Adapted from @toji's DDS utils\n    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n    // All values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n    var DDS_MAGIC = 0x20534444; // var DDSD_CAPS = 0x1;\n    // var DDSD_HEIGHT = 0x2;\n    // var DDSD_WIDTH = 0x4;\n    // var DDSD_PITCH = 0x8;\n    // var DDSD_PIXELFORMAT = 0x1000;\n\n    var DDSD_MIPMAPCOUNT = 0x20000; // var DDSD_LINEARSIZE = 0x80000;\n    // var DDSD_DEPTH = 0x800000;\n    // var DDSCAPS_COMPLEX = 0x8;\n    // var DDSCAPS_MIPMAP = 0x400000;\n    // var DDSCAPS_TEXTURE = 0x1000;\n\n    var DDSCAPS2_CUBEMAP = 0x200;\n    var DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\n    var DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\n    var DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\n    var DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\n    var DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\n    var DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000; // var DDSCAPS2_VOLUME = 0x200000;\n    // var DDPF_ALPHAPIXELS = 0x1;\n    // var DDPF_ALPHA = 0x2;\n\n    var DDPF_FOURCC = 0x4; // var DDPF_RGB = 0x40;\n    // var DDPF_YUV = 0x200;\n    // var DDPF_LUMINANCE = 0x20000;\n\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n    }\n\n    function loadARGBMip(buffer, dataOffset, width, height) {\n      var dataLength = width * height * 4;\n      var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n      var byteArray = new Uint8Array(dataLength);\n      var dst = 0;\n      var src = 0;\n\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          var b = srcBuffer[src];\n          src++;\n          var g = srcBuffer[src];\n          src++;\n          var r = srcBuffer[src];\n          src++;\n          var a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++; //r\n\n          byteArray[dst] = g;\n          dst++; //g\n\n          byteArray[dst] = b;\n          dst++; //b\n\n          byteArray[dst] = a;\n          dst++; //a\n        }\n      }\n\n      return byteArray;\n    }\n\n    var FOURCC_DXT1 = fourCCToInt32('DXT1');\n    var FOURCC_DXT3 = fourCCToInt32('DXT3');\n    var FOURCC_DXT5 = fourCCToInt32('DXT5');\n    var FOURCC_ETC1 = fourCCToInt32('ETC1');\n    var headerLengthInt = 31; // The header length in 32 bit ints\n    // Offsets into the header array\n\n    var off_magic = 0;\n    var off_size = 1;\n    var off_flags = 2;\n    var off_height = 3;\n    var off_width = 4;\n    var off_mipmapCount = 7;\n    var off_pfFlags = 20;\n    var off_pfFourCC = 21;\n    var off_RGBBitCount = 22;\n    var off_RBitMask = 23;\n    var off_GBitMask = 24;\n    var off_BBitMask = 25;\n    var off_ABitMask = 26; // var off_caps = 27;\n\n    var off_caps2 = 28; // var off_caps3 = 29;\n    // var off_caps4 = 30;\n    // Parse header\n\n    var header = new Int32Array(buffer, 0, headerLengthInt);\n\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n      return dds;\n    }\n\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n      return dds;\n    }\n\n    var blockBytes;\n    var fourCC = header[off_pfFourCC];\n    var isRGBAUncompressed = false;\n\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = RGB_S3TC_DXT1_Format;\n        break;\n\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT3_Format;\n        break;\n\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT5_Format;\n        break;\n\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = RGB_ETC1_Format;\n        break;\n\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = RGBAFormat;\n        } else {\n          console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n          return dds;\n        }\n\n    }\n\n    dds.mipmapCount = 1;\n\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n\n    var caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n      return dds;\n    }\n\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    var dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n    var faces = dds.isCubemap ? 6 : 1;\n\n    for (let face = 0; face < faces; face++) {\n      var width = dds.width;\n      var height = dds.height;\n\n      for (let i = 0; i < dds.mipmapCount; i++) {\n        if (isRGBAUncompressed) {\n          var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          var dataLength = byteArray.length;\n        } else {\n          var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n\n        var mipmap = {\n          data: byteArray,\n          width: width,\n          height: height\n        };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n\n    return dds;\n  }\n});\n\nexport { DDSLoader };\n"],"mappings":"AAAA,SAASA,uBAAuB,EAAEC,UAAU,EAAEC,eAAe,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,oBAAoB,QAAQ,OAAO;AAEhJ,IAAIC,SAAS,GAAG,SAAAA,CAAUC,OAAO,EAAE;EACjCP,uBAAuB,CAACQ,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;AAC7C,CAAC;AAEDD,SAAS,CAACG,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,MAAM,CAACZ,uBAAuB,CAACS,SAAS,CAAC,EAAE;EACpFI,WAAW,EAAEP,SAAS;EACtBQ,KAAK,EAAE,SAAAA,CAAUC,MAAM,EAAEC,WAAW,EAAE;IACpC,IAAIC,GAAG,GAAG;MACRC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE,CAAC;MACTC,MAAM,EAAE,IAAI;MACZC,WAAW,EAAE;IACf,CAAC,CAAC,CAAC;IACH;IACA;IACA;;IAEA,IAAIC,SAAS,GAAG,UAAU,CAAC,CAAC;IAC5B;IACA;IACA;IACA;;IAEA,IAAIC,gBAAgB,GAAG,OAAO,CAAC,CAAC;IAChC;IACA;IACA;IACA;;IAEA,IAAIC,gBAAgB,GAAG,KAAK;IAC5B,IAAIC,0BAA0B,GAAG,KAAK;IACtC,IAAIC,0BAA0B,GAAG,KAAK;IACtC,IAAIC,0BAA0B,GAAG,MAAM;IACvC,IAAIC,0BAA0B,GAAG,MAAM;IACvC,IAAIC,0BAA0B,GAAG,MAAM;IACvC,IAAIC,0BAA0B,GAAG,MAAM,CAAC,CAAC;IACzC;IACA;;IAEA,IAAIC,WAAW,GAAG,GAAG,CAAC,CAAC;IACvB;IACA;;IAEA,SAASC,aAAaA,CAACC,KAAK,EAAE;MAC5B,OAAOA,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAID,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAID,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAID,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACrH;IAEA,SAASC,aAAaA,CAACF,KAAK,EAAE;MAC5B,OAAOG,MAAM,CAACC,YAAY,CAACJ,KAAK,GAAG,IAAI,EAAEA,KAAK,IAAI,CAAC,GAAG,IAAI,EAAEA,KAAK,IAAI,EAAE,GAAG,IAAI,EAAEA,KAAK,IAAI,EAAE,GAAG,IAAI,CAAC;IACrG;IAEA,SAASK,WAAWA,CAACxB,MAAM,EAAEyB,UAAU,EAAErB,KAAK,EAAEC,MAAM,EAAE;MACtD,IAAIqB,UAAU,GAAGtB,KAAK,GAAGC,MAAM,GAAG,CAAC;MACnC,IAAIsB,SAAS,GAAG,IAAIC,UAAU,CAAC5B,MAAM,EAAEyB,UAAU,EAAEC,UAAU,CAAC;MAC9D,IAAIG,SAAS,GAAG,IAAID,UAAU,CAACF,UAAU,CAAC;MAC1C,IAAII,GAAG,GAAG,CAAC;MACX,IAAIC,GAAG,GAAG,CAAC;MAEX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,MAAM,EAAE2B,CAAC,EAAE,EAAE;QAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7B,KAAK,EAAE6B,CAAC,EAAE,EAAE;UAC9B,IAAIC,CAAC,GAAGP,SAAS,CAACI,GAAG,CAAC;UACtBA,GAAG,EAAE;UACL,IAAII,CAAC,GAAGR,SAAS,CAACI,GAAG,CAAC;UACtBA,GAAG,EAAE;UACL,IAAIK,CAAC,GAAGT,SAAS,CAACI,GAAG,CAAC;UACtBA,GAAG,EAAE;UACL,IAAIM,CAAC,GAAGV,SAAS,CAACI,GAAG,CAAC;UACtBA,GAAG,EAAE;UACLF,SAAS,CAACC,GAAG,CAAC,GAAGM,CAAC;UAClBN,GAAG,EAAE,CAAC,CAAC;;UAEPD,SAAS,CAACC,GAAG,CAAC,GAAGK,CAAC;UAClBL,GAAG,EAAE,CAAC,CAAC;;UAEPD,SAAS,CAACC,GAAG,CAAC,GAAGI,CAAC;UAClBJ,GAAG,EAAE,CAAC,CAAC;;UAEPD,SAAS,CAACC,GAAG,CAAC,GAAGO,CAAC;UAClBP,GAAG,EAAE,CAAC,CAAC;QACT;MACF;MAEA,OAAOD,SAAS;IAClB;IAEA,IAAIS,WAAW,GAAGpB,aAAa,CAAC,MAAM,CAAC;IACvC,IAAIqB,WAAW,GAAGrB,aAAa,CAAC,MAAM,CAAC;IACvC,IAAIsB,WAAW,GAAGtB,aAAa,CAAC,MAAM,CAAC;IACvC,IAAIuB,WAAW,GAAGvB,aAAa,CAAC,MAAM,CAAC;IACvC,IAAIwB,eAAe,GAAG,EAAE,CAAC,CAAC;IAC1B;;IAEA,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIC,eAAe,GAAG,EAAE;IACxB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIC,YAAY,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,SAAS,GAAG,EAAE,CAAC,CAAC;IACpB;IACA;;IAEA,IAAIC,MAAM,GAAG,IAAIC,UAAU,CAAC1D,MAAM,EAAE,CAAC,EAAE0C,eAAe,CAAC;IAEvD,IAAIe,MAAM,CAACd,SAAS,CAAC,KAAKnC,SAAS,EAAE;MACnCmD,OAAO,CAACC,KAAK,CAAC,4DAA4D,CAAC;MAC3E,OAAO1D,GAAG;IACZ;IAEA,IAAI,CAACuD,MAAM,CAACR,WAAW,CAAC,GAAGhC,WAAW,EAAE;MACtC0C,OAAO,CAACC,KAAK,CAAC,wEAAwE,CAAC;MACvF,OAAO1D,GAAG;IACZ;IAEA,IAAI2D,UAAU;IACd,IAAIC,MAAM,GAAGL,MAAM,CAACP,YAAY,CAAC;IACjC,IAAIa,kBAAkB,GAAG,KAAK;IAE9B,QAAQD,MAAM;MACZ,KAAKxB,WAAW;QACduB,UAAU,GAAG,CAAC;QACd3D,GAAG,CAACI,MAAM,GAAGhB,oBAAoB;QACjC;MAEF,KAAKiD,WAAW;QACdsB,UAAU,GAAG,EAAE;QACf3D,GAAG,CAACI,MAAM,GAAGjB,qBAAqB;QAClC;MAEF,KAAKmD,WAAW;QACdqB,UAAU,GAAG,EAAE;QACf3D,GAAG,CAACI,MAAM,GAAGlB,qBAAqB;QAClC;MAEF,KAAKqD,WAAW;QACdoB,UAAU,GAAG,CAAC;QACd3D,GAAG,CAACI,MAAM,GAAGnB,eAAe;QAC5B;MAEF;QACE,IAAIsE,MAAM,CAACN,eAAe,CAAC,KAAK,EAAE,IAAIM,MAAM,CAACL,YAAY,CAAC,GAAG,QAAQ,IAAIK,MAAM,CAACJ,YAAY,CAAC,GAAG,MAAM,IAAII,MAAM,CAACH,YAAY,CAAC,GAAG,IAAI,IAAIG,MAAM,CAACF,YAAY,CAAC,GAAG,UAAU,EAAE;UAC1KQ,kBAAkB,GAAG,IAAI;UACzBF,UAAU,GAAG,EAAE;UACf3D,GAAG,CAACI,MAAM,GAAGpB,UAAU;QACzB,CAAC,MAAM;UACLyE,OAAO,CAACC,KAAK,CAAC,iDAAiD,EAAEvC,aAAa,CAACyC,MAAM,CAAC,CAAC;UACvF,OAAO5D,GAAG;QACZ;IAEJ;IAEAA,GAAG,CAACK,WAAW,GAAG,CAAC;IAEnB,IAAIkD,MAAM,CAACZ,SAAS,CAAC,GAAGpC,gBAAgB,IAAIR,WAAW,KAAK,KAAK,EAAE;MACjEC,GAAG,CAACK,WAAW,GAAGyD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,MAAM,CAACT,eAAe,CAAC,CAAC;IACxD;IAEA,IAAIkB,KAAK,GAAGT,MAAM,CAACD,SAAS,CAAC;IAC7BtD,GAAG,CAACiE,SAAS,GAAGD,KAAK,GAAGxD,gBAAgB,GAAG,IAAI,GAAG,KAAK;IAEvD,IAAIR,GAAG,CAACiE,SAAS,KAAK,EAAED,KAAK,GAAGvD,0BAA0B,CAAC,IAAI,EAAEuD,KAAK,GAAGtD,0BAA0B,CAAC,IAAI,EAAEsD,KAAK,GAAGrD,0BAA0B,CAAC,IAAI,EAAEqD,KAAK,GAAGpD,0BAA0B,CAAC,IAAI,EAAEoD,KAAK,GAAGnD,0BAA0B,CAAC,IAAI,EAAEmD,KAAK,GAAGlD,0BAA0B,CAAC,CAAC,EAAE;MACzQ2C,OAAO,CAACC,KAAK,CAAC,iDAAiD,CAAC;MAChE,OAAO1D,GAAG;IACZ;IAEAA,GAAG,CAACE,KAAK,GAAGqD,MAAM,CAACV,SAAS,CAAC;IAC7B7C,GAAG,CAACG,MAAM,GAAGoD,MAAM,CAACX,UAAU,CAAC;IAC/B,IAAIrB,UAAU,GAAGgC,MAAM,CAACb,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEvC,IAAIwB,KAAK,GAAGlE,GAAG,CAACiE,SAAS,GAAG,CAAC,GAAG,CAAC;IAEjC,KAAK,IAAIE,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGD,KAAK,EAAEC,IAAI,EAAE,EAAE;MACvC,IAAIjE,KAAK,GAAGF,GAAG,CAACE,KAAK;MACrB,IAAIC,MAAM,GAAGH,GAAG,CAACG,MAAM;MAEvB,KAAK,IAAIiE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpE,GAAG,CAACK,WAAW,EAAE+D,CAAC,EAAE,EAAE;QACxC,IAAIP,kBAAkB,EAAE;UACtB,IAAIlC,SAAS,GAAGL,WAAW,CAACxB,MAAM,EAAEyB,UAAU,EAAErB,KAAK,EAAEC,MAAM,CAAC;UAC9D,IAAIqB,UAAU,GAAGG,SAAS,CAAC0C,MAAM;QACnC,CAAC,MAAM;UACL,IAAI7C,UAAU,GAAGsC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE7D,KAAK,CAAC,GAAG,CAAC,GAAG4D,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE5D,MAAM,CAAC,GAAG,CAAC,GAAGwD,UAAU;UAC9E,IAAIhC,SAAS,GAAG,IAAID,UAAU,CAAC5B,MAAM,EAAEyB,UAAU,EAAEC,UAAU,CAAC;QAChE;QAEA,IAAI8C,MAAM,GAAG;UACXC,IAAI,EAAE5C,SAAS;UACfzB,KAAK,EAAEA,KAAK;UACZC,MAAM,EAAEA;QACV,CAAC;QACDH,GAAG,CAACC,OAAO,CAACuE,IAAI,CAACF,MAAM,CAAC;QACxB/C,UAAU,IAAIC,UAAU;QACxBtB,KAAK,GAAG4D,IAAI,CAACC,GAAG,CAAC7D,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC;QAC/BC,MAAM,GAAG2D,IAAI,CAACC,GAAG,CAAC5D,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;MACnC;IACF;IAEA,OAAOH,GAAG;EACZ;AACF,CAAC,CAAC;AAEF,SAASX,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}