{"ast":null,"code":"import { Loader, FileLoader, DataTexture, RGBFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492\nclass LUT3dlLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(str) {\n    // remove empty lines and comment lints\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    const lines = str.split(/[\\n\\r]+/g); // first line is the positions on the grid that are provided by the LUT\n\n    const gridLines = lines[0].trim().split(/\\s+/g).map(e => parseFloat(e));\n    const gridStep = gridLines[1] - gridLines[0];\n    const size = gridLines.length;\n    for (let i = 1, l = gridLines.length; i < l; i++) {\n      if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n        throw new Error('LUT3dlLoader: Inconsistent grid size not supported.');\n      }\n    }\n    const dataArray = new Array(size * size * size * 3);\n    let index = 0;\n    let maxOutputValue = 0.0;\n    for (let i = 1, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n      const r = parseFloat(split[0]);\n      const g = parseFloat(split[1]);\n      const b = parseFloat(split[2]);\n      maxOutputValue = Math.max(maxOutputValue, r, g, b);\n      const bLayer = index % size;\n      const gLayer = Math.floor(index / size) % size;\n      const rLayer = Math.floor(index / (size * size)) % size; // b grows first, then g, then r\n\n      const pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n      dataArray[3 * pixelIndex + 0] = r;\n      dataArray[3 * pixelIndex + 1] = g;\n      dataArray[3 * pixelIndex + 2] = b;\n      index += 1;\n    } // Find the apparent bit depth of the stored RGB values and scale the\n    // values to [ 0, 255 ].\n\n    const bits = Math.ceil(Math.log2(maxOutputValue));\n    const maxBitValue = Math.pow(2.0, bits);\n    for (let i = 0, l = dataArray.length; i < l; i++) {\n      const val = dataArray[i];\n      dataArray[i] = 255 * val / maxBitValue;\n    }\n    const data = new Uint8Array(dataArray);\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.format = RGBFormat;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    const texture3D = new DataTexture3D();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.format = RGBFormat;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    return {\n      size,\n      texture,\n      texture3D\n    };\n  }\n}\nexport { LUT3dlLoader };","map":{"version":3,"names":["Loader","FileLoader","DataTexture","RGBFormat","UnsignedByteType","LinearFilter","ClampToEdgeWrapping","DataTexture3D","LUT3dlLoader","load","url","onLoad","onProgress","onError","loader","manager","setPath","path","setResponseType","text","parse","e","console","error","itemError","str","replace","trim","lines","split","gridLines","map","parseFloat","gridStep","size","length","i","l","Error","dataArray","Array","index","maxOutputValue","line","r","g","b","Math","max","bLayer","gLayer","floor","rLayer","pixelIndex","bits","ceil","log2","maxBitValue","pow","val","data","Uint8Array","texture","image","width","height","format","type","magFilter","minFilter","wrapS","wrapT","generateMipmaps","texture3D","depth","wrapR"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/LUT3dlLoader.js"],"sourcesContent":["import { Loader, FileLoader, DataTexture, RGBFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492\nclass LUT3dlLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // remove empty lines and comment lints\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    const lines = str.split(/[\\n\\r]+/g); // first line is the positions on the grid that are provided by the LUT\n\n    const gridLines = lines[0].trim().split(/\\s+/g).map(e => parseFloat(e));\n    const gridStep = gridLines[1] - gridLines[0];\n    const size = gridLines.length;\n\n    for (let i = 1, l = gridLines.length; i < l; i++) {\n      if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n        throw new Error('LUT3dlLoader: Inconsistent grid size not supported.');\n      }\n    }\n\n    const dataArray = new Array(size * size * size * 3);\n    let index = 0;\n    let maxOutputValue = 0.0;\n\n    for (let i = 1, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n      const r = parseFloat(split[0]);\n      const g = parseFloat(split[1]);\n      const b = parseFloat(split[2]);\n      maxOutputValue = Math.max(maxOutputValue, r, g, b);\n      const bLayer = index % size;\n      const gLayer = Math.floor(index / size) % size;\n      const rLayer = Math.floor(index / (size * size)) % size; // b grows first, then g, then r\n\n      const pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n      dataArray[3 * pixelIndex + 0] = r;\n      dataArray[3 * pixelIndex + 1] = g;\n      dataArray[3 * pixelIndex + 2] = b;\n      index += 1;\n    } // Find the apparent bit depth of the stored RGB values and scale the\n    // values to [ 0, 255 ].\n\n\n    const bits = Math.ceil(Math.log2(maxOutputValue));\n    const maxBitValue = Math.pow(2.0, bits);\n\n    for (let i = 0, l = dataArray.length; i < l; i++) {\n      const val = dataArray[i];\n      dataArray[i] = 255 * val / maxBitValue;\n    }\n\n    const data = new Uint8Array(dataArray);\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.format = RGBFormat;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    const texture3D = new DataTexture3D();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.format = RGBFormat;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    return {\n      size,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUT3dlLoader };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,WAAW,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,mBAAmB,EAAEC,aAAa,QAAQ,OAAO;;AAEtI;AACA,MAAMC,YAAY,SAASR,MAAM,CAAC;EAChCS,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;IACrC,MAAMC,MAAM,GAAG,IAAIb,UAAU,CAAC,IAAI,CAACc,OAAO,CAAC;IAC3CD,MAAM,CAACE,OAAO,CAAC,IAAI,CAACC,IAAI,CAAC;IACzBH,MAAM,CAACI,eAAe,CAAC,MAAM,CAAC;IAC9BJ,MAAM,CAACL,IAAI,CAACC,GAAG,EAAES,IAAI,IAAI;MACvB,IAAI;QACFR,MAAM,CAAC,IAAI,CAACS,KAAK,CAACD,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOE,CAAC,EAAE;QACV,IAAIR,OAAO,EAAE;UACXA,OAAO,CAACQ,CAAC,CAAC;QACZ,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;QAClB;QAEA,IAAI,CAACN,OAAO,CAACS,SAAS,CAACd,GAAG,CAAC;MAC7B;IACF,CAAC,EAAEE,UAAU,EAAEC,OAAO,CAAC;EACzB;EAEAO,KAAKA,CAACK,GAAG,EAAE;IACT;IACAA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;IAC5E,MAAMC,KAAK,GAAGH,GAAG,CAACI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;;IAErC,MAAMC,SAAS,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACD,IAAI,CAAC,CAAC,CAACE,KAAK,CAAC,MAAM,CAAC,CAACE,GAAG,CAACV,CAAC,IAAIW,UAAU,CAACX,CAAC,CAAC,CAAC;IACvE,MAAMY,QAAQ,GAAGH,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC;IAC5C,MAAMI,IAAI,GAAGJ,SAAS,CAACK,MAAM;IAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGP,SAAS,CAACK,MAAM,EAAEC,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MAChD,IAAIH,QAAQ,KAAKH,SAAS,CAACM,CAAC,CAAC,GAAGN,SAAS,CAACM,CAAC,GAAG,CAAC,CAAC,EAAE;QAChD,MAAM,IAAIE,KAAK,CAAC,qDAAqD,CAAC;MACxE;IACF;IAEA,MAAMC,SAAS,GAAG,IAAIC,KAAK,CAACN,IAAI,GAAGA,IAAI,GAAGA,IAAI,GAAG,CAAC,CAAC;IACnD,IAAIO,KAAK,GAAG,CAAC;IACb,IAAIC,cAAc,GAAG,GAAG;IAExB,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGT,KAAK,CAACO,MAAM,EAAEC,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MAC5C,MAAMO,IAAI,GAAGf,KAAK,CAACQ,CAAC,CAAC,CAACT,IAAI,CAAC,CAAC;MAC5B,MAAME,KAAK,GAAGc,IAAI,CAACd,KAAK,CAAC,KAAK,CAAC;MAC/B,MAAMe,CAAC,GAAGZ,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9B,MAAMgB,CAAC,GAAGb,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9B,MAAMiB,CAAC,GAAGd,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9Ba,cAAc,GAAGK,IAAI,CAACC,GAAG,CAACN,cAAc,EAAEE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAClD,MAAMG,MAAM,GAAGR,KAAK,GAAGP,IAAI;MAC3B,MAAMgB,MAAM,GAAGH,IAAI,CAACI,KAAK,CAACV,KAAK,GAAGP,IAAI,CAAC,GAAGA,IAAI;MAC9C,MAAMkB,MAAM,GAAGL,IAAI,CAACI,KAAK,CAACV,KAAK,IAAIP,IAAI,GAAGA,IAAI,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC;;MAEzD,MAAMmB,UAAU,GAAGJ,MAAM,GAAGf,IAAI,GAAGA,IAAI,GAAGgB,MAAM,GAAGhB,IAAI,GAAGkB,MAAM;MAChEb,SAAS,CAAC,CAAC,GAAGc,UAAU,GAAG,CAAC,CAAC,GAAGT,CAAC;MACjCL,SAAS,CAAC,CAAC,GAAGc,UAAU,GAAG,CAAC,CAAC,GAAGR,CAAC;MACjCN,SAAS,CAAC,CAAC,GAAGc,UAAU,GAAG,CAAC,CAAC,GAAGP,CAAC;MACjCL,KAAK,IAAI,CAAC;IACZ,CAAC,CAAC;IACF;;IAGA,MAAMa,IAAI,GAAGP,IAAI,CAACQ,IAAI,CAACR,IAAI,CAACS,IAAI,CAACd,cAAc,CAAC,CAAC;IACjD,MAAMe,WAAW,GAAGV,IAAI,CAACW,GAAG,CAAC,GAAG,EAAEJ,IAAI,CAAC;IAEvC,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGE,SAAS,CAACJ,MAAM,EAAEC,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MAChD,MAAMuB,GAAG,GAAGpB,SAAS,CAACH,CAAC,CAAC;MACxBG,SAAS,CAACH,CAAC,CAAC,GAAG,GAAG,GAAGuB,GAAG,GAAGF,WAAW;IACxC;IAEA,MAAMG,IAAI,GAAG,IAAIC,UAAU,CAACtB,SAAS,CAAC;IACtC,MAAMuB,OAAO,GAAG,IAAI5D,WAAW,CAAC,CAAC;IACjC4D,OAAO,CAACC,KAAK,CAACH,IAAI,GAAGA,IAAI;IACzBE,OAAO,CAACC,KAAK,CAACC,KAAK,GAAG9B,IAAI;IAC1B4B,OAAO,CAACC,KAAK,CAACE,MAAM,GAAG/B,IAAI,GAAGA,IAAI;IAClC4B,OAAO,CAACI,MAAM,GAAG/D,SAAS;IAC1B2D,OAAO,CAACK,IAAI,GAAG/D,gBAAgB;IAC/B0D,OAAO,CAACM,SAAS,GAAG/D,YAAY;IAChCyD,OAAO,CAACO,SAAS,GAAGhE,YAAY;IAChCyD,OAAO,CAACQ,KAAK,GAAGhE,mBAAmB;IACnCwD,OAAO,CAACS,KAAK,GAAGjE,mBAAmB;IACnCwD,OAAO,CAACU,eAAe,GAAG,KAAK;IAC/B,MAAMC,SAAS,GAAG,IAAIlE,aAAa,CAAC,CAAC;IACrCkE,SAAS,CAACV,KAAK,CAACH,IAAI,GAAGA,IAAI;IAC3Ba,SAAS,CAACV,KAAK,CAACC,KAAK,GAAG9B,IAAI;IAC5BuC,SAAS,CAACV,KAAK,CAACE,MAAM,GAAG/B,IAAI;IAC7BuC,SAAS,CAACV,KAAK,CAACW,KAAK,GAAGxC,IAAI;IAC5BuC,SAAS,CAACP,MAAM,GAAG/D,SAAS;IAC5BsE,SAAS,CAACN,IAAI,GAAG/D,gBAAgB;IACjCqE,SAAS,CAACL,SAAS,GAAG/D,YAAY;IAClCoE,SAAS,CAACJ,SAAS,GAAGhE,YAAY;IAClCoE,SAAS,CAACH,KAAK,GAAGhE,mBAAmB;IACrCmE,SAAS,CAACF,KAAK,GAAGjE,mBAAmB;IACrCmE,SAAS,CAACE,KAAK,GAAGrE,mBAAmB;IACrCmE,SAAS,CAACD,eAAe,GAAG,KAAK;IACjC,OAAO;MACLtC,IAAI;MACJ4B,OAAO;MACPW;IACF,CAAC;EACH;AAEF;AAEA,SAASjE,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}