{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\n\nvar TDSLoader = function (manager) {\n  Loader.call(this, manager);\n  this.debug = false;\n  this.group = null;\n  this.position = 0;\n  this.materials = [];\n  this.meshes = [];\n};\nTDSLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: TDSLoader,\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse: function (arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n    return this.group;\n  },\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile: function (arraybuffer, path) {\n    var data = new DataView(arraybuffer);\n    var chunk = this.readChunk(data);\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      var next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          var version = this.readDWord(data);\n          this.debugMessage('3DS file version: ' + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage('Unknown main chunk: ' + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n  },\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        var version = +this.readDWord(data);\n        this.debugMessage('Mesh Version: ' + version);\n      } else if (next === MASTER_SCALE) {\n        var scale = this.readFloat(data);\n        this.debugMessage('Master scale: ' + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage('Named Object');\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage('Material');\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n  },\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject: function (data) {\n    var chunk = this.readChunk(data);\n    var name = this.readString(data, 64);\n    chunk.cur = this.position;\n    var next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        var mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n  },\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var material = new MeshPhongMaterial();\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage('   Name: ' + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage('   Wireframe');\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        var value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage('   Wireframe Thickness: ' + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage('   DoubleSided');\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage('   Additive Blending');\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage('   Diffuse Color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage('   Specular Color');\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage('   Ambient color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        var shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage('   Shininess : ' + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        var transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage('  Transparency : ' + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage('   ColorMap');\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage('   BumpMap');\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage('   OpacityMap');\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage('   SpecularMap');\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  },\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh: function (data) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var geometry = new BufferGeometry();\n    var uvs = [];\n    var material = new MeshPhongMaterial();\n    var mesh = new Mesh(geometry, material);\n    mesh.name = 'mesh';\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        var points = this.readWord(data);\n        this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n        var vertices = [];\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        var texels = this.readWord(data);\n        this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n        var uvs = [];\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage('   Tranformation Matrix (TODO)');\n        var values = [];\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n        var matrix = new Matrix4(); //X Line\n\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9]; //Y Line\n\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11]; //Z Line\n\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10]; //W Line\n\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        var inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  },\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray: function (data, mesh) {\n    var chunk = this.readChunk(data);\n    var faces = this.readWord(data);\n    this.debugMessage('   Faces: ' + faces);\n    var index = [];\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data); // visibility\n    }\n    mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n    var materialIndex = 0;\n    var start = 0;\n    while (this.position < chunk.end) {\n      var subchunk = this.readChunk(data);\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage('      Material Group');\n        this.resetPosition(data);\n        var group = this.readMaterialGroup(data);\n        var count = group.index.length * 3; // assuming successive indices\n\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        var material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n        if (material !== undefined) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n      }\n      this.endChunk(subchunk);\n    }\n    if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n    this.endChunk(chunk);\n  },\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var texture = {};\n    var loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        var name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage('      File: ' + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage('      OffsetX: ' + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage('      OffsetY: ' + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage('      RepeatX: ' + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage('      RepeatY: ' + texture.repeat.y);\n      } else {\n        this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    return texture;\n  },\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup: function (data) {\n    this.readChunk(data);\n    var name = this.readString(data, 64);\n    var numFaces = this.readWord(data);\n    this.debugMessage('         Name: ' + name);\n    this.debugMessage('         Faces: ' + numFaces);\n    var index = [];\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n    return {\n      name: name,\n      index: index\n    };\n  },\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor: function (data) {\n    var chunk = this.readChunk(data);\n    var color = new Color();\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      var r = this.readByte(data);\n      var g = this.readByte(data);\n      var b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      var r = this.readFloat(data);\n      var g = this.readFloat(data);\n      var b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else {\n      this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return color;\n  },\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk: function (data) {\n    var chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  },\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk: function (chunk) {\n    this.position = chunk.end;\n  },\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk: function (data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n    this.position = chunk.cur;\n    try {\n      var next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  },\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition: function () {\n    this.position -= 6;\n  },\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte: function (data) {\n    var v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  },\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat: function (data) {\n    try {\n      var v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n    }\n  },\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt: function (data) {\n    var v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort: function (data) {\n    var v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord: function (data) {\n    var v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord: function (data) {\n    var v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString: function (data, maxLength) {\n    var s = '';\n    for (let i = 0; i < maxLength; i++) {\n      var c = this.readByte(data);\n      if (!c) {\n        break;\n      }\n      s += String.fromCharCode(c);\n    }\n    return s;\n  },\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readPercentage: function (data) {\n    var chunk = this.readChunk(data);\n    var value;\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n      default:\n        this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return value;\n  },\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage: function (message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}); // var NULL_CHUNK = 0x0000;\n\nvar M3DMAGIC = 0x4d4d; // var SMAGIC = 0x2D2D;\n// var LMAGIC = 0x2D3D;\n\nvar MLIBMAGIC = 0x3daa; // var MATMAGIC = 0x3DFF;\n\nvar CMAGIC = 0xc23d;\nvar M3D_VERSION = 0x0002; // var M3D_KFVERSION = 0x0005;\n\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\nvar INT_PERCENTAGE = 0x0030;\nvar FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3d3d;\nvar MESH_VERSION = 0x3d3e;\nvar MASTER_SCALE = 0x0100; // var LO_SHADOW_BIAS = 0x1400;\n// var HI_SHADOW_BIAS = 0x1410;\n// var SHADOW_MAP_SIZE = 0x1420;\n// var SHADOW_SAMPLES = 0x1430;\n// var SHADOW_RANGE = 0x1440;\n// var SHADOW_FILTER = 0x1450;\n// var RAY_BIAS = 0x1460;\n// var O_CONSTS = 0x1500;\n// var AMBIENT_LIGHT = 0x2100;\n// var BIT_MAP = 0x1100;\n// var SOLID_BGND = 0x1200;\n// var V_GRADIENT = 0x1300;\n// var USE_BIT_MAP = 0x1101;\n// var USE_SOLID_BGND = 0x1201;\n// var USE_V_GRADIENT = 0x1301;\n// var FOG = 0x2200;\n// var FOG_BGND = 0x2210;\n// var LAYER_FOG = 0x2302;\n// var DISTANCE_CUE = 0x2300;\n// var DCUE_BGND = 0x2310;\n// var USE_FOG = 0x2201;\n// var USE_LAYER_FOG = 0x2303;\n// var USE_DISTANCE_CUE = 0x2301;\n\nvar MAT_ENTRY = 0xafff;\nvar MAT_NAME = 0xa000;\nvar MAT_AMBIENT = 0xa010;\nvar MAT_DIFFUSE = 0xa020;\nvar MAT_SPECULAR = 0xa030;\nvar MAT_SHININESS = 0xa040; // var MAT_SHIN2PCT = 0xA041;\n\nvar MAT_TRANSPARENCY = 0xa050; // var MAT_XPFALL = 0xA052;\n// var MAT_USE_XPFALL = 0xA240;\n// var MAT_REFBLUR = 0xA053;\n// var MAT_SHADING = 0xA100;\n// var MAT_USE_REFBLUR = 0xA250;\n// var MAT_SELF_ILLUM = 0xA084;\n\nvar MAT_TWO_SIDE = 0xa081; // var MAT_DECAL = 0xA082;\n\nvar MAT_ADDITIVE = 0xa083;\nvar MAT_WIRE = 0xa085; // var MAT_FACEMAP = 0xA088;\n// var MAT_TRANSFALLOFF_IN = 0xA08A;\n// var MAT_PHONGSOFT = 0xA08C;\n// var MAT_WIREABS = 0xA08E;\n\nvar MAT_WIRE_SIZE = 0xa087;\nvar MAT_TEXMAP = 0xa200; // var MAT_SXP_TEXT_DATA = 0xA320;\n// var MAT_TEXMASK = 0xA33E;\n// var MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// var MAT_TEX2MAP = 0xA33A;\n// var MAT_SXP_TEXT2_DATA = 0xA321;\n// var MAT_TEX2MASK = 0xA340;\n// var MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nvar MAT_OPACMAP = 0xa210; // var MAT_SXP_OPAC_DATA = 0xA322;\n// var MAT_OPACMASK = 0xA342;\n// var MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nvar MAT_BUMPMAP = 0xa230; // var MAT_SXP_BUMP_DATA = 0xA324;\n// var MAT_BUMPMASK = 0xA344;\n// var MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nvar MAT_SPECMAP = 0xa204; // var MAT_SXP_SPEC_DATA = 0xA325;\n// var MAT_SPECMASK = 0xA348;\n// var MAT_SXP_SPECMASK_DATA = 0xA332;\n// var MAT_SHINMAP = 0xA33C;\n// var MAT_SXP_SHIN_DATA = 0xA326;\n// var MAT_SHINMASK = 0xA346;\n// var MAT_SXP_SHINMASK_DATA = 0xA334;\n// var MAT_SELFIMAP = 0xA33D;\n// var MAT_SXP_SELFI_DATA = 0xA328;\n// var MAT_SELFIMASK = 0xA34A;\n// var MAT_SXP_SELFIMASK_DATA = 0xA336;\n// var MAT_REFLMAP = 0xA220;\n// var MAT_REFLMASK = 0xA34C;\n// var MAT_SXP_REFLMASK_DATA = 0xA338;\n// var MAT_ACUBIC = 0xA310;\n\nvar MAT_MAPNAME = 0xa300; // var MAT_MAP_TILING = 0xA351;\n// var MAT_MAP_TEXBLUR = 0xA353;\n\nvar MAT_MAP_USCALE = 0xa354;\nvar MAT_MAP_VSCALE = 0xa356;\nvar MAT_MAP_UOFFSET = 0xa358;\nvar MAT_MAP_VOFFSET = 0xa35a; // var MAT_MAP_ANG = 0xA35C;\n// var MAT_MAP_COL1 = 0xA360;\n// var MAT_MAP_COL2 = 0xA362;\n// var MAT_MAP_RCOL = 0xA364;\n// var MAT_MAP_GCOL = 0xA366;\n// var MAT_MAP_BCOL = 0xA368;\n\nvar NAMED_OBJECT = 0x4000; // var N_DIRECT_LIGHT = 0x4600;\n// var DL_OFF = 0x4620;\n// var DL_OUTER_RANGE = 0x465A;\n// var DL_INNER_RANGE = 0x4659;\n// var DL_MULTIPLIER = 0x465B;\n// var DL_EXCLUDE = 0x4654;\n// var DL_ATTENUATE = 0x4625;\n// var DL_SPOTLIGHT = 0x4610;\n// var DL_SPOT_ROLL = 0x4656;\n// var DL_SHADOWED = 0x4630;\n// var DL_LOCAL_SHADOW2 = 0x4641;\n// var DL_SEE_CONE = 0x4650;\n// var DL_SPOT_RECTANGULAR = 0x4651;\n// var DL_SPOT_ASPECT = 0x4657;\n// var DL_SPOT_PROJECTOR = 0x4653;\n// var DL_SPOT_OVERSHOOT = 0x4652;\n// var DL_RAY_BIAS = 0x4658;\n// var DL_RAYSHAD = 0x4627;\n// var N_CAMERA = 0x4700;\n// var CAM_SEE_CONE = 0x4710;\n// var CAM_RANGES = 0x4720;\n// var OBJ_HIDDEN = 0x4010;\n// var OBJ_VIS_LOFTER = 0x4011;\n// var OBJ_DOESNT_CAST = 0x4012;\n// var OBJ_DONT_RECVSHADOW = 0x4017;\n// var OBJ_MATTE = 0x4013;\n// var OBJ_FAST = 0x4014;\n// var OBJ_PROCEDURAL = 0x4015;\n// var OBJ_FROZEN = 0x4016;\n\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110; // var POINT_FLAG_ARRAY = 0x4111;\n\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130; // var SMOOTH_GROUP = 0x4150;\n// var MSH_BOXMAP = 0x4190;\n\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160; // var MESH_COLOR = 0x4165;\n\nexport { TDSLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Group","MeshPhongMaterial","DoubleSide","AdditiveBlending","BufferGeometry","Mesh","Float32BufferAttribute","Matrix4","TextureLoader","Color","TDSLoader","manager","call","debug","group","position","materials","meshes","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","arraybuffer","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","MAT_ADDITIVE","blending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readPercentage","MAT_TRANSPARENCY","transparency","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","uvs","POINT_ARRAY","points","readWord","vertices","setAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","MESH_MATRIX","values","matrix","elements","transpose","inverse","copy","invert","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","materialIndex","start","end","subchunk","MSH_MAT_GROUP","readMaterialGroup","count","addGroup","Array","isArray","undefined","texture","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","INT_PERCENTAGE","FLOAT_PERCENTAGE","message","log"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/TDSLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\n\nvar TDSLoader = function (manager) {\n  Loader.call(this, manager);\n  this.debug = false;\n  this.group = null;\n  this.position = 0;\n  this.materials = [];\n  this.meshes = [];\n};\n\nTDSLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: TDSLoader,\n\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse: function (arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n\n    return this.group;\n  },\n\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile: function (arraybuffer, path) {\n    var data = new DataView(arraybuffer);\n    var chunk = this.readChunk(data);\n\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      var next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          var version = this.readDWord(data);\n          this.debugMessage('3DS file version: ' + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage('Unknown main chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n\n    this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n  },\n\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        var version = +this.readDWord(data);\n        this.debugMessage('Mesh Version: ' + version);\n      } else if (next === MASTER_SCALE) {\n        var scale = this.readFloat(data);\n        this.debugMessage('Master scale: ' + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage('Named Object');\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage('Material');\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n  },\n\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject: function (data) {\n    var chunk = this.readChunk(data);\n    var name = this.readString(data, 64);\n    chunk.cur = this.position;\n    var next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        var mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n  },\n\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var material = new MeshPhongMaterial();\n\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage('   Name: ' + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage('   Wireframe');\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        var value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage('   Wireframe Thickness: ' + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage('   DoubleSided');\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage('   Additive Blending');\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage('   Diffuse Color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage('   Specular Color');\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage('   Ambient color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        var shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage('   Shininess : ' + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        var transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage('  Transparency : ' + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage('   ColorMap');\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage('   BumpMap');\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage('   OpacityMap');\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage('   SpecularMap');\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  },\n\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh: function (data) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var geometry = new BufferGeometry();\n    var uvs = [];\n    var material = new MeshPhongMaterial();\n    var mesh = new Mesh(geometry, material);\n    mesh.name = 'mesh';\n\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        var points = this.readWord(data);\n        this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n        var vertices = [];\n\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        var texels = this.readWord(data);\n        this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n        var uvs = [];\n\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage('   Tranformation Matrix (TODO)');\n        var values = [];\n\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n\n        var matrix = new Matrix4(); //X Line\n\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9]; //Y Line\n\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11]; //Z Line\n\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10]; //W Line\n\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        var inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  },\n\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray: function (data, mesh) {\n    var chunk = this.readChunk(data);\n    var faces = this.readWord(data);\n    this.debugMessage('   Faces: ' + faces);\n    var index = [];\n\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data); // visibility\n    }\n\n    mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n    var materialIndex = 0;\n    var start = 0;\n\n    while (this.position < chunk.end) {\n      var subchunk = this.readChunk(data);\n\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage('      Material Group');\n        this.resetPosition(data);\n        var group = this.readMaterialGroup(data);\n        var count = group.index.length * 3; // assuming successive indices\n\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        var material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n\n        if (material !== undefined) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n      }\n\n      this.endChunk(subchunk);\n    }\n\n    if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n    this.endChunk(chunk);\n  },\n\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var texture = {};\n    var loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        var name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage('      File: ' + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage('      OffsetX: ' + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage('      OffsetY: ' + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage('      RepeatX: ' + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage('      RepeatY: ' + texture.repeat.y);\n      } else {\n        this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    return texture;\n  },\n\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup: function (data) {\n    this.readChunk(data);\n    var name = this.readString(data, 64);\n    var numFaces = this.readWord(data);\n    this.debugMessage('         Name: ' + name);\n    this.debugMessage('         Faces: ' + numFaces);\n    var index = [];\n\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n\n    return {\n      name: name,\n      index: index\n    };\n  },\n\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor: function (data) {\n    var chunk = this.readChunk(data);\n    var color = new Color();\n\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      var r = this.readByte(data);\n      var g = this.readByte(data);\n      var b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      var r = this.readFloat(data);\n      var g = this.readFloat(data);\n      var b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else {\n      this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return color;\n  },\n\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk: function (data) {\n    var chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  },\n\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk: function (chunk) {\n    this.position = chunk.end;\n  },\n\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk: function (data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n\n    this.position = chunk.cur;\n\n    try {\n      var next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  },\n\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition: function () {\n    this.position -= 6;\n  },\n\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte: function (data) {\n    var v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  },\n\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat: function (data) {\n    try {\n      var v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n    }\n  },\n\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt: function (data) {\n    var v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort: function (data) {\n    var v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord: function (data) {\n    var v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord: function (data) {\n    var v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString: function (data, maxLength) {\n    var s = '';\n\n    for (let i = 0; i < maxLength; i++) {\n      var c = this.readByte(data);\n\n      if (!c) {\n        break;\n      }\n\n      s += String.fromCharCode(c);\n    }\n\n    return s;\n  },\n\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readPercentage: function (data) {\n    var chunk = this.readChunk(data);\n    var value;\n\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n\n      default:\n        this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return value;\n  },\n\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage: function (message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}); // var NULL_CHUNK = 0x0000;\n\nvar M3DMAGIC = 0x4d4d; // var SMAGIC = 0x2D2D;\n// var LMAGIC = 0x2D3D;\n\nvar MLIBMAGIC = 0x3daa; // var MATMAGIC = 0x3DFF;\n\nvar CMAGIC = 0xc23d;\nvar M3D_VERSION = 0x0002; // var M3D_KFVERSION = 0x0005;\n\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\nvar INT_PERCENTAGE = 0x0030;\nvar FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3d3d;\nvar MESH_VERSION = 0x3d3e;\nvar MASTER_SCALE = 0x0100; // var LO_SHADOW_BIAS = 0x1400;\n// var HI_SHADOW_BIAS = 0x1410;\n// var SHADOW_MAP_SIZE = 0x1420;\n// var SHADOW_SAMPLES = 0x1430;\n// var SHADOW_RANGE = 0x1440;\n// var SHADOW_FILTER = 0x1450;\n// var RAY_BIAS = 0x1460;\n// var O_CONSTS = 0x1500;\n// var AMBIENT_LIGHT = 0x2100;\n// var BIT_MAP = 0x1100;\n// var SOLID_BGND = 0x1200;\n// var V_GRADIENT = 0x1300;\n// var USE_BIT_MAP = 0x1101;\n// var USE_SOLID_BGND = 0x1201;\n// var USE_V_GRADIENT = 0x1301;\n// var FOG = 0x2200;\n// var FOG_BGND = 0x2210;\n// var LAYER_FOG = 0x2302;\n// var DISTANCE_CUE = 0x2300;\n// var DCUE_BGND = 0x2310;\n// var USE_FOG = 0x2201;\n// var USE_LAYER_FOG = 0x2303;\n// var USE_DISTANCE_CUE = 0x2301;\n\nvar MAT_ENTRY = 0xafff;\nvar MAT_NAME = 0xa000;\nvar MAT_AMBIENT = 0xa010;\nvar MAT_DIFFUSE = 0xa020;\nvar MAT_SPECULAR = 0xa030;\nvar MAT_SHININESS = 0xa040; // var MAT_SHIN2PCT = 0xA041;\n\nvar MAT_TRANSPARENCY = 0xa050; // var MAT_XPFALL = 0xA052;\n// var MAT_USE_XPFALL = 0xA240;\n// var MAT_REFBLUR = 0xA053;\n// var MAT_SHADING = 0xA100;\n// var MAT_USE_REFBLUR = 0xA250;\n// var MAT_SELF_ILLUM = 0xA084;\n\nvar MAT_TWO_SIDE = 0xa081; // var MAT_DECAL = 0xA082;\n\nvar MAT_ADDITIVE = 0xa083;\nvar MAT_WIRE = 0xa085; // var MAT_FACEMAP = 0xA088;\n// var MAT_TRANSFALLOFF_IN = 0xA08A;\n// var MAT_PHONGSOFT = 0xA08C;\n// var MAT_WIREABS = 0xA08E;\n\nvar MAT_WIRE_SIZE = 0xa087;\nvar MAT_TEXMAP = 0xa200; // var MAT_SXP_TEXT_DATA = 0xA320;\n// var MAT_TEXMASK = 0xA33E;\n// var MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// var MAT_TEX2MAP = 0xA33A;\n// var MAT_SXP_TEXT2_DATA = 0xA321;\n// var MAT_TEX2MASK = 0xA340;\n// var MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nvar MAT_OPACMAP = 0xa210; // var MAT_SXP_OPAC_DATA = 0xA322;\n// var MAT_OPACMASK = 0xA342;\n// var MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nvar MAT_BUMPMAP = 0xa230; // var MAT_SXP_BUMP_DATA = 0xA324;\n// var MAT_BUMPMASK = 0xA344;\n// var MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nvar MAT_SPECMAP = 0xa204; // var MAT_SXP_SPEC_DATA = 0xA325;\n// var MAT_SPECMASK = 0xA348;\n// var MAT_SXP_SPECMASK_DATA = 0xA332;\n// var MAT_SHINMAP = 0xA33C;\n// var MAT_SXP_SHIN_DATA = 0xA326;\n// var MAT_SHINMASK = 0xA346;\n// var MAT_SXP_SHINMASK_DATA = 0xA334;\n// var MAT_SELFIMAP = 0xA33D;\n// var MAT_SXP_SELFI_DATA = 0xA328;\n// var MAT_SELFIMASK = 0xA34A;\n// var MAT_SXP_SELFIMASK_DATA = 0xA336;\n// var MAT_REFLMAP = 0xA220;\n// var MAT_REFLMASK = 0xA34C;\n// var MAT_SXP_REFLMASK_DATA = 0xA338;\n// var MAT_ACUBIC = 0xA310;\n\nvar MAT_MAPNAME = 0xa300; // var MAT_MAP_TILING = 0xA351;\n// var MAT_MAP_TEXBLUR = 0xA353;\n\nvar MAT_MAP_USCALE = 0xa354;\nvar MAT_MAP_VSCALE = 0xa356;\nvar MAT_MAP_UOFFSET = 0xa358;\nvar MAT_MAP_VOFFSET = 0xa35a; // var MAT_MAP_ANG = 0xA35C;\n// var MAT_MAP_COL1 = 0xA360;\n// var MAT_MAP_COL2 = 0xA362;\n// var MAT_MAP_RCOL = 0xA364;\n// var MAT_MAP_GCOL = 0xA366;\n// var MAT_MAP_BCOL = 0xA368;\n\nvar NAMED_OBJECT = 0x4000; // var N_DIRECT_LIGHT = 0x4600;\n// var DL_OFF = 0x4620;\n// var DL_OUTER_RANGE = 0x465A;\n// var DL_INNER_RANGE = 0x4659;\n// var DL_MULTIPLIER = 0x465B;\n// var DL_EXCLUDE = 0x4654;\n// var DL_ATTENUATE = 0x4625;\n// var DL_SPOTLIGHT = 0x4610;\n// var DL_SPOT_ROLL = 0x4656;\n// var DL_SHADOWED = 0x4630;\n// var DL_LOCAL_SHADOW2 = 0x4641;\n// var DL_SEE_CONE = 0x4650;\n// var DL_SPOT_RECTANGULAR = 0x4651;\n// var DL_SPOT_ASPECT = 0x4657;\n// var DL_SPOT_PROJECTOR = 0x4653;\n// var DL_SPOT_OVERSHOOT = 0x4652;\n// var DL_RAY_BIAS = 0x4658;\n// var DL_RAYSHAD = 0x4627;\n// var N_CAMERA = 0x4700;\n// var CAM_SEE_CONE = 0x4710;\n// var CAM_RANGES = 0x4720;\n// var OBJ_HIDDEN = 0x4010;\n// var OBJ_VIS_LOFTER = 0x4011;\n// var OBJ_DOESNT_CAST = 0x4012;\n// var OBJ_DONT_RECVSHADOW = 0x4017;\n// var OBJ_MATTE = 0x4013;\n// var OBJ_FAST = 0x4014;\n// var OBJ_PROCEDURAL = 0x4015;\n// var OBJ_FROZEN = 0x4016;\n\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110; // var POINT_FLAG_ARRAY = 0x4111;\n\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130; // var SMOOTH_GROUP = 0x4150;\n// var MSH_BOXMAP = 0x4190;\n\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160; // var MESH_COLOR = 0x4165;\n\nexport { TDSLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}