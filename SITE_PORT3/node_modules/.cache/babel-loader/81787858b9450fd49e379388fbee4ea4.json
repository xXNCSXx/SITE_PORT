{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Mesh, Vector3, InstancedInterleavedBuffer, InterleavedBufferAttribute, Vector4, Matrix4, Line3, MathUtils } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\nclass LineSegments2 extends Mesh {\n  constructor(_geometry = new LineSegmentsGeometry(), _material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(_geometry, _material);\n    _defineProperty(this, \"type\", 'LineSegments2');\n    _defineProperty(this, \"isLineSegments2\", true);\n    _defineProperty(this, \"distStart\", new Vector3());\n    _defineProperty(this, \"distEnd\", new Vector3());\n    _defineProperty(this, \"computeLineDistances\", () => {\n      const geometry = this.geometry;\n      const instanceStart = geometry.attributes.instanceStart;\n      const instanceEnd = geometry.attributes.instanceEnd;\n      const lineDistances = new Float32Array(2 * instanceStart.data.count);\n      for (let i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        this.distStart.fromBufferAttribute(instanceStart, i);\n        this.distEnd.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + this.distStart.distanceTo(this.distEnd);\n      }\n      const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    });\n    _defineProperty(this, \"rayStart\", new Vector4());\n    _defineProperty(this, \"rayEnd\", new Vector4());\n    _defineProperty(this, \"ssOrigin\", new Vector4());\n    _defineProperty(this, \"ssOrigin3\", new Vector3());\n    _defineProperty(this, \"mvMatrix\", new Matrix4());\n    _defineProperty(this, \"line\", new Line3());\n    _defineProperty(this, \"closestPoint\", new Vector3());\n    _defineProperty(this, \"raycast\", (raycaster, intersects) => {\n      if (raycaster.camera === null) {\n        console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n      }\n      const threshold = 0;\n      const ray = raycaster.ray;\n      const camera = raycaster.camera;\n      const projectionMatrix = camera.projectionMatrix;\n      const geometry = this.geometry;\n      const material = this.material;\n      const resolution = material.resolution;\n      const lineWidth = material.linewidth + threshold;\n      const instanceStart = geometry.attributes.instanceStart;\n      const instanceEnd = geometry.attributes.instanceEnd; // camera forward is negative\n\n      const near = -camera.near; // pick a point 1 unit out along the ray to avoid the ray origin\n      // sitting at the camera origin which will cause \"w\" to be 0 when\n      // applying the projection matrix.\n\n      ray.at(1, new Vector3(this.ssOrigin.x, this.ssOrigin.y, this.ssOrigin.z)); // ndc space [ - 1.0, 1.0 ]\n\n      this.ssOrigin.w = 1;\n      this.ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n      this.ssOrigin.applyMatrix4(projectionMatrix);\n      this.ssOrigin.multiplyScalar(1 / this.ssOrigin.w); // screen space\n\n      this.ssOrigin.x *= resolution.x / 2;\n      this.ssOrigin.y *= resolution.y / 2;\n      this.ssOrigin.z = 0;\n      this.ssOrigin3.set(this.ssOrigin.x, this.ssOrigin.y, this.ssOrigin.z);\n      const matrixWorld = this.matrixWorld;\n      this.mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n      for (let i = 0, l = instanceStart.count; i < l; i++) {\n        this.rayStart.fromBufferAttribute(instanceStart, i);\n        this.rayEnd.fromBufferAttribute(instanceEnd, i);\n        this.rayStart.w = 1;\n        this.rayEnd.w = 1; // camera space\n\n        this.rayStart.applyMatrix4(this.mvMatrix);\n        this.rayEnd.applyMatrix4(this.mvMatrix); // skip the segment if it's entirely behind the camera\n\n        const isBehindCameraNear = this.rayStart.z > near && this.rayEnd.z > near;\n        if (isBehindCameraNear) {\n          continue;\n        } // trim the segment if it extends behind camera near\n\n        if (this.rayStart.z > near) {\n          const deltaDist = this.rayStart.z - this.rayEnd.z;\n          const t = (this.rayStart.z - near) / deltaDist;\n          this.rayStart.lerp(this.rayEnd, t);\n        } else if (this.rayEnd.z > near) {\n          const deltaDist = this.rayEnd.z - this.rayStart.z;\n          const t = (this.rayEnd.z - near) / deltaDist;\n          this.rayEnd.lerp(this.rayStart, t);\n        } // clip space\n\n        this.rayStart.applyMatrix4(projectionMatrix);\n        this.rayEnd.applyMatrix4(projectionMatrix); // ndc space [ - 1.0, 1.0 ]\n\n        this.rayStart.multiplyScalar(1 / this.rayStart.w);\n        this.rayEnd.multiplyScalar(1 / this.rayEnd.w); // screen space\n\n        this.rayStart.x *= resolution.x / 2;\n        this.rayStart.y *= resolution.y / 2;\n        this.rayEnd.x *= resolution.x / 2;\n        this.rayEnd.y *= resolution.y / 2; // create 2d segment\n\n        this.line.start.set(this.rayStart.x, this.rayStart.y, this.rayStart.z);\n        this.line.start.z = 0;\n        this.line.end.set(this.rayEnd.x, this.rayEnd.y, this.rayEnd.z);\n        this.line.end.z = 0; // get closest point on ray to segment\n\n        const param = this.line.closestPointToPointParameter(this.ssOrigin3, true);\n        this.line.at(param, this.closestPoint); // check if the intersection point is within clip space\n\n        const zPos = MathUtils.lerp(this.rayStart.z, this.rayEnd.z, param);\n        const isInClipSpace = zPos >= -1 && zPos <= 1;\n        const isInside = this.ssOrigin3.distanceTo(this.closestPoint) < lineWidth * 0.5;\n        if (isInClipSpace && isInside) {\n          this.line.start.fromBufferAttribute(instanceStart, i);\n          this.line.end.fromBufferAttribute(instanceEnd, i);\n          this.line.start.applyMatrix4(matrixWorld);\n          this.line.end.applyMatrix4(matrixWorld);\n          const pointOnLine = new Vector3();\n          const point = new Vector3();\n          ray.distanceSqToSegment(this.line.start, this.line.end, point, pointOnLine);\n          intersects.push({\n            distance: ray.origin.distanceTo(point),\n            point: point,\n            face: null,\n            faceIndex: i,\n            object: this,\n            uv: undefined,\n            pointOnLine\n          });\n        }\n      }\n    });\n  }\n}\nexport { LineSegments2 };","map":{"version":3,"names":["_defineProperty","Mesh","Vector3","InstancedInterleavedBuffer","InterleavedBufferAttribute","Vector4","Matrix4","Line3","MathUtils","LineSegmentsGeometry","LineMaterial","LineSegments2","constructor","_geometry","_material","color","Math","random","geometry","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","data","count","i","j","l","distStart","fromBufferAttribute","distEnd","distanceTo","instanceDistanceBuffer","setAttribute","raycaster","intersects","camera","console","error","threshold","ray","projectionMatrix","material","resolution","lineWidth","linewidth","near","at","ssOrigin","x","y","z","w","applyMatrix4","matrixWorldInverse","multiplyScalar","ssOrigin3","set","matrixWorld","mvMatrix","multiplyMatrices","rayStart","rayEnd","isBehindCameraNear","deltaDist","t","lerp","line","start","end","param","closestPointToPointParameter","closestPoint","zPos","isInClipSpace","isInside","pointOnLine","point","distanceSqToSegment","push","distance","origin","face","faceIndex","object","uv","undefined"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/lines/LineSegments2.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Mesh, Vector3, InstancedInterleavedBuffer, InterleavedBufferAttribute, Vector4, Matrix4, Line3, MathUtils } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nclass LineSegments2 extends Mesh {\n  constructor(_geometry = new LineSegmentsGeometry(), _material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(_geometry, _material);\n\n    _defineProperty(this, \"type\", 'LineSegments2');\n\n    _defineProperty(this, \"isLineSegments2\", true);\n\n    _defineProperty(this, \"distStart\", new Vector3());\n\n    _defineProperty(this, \"distEnd\", new Vector3());\n\n    _defineProperty(this, \"computeLineDistances\", () => {\n      const geometry = this.geometry;\n      const instanceStart = geometry.attributes.instanceStart;\n      const instanceEnd = geometry.attributes.instanceEnd;\n      const lineDistances = new Float32Array(2 * instanceStart.data.count);\n\n      for (let i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        this.distStart.fromBufferAttribute(instanceStart, i);\n        this.distEnd.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + this.distStart.distanceTo(this.distEnd);\n      }\n\n      const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    });\n\n    _defineProperty(this, \"rayStart\", new Vector4());\n\n    _defineProperty(this, \"rayEnd\", new Vector4());\n\n    _defineProperty(this, \"ssOrigin\", new Vector4());\n\n    _defineProperty(this, \"ssOrigin3\", new Vector3());\n\n    _defineProperty(this, \"mvMatrix\", new Matrix4());\n\n    _defineProperty(this, \"line\", new Line3());\n\n    _defineProperty(this, \"closestPoint\", new Vector3());\n\n    _defineProperty(this, \"raycast\", (raycaster, intersects) => {\n      if (raycaster.camera === null) {\n        console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n      }\n\n      const threshold = 0;\n      const ray = raycaster.ray;\n      const camera = raycaster.camera;\n      const projectionMatrix = camera.projectionMatrix;\n      const geometry = this.geometry;\n      const material = this.material;\n      const resolution = material.resolution;\n      const lineWidth = material.linewidth + threshold;\n      const instanceStart = geometry.attributes.instanceStart;\n      const instanceEnd = geometry.attributes.instanceEnd; // camera forward is negative\n\n      const near = -camera.near; // pick a point 1 unit out along the ray to avoid the ray origin\n      // sitting at the camera origin which will cause \"w\" to be 0 when\n      // applying the projection matrix.\n\n      ray.at(1, new Vector3(this.ssOrigin.x, this.ssOrigin.y, this.ssOrigin.z)); // ndc space [ - 1.0, 1.0 ]\n\n      this.ssOrigin.w = 1;\n      this.ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n      this.ssOrigin.applyMatrix4(projectionMatrix);\n      this.ssOrigin.multiplyScalar(1 / this.ssOrigin.w); // screen space\n\n      this.ssOrigin.x *= resolution.x / 2;\n      this.ssOrigin.y *= resolution.y / 2;\n      this.ssOrigin.z = 0;\n      this.ssOrigin3.set(this.ssOrigin.x, this.ssOrigin.y, this.ssOrigin.z);\n      const matrixWorld = this.matrixWorld;\n      this.mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n\n      for (let i = 0, l = instanceStart.count; i < l; i++) {\n        this.rayStart.fromBufferAttribute(instanceStart, i);\n        this.rayEnd.fromBufferAttribute(instanceEnd, i);\n        this.rayStart.w = 1;\n        this.rayEnd.w = 1; // camera space\n\n        this.rayStart.applyMatrix4(this.mvMatrix);\n        this.rayEnd.applyMatrix4(this.mvMatrix); // skip the segment if it's entirely behind the camera\n\n        const isBehindCameraNear = this.rayStart.z > near && this.rayEnd.z > near;\n\n        if (isBehindCameraNear) {\n          continue;\n        } // trim the segment if it extends behind camera near\n\n\n        if (this.rayStart.z > near) {\n          const deltaDist = this.rayStart.z - this.rayEnd.z;\n          const t = (this.rayStart.z - near) / deltaDist;\n          this.rayStart.lerp(this.rayEnd, t);\n        } else if (this.rayEnd.z > near) {\n          const deltaDist = this.rayEnd.z - this.rayStart.z;\n          const t = (this.rayEnd.z - near) / deltaDist;\n          this.rayEnd.lerp(this.rayStart, t);\n        } // clip space\n\n\n        this.rayStart.applyMatrix4(projectionMatrix);\n        this.rayEnd.applyMatrix4(projectionMatrix); // ndc space [ - 1.0, 1.0 ]\n\n        this.rayStart.multiplyScalar(1 / this.rayStart.w);\n        this.rayEnd.multiplyScalar(1 / this.rayEnd.w); // screen space\n\n        this.rayStart.x *= resolution.x / 2;\n        this.rayStart.y *= resolution.y / 2;\n        this.rayEnd.x *= resolution.x / 2;\n        this.rayEnd.y *= resolution.y / 2; // create 2d segment\n\n        this.line.start.set(this.rayStart.x, this.rayStart.y, this.rayStart.z);\n        this.line.start.z = 0;\n        this.line.end.set(this.rayEnd.x, this.rayEnd.y, this.rayEnd.z);\n        this.line.end.z = 0; // get closest point on ray to segment\n\n        const param = this.line.closestPointToPointParameter(this.ssOrigin3, true);\n        this.line.at(param, this.closestPoint); // check if the intersection point is within clip space\n\n        const zPos = MathUtils.lerp(this.rayStart.z, this.rayEnd.z, param);\n        const isInClipSpace = zPos >= -1 && zPos <= 1;\n        const isInside = this.ssOrigin3.distanceTo(this.closestPoint) < lineWidth * 0.5;\n\n        if (isInClipSpace && isInside) {\n          this.line.start.fromBufferAttribute(instanceStart, i);\n          this.line.end.fromBufferAttribute(instanceEnd, i);\n          this.line.start.applyMatrix4(matrixWorld);\n          this.line.end.applyMatrix4(matrixWorld);\n          const pointOnLine = new Vector3();\n          const point = new Vector3();\n          ray.distanceSqToSegment(this.line.start, this.line.end, point, pointOnLine);\n          intersects.push({\n            distance: ray.origin.distanceTo(point),\n            point: point,\n            face: null,\n            faceIndex: i,\n            object: this,\n            uv: undefined,\n            pointOnLine\n          });\n        }\n      }\n    });\n  }\n\n}\n\nexport { LineSegments2 };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}