{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { VERSION, BaseRegExpVisitor } from \"regexp-to-ast\";\nimport { forEach, contains, PRINT_ERROR, PRINT_WARNING, find, isArray, every, values } from \"../utils/utils\";\nimport { getRegExpAst } from \"./reg_exp_parser\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer\";\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexport var failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nexport function getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n  if (ensureOptimizations === void 0) {\n    ensureOptimizations = false;\n  }\n  try {\n    var ast = getRegExpAst(regExp);\n    var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\"\" + failedOptimizationPrefixMsg + (\"\\tUnable to optimize: < \" + regExp.toString() + \" >\\n\") + \"\\tComplement Sets cannot be automatically optimized.\\n\" + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n      }\n    } else {\n      var msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix = \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(failedOptimizationPrefixMsg + \"\\n\" + (\"\\tFailed parsing: < \" + regExp.toString() + \" >\\n\") + (\"\\tUsing the regexp-to-ast library version: \" + VERSION + \"\\n\") + \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" + msgSuffix);\n    }\n  }\n  return [];\n}\nexport function firstCharOptimizedIndices(ast, result, ignoreCase) {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (var i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      var terms = ast.value;\n      for (var i = 0; i < terms.length; i++) {\n        var term = terms[i];\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n        var atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, function (code) {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                var range = code;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < minOptimizationVal; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    var minUnOptVal = range.from >= minOptimizationVal ? range.from : minOptimizationVal;\n                    var maxUnOptVal = range.to;\n                    var minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    var maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n                    for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n        // A group may be optional due to empty contents /(?:)/\n        // or if everything inside it is optional /((a)?)/\n        atom.type === \"Group\" && isWholeOptional(atom) === false ||\n        // If this term is not a group it may only be optional if it has an optional quantifier\n        atom.type !== \"Group\" && isOptionalQuantifier === false) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n  var optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\nfunction handleIgnoreCase(code, result) {\n  var char = String.fromCharCode(code);\n  var upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    var optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    var lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      var optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0));\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\nfunction findCode(setNode, targetCharCodes) {\n  return find(setNode.value, function (codeOrRange) {\n    if (typeof codeOrRange === \"number\") {\n      return contains(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      var range_1 = codeOrRange;\n      return find(targetCharCodes, function (targetCode) {\n        return range_1.from <= targetCode && targetCode <= range_1.to;\n      }) !== undefined;\n    }\n  });\n}\nfunction isWholeOptional(ast) {\n  if (ast.quantifier && ast.quantifier.atLeast === 0) {\n    return true;\n  }\n  if (!ast.value) {\n    return false;\n  }\n  return isArray(ast.value) ? every(ast.value, isWholeOptional) : isWholeOptional(ast.value);\n}\nvar CharCodeFinder = /** @class */function (_super) {\n  __extends(CharCodeFinder, _super);\n  function CharCodeFinder(targetCharCodes) {\n    var _this = _super.call(this) || this;\n    _this.targetCharCodes = targetCharCodes;\n    _this.found = false;\n    return _this;\n  }\n  CharCodeFinder.prototype.visitChildren = function (node) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n    _super.prototype.visitChildren.call(this, node);\n  };\n  CharCodeFinder.prototype.visitCharacter = function (node) {\n    if (contains(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  };\n  CharCodeFinder.prototype.visitSet = function (node) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  };\n  return CharCodeFinder;\n}(BaseRegExpVisitor);\nexport function canMatchCharCode(charCodes, pattern) {\n  if (pattern instanceof RegExp) {\n    var ast = getRegExpAst(pattern);\n    var charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return find(pattern, function (char) {\n      return contains(charCodes, char.charCodeAt(0));\n    }) !== undefined;\n  }\n}","map":{"version":3,"sources":["../../../src/scan/reg_exp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAAS,OAAO,EAAE,iBAAiB,QAAQ,eAAe;AAC1D,SAGE,OAAO,EACP,QAAQ,EACR,WAAW,EACX,aAAa,EACb,IAAI,EACJ,OAAO,EACP,KAAK,EACL,MAAM,QACD,gBAAgB;AACvB,SAAS,YAAY,QAAQ,kBAAkB;AAC/C,SAAS,wBAAwB,EAAE,kBAAkB,QAAQ,SAAS;AAEtE,IAAM,sBAAsB,GAC1B,+DAA+D;AACjE,OAAO,IAAM,2BAA2B,GACtC,mDAAmD;AAErD,OAAM,SAAU,6BAA6B,CAC3C,MAAc,EACd,mBAA2B,EAAA;EAA3B,IAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,mBAAA,GAAA,KAA2B;EAAA;EAE3B,IAAI;IACF,IAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC;IAChC,IAAM,UAAU,GAAG,yBAAyB,CAC1C,GAAG,CAAC,KAAK,EACT,CAAA,CAAE,EACF,GAAG,CAAC,KAAK,CAAC,UAAU,CACrB;IACD,OAAO,UAAU;GAClB,CAAC,OAAO,CAAC,EAAE;IACV;IACA;IACA;IACA,IAAI,CAAC,CAAC,OAAO,KAAK,sBAAsB,EAAE;MACxC,IAAI,mBAAmB,EAAE;QACvB,aAAa,CACX,EAAA,GAAG,2BAA6B,IAC9B,0BAAA,GAA2B,MAAM,CAAC,QAAQ,CAAA,CAAE,GAAA,MAAM,CAAA,GAClD,wDAAwD,GACxD,6DAA6D,GAC7D,6FAA6F,CAChG;MACF;KACF,MAAM;MACL,IAAI,SAAS,GAAG,EAAE;MAClB,IAAI,mBAAmB,EAAE;QACvB,SAAS,GACP,+DAA+D,GAC/D,iGAAiG;MACpG;MACD,WAAW,CACN,2BAA2B,GAAA,IAAI,IAChC,sBAAA,GAAuB,MAAM,CAAC,QAAQ,CAAA,CAAE,GAAA,MAAM,CAAA,IAC9C,6CAAA,GAA8C,OAAO,GAAA,IAAI,CAAA,GACzD,yEAAyE,GACzE,SAAS,CACZ;IACF;EACF;EAED,OAAO,EAAE;AACX;AAEA,OAAM,SAAU,yBAAyB,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,EAAA;EAC/D,QAAQ,GAAG,CAAC,IAAI;IACd,KAAK,aAAa;MAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACzC,yBAAyB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC;MAC5D;MACD;IACF,KAAK,aAAa;MAChB,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK;MACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;QAErB;QACA,QAAQ,IAAI,CAAC,IAAI;UACf,KAAK,WAAW;UAChB;UACA;UACA;UACA,KAAK,oBAAoB;UACzB;UACA,KAAK,WAAW;UAChB,KAAK,mBAAmB;UACxB,KAAK,aAAa;UAClB,KAAK,cAAc;UACnB,KAAK,iBAAiB;YACpB;QACH;QAED,IAAM,IAAI,GAAG,IAAI;QACjB,QAAQ,IAAI,CAAC,IAAI;UACf,KAAK,WAAW;YACd,uBAAuB,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,UAAU,CAAC;YACvD;UACF,KAAK,KAAK;YACR,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;cAC5B,MAAM,KAAK,CAAC,sBAAsB,CAAC;YACpC;YACD,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,IAAI,EAAA;cACvB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC5B,uBAAuB,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC;eAClD,MAAM;gBACL;gBACA,IAAM,KAAK,GAAG,IAAI;gBAClB;gBACA,IAAI,UAAU,KAAK,IAAI,EAAE;kBACvB,KACE,IAAI,SAAS,GAAG,KAAK,CAAC,IAAI,EAC1B,SAAS,IAAI,KAAK,CAAC,EAAE,EACrB,SAAS,EAAE,EACX;oBACA,uBAAuB,CAAC,SAAS,EAAE,MAAM,EAAE,UAAU,CAAC;kBACvD;gBACF;gBACD;gBAAA,KACK;kBACH;kBACA,KACE,IAAI,SAAS,GAAG,KAAK,CAAC,IAAI,EAC1B,SAAS,IAAI,KAAK,CAAC,EAAE,IAAI,SAAS,GAAG,kBAAkB,EACvD,SAAS,EAAE,EACX;oBACA,uBAAuB,CAAC,SAAS,EAAE,MAAM,EAAE,UAAU,CAAC;kBACvD;kBAED;kBACA,IAAI,KAAK,CAAC,EAAE,IAAI,kBAAkB,EAAE;oBAClC,IAAM,WAAW,GACf,KAAK,CAAC,IAAI,IAAI,kBAAkB,GAC5B,KAAK,CAAC,IAAI,GACV,kBAAkB;oBACxB,IAAM,WAAW,GAAG,KAAK,CAAC,EAAE;oBAC5B,IAAM,SAAS,GAAG,wBAAwB,CAAC,WAAW,CAAC;oBACvD,IAAM,SAAS,GAAG,wBAAwB,CAAC,WAAW,CAAC;oBAEvD,KACE,IAAI,UAAU,GAAG,SAAS,EAC1B,UAAU,IAAI,SAAS,EACvB,UAAU,EAAE,EACZ;sBACA,MAAM,CAAC,UAAU,CAAC,GAAG,UAAU;oBAChC;kBACF;gBACF;cACF;YACH,CAAC,CAAC;YACF;UACF,KAAK,OAAO;YACV,yBAAyB,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,UAAU,CAAC;YACzD;UACF;UACA;YACE,MAAM,KAAK,CAAC,sBAAsB,CAAC;QACtC;QAED;QACA,IAAM,oBAAoB,GACxB,IAAI,CAAC,UAAU,KAAK,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,KAAK,CAAC;QAChE;QACE;QACA;QACC,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,KAAK;QACzD;QACC,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,oBAAoB,KAAK,KAAM,EACzD;UACA;QACD;MACF;MACD;IACF;IACA;MACE,MAAM,KAAK,CAAC,uBAAuB,CAAC;EACvC;EAED;EACA,OAAO,MAAM,CAAC,MAAM,CAAC;AACvB;AAEA,SAAS,uBAAuB,CAC9B,IAAY,EACZ,MAAgB,EAChB,UAAmB,EAAA;EAEnB,IAAM,gBAAgB,GAAG,wBAAwB,CAAC,IAAI,CAAC;EACvD,MAAM,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;EAE3C,IAAI,UAAU,KAAK,IAAI,EAAE;IACvB,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC;EAC/B;AACH;AAEA,SAAS,gBAAgB,CAAC,IAAY,EAAE,MAAgB,EAAA;EACtD,IAAM,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC;EACtC,IAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAA,CAAE;EACpC;EACA,IAAI,SAAS,KAAK,IAAI,EAAE;IACtB,IAAM,gBAAgB,GAAG,wBAAwB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1E,MAAM,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;GAC5C,MAAM;IACL,IAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAA,CAAE;IACpC,IAAI,SAAS,KAAK,IAAI,EAAE;MACtB,IAAM,gBAAgB,GAAG,wBAAwB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;MAC1E,MAAM,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;IAC5C;EACF;AACH;AAEA,SAAS,QAAQ,CAAC,OAAO,EAAE,eAAe,EAAA;EACxC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,UAAC,WAAW,EAAA;IACrC,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;MACnC,OAAO,QAAQ,CAAC,eAAe,EAAE,WAAW,CAAC;KAC9C,MAAM;MACL;MACA,IAAM,OAAK,GAAQ,WAAW;MAC9B,OACE,IAAI,CACF,eAAe,EACf,UAAC,UAAU,EAAA;QAAK,OAAA,OAAK,CAAC,IAAI,IAAI,UAAU,IAAI,UAAU,IAAI,OAAK,CAAC,EAAE;MAAlD,CAAkD,CACnE,KAAK,SAAS;IAElB;EACH,CAAC,CAAC;AACJ;AAEA,SAAS,eAAe,CAAC,GAAG,EAAA;EAC1B,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,KAAK,CAAC,EAAE;IAClD,OAAO,IAAI;EACZ;EAED,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;IACd,OAAO,KAAK;EACb;EAED,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GACrB,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,eAAe,CAAC,GACjC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC;AAChC;AAEA,IAAA,cAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA6B,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAG3B,SAAA,cAAA,CAAoB,eAAyB,EAAA;IAA7C,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IADW,KAAA,CAAA,eAAe,GAAf,eAAe;IAFnC,KAAA,CAAA,KAAK,GAAY,KAAK;;EAItB;EAEA,cAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,IAAI,EAAA;IAChB;IACA,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;MACvB;IACD;IAED;IACA;IACA,QAAQ,IAAI,CAAC,IAAI;MACf,KAAK,WAAW;QACd,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;QACzB;MACF,KAAK,mBAAmB;QACtB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC;QACjC;IACH;IAED,MAAA,CAAA,SAAA,CAAM,aAAa,CAAA,IAAA,CAAA,IAAA,EAAC,IAAI,CAAC;EAC3B,CAAC;EAED,cAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,IAAI,EAAA;IACjB,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;MAC9C,IAAI,CAAC,KAAK,GAAG,IAAI;IAClB;EACH,CAAC;EAED,cAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,IAAI,EAAA;IACX,IAAI,IAAI,CAAC,UAAU,EAAE;MACnB,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,SAAS,EAAE;QACtD,IAAI,CAAC,KAAK,GAAG,IAAI;MAClB;KACF,MAAM;MACL,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,SAAS,EAAE;QACtD,IAAI,CAAC,KAAK,GAAG,IAAI;MAClB;IACF;EACH,CAAC;EACH,OAAA,cAAC;AAAD,CAAC,CA5C4B,iBAAiB,CAAA;AA8C9C,OAAM,SAAU,gBAAgB,CAC9B,SAAmB,EACnB,OAAwB,EAAA;EAExB,IAAI,OAAO,YAAY,MAAM,EAAE;IAC7B,IAAM,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC;IACjC,IAAM,cAAc,GAAG,IAAI,cAAc,CAAC,SAAS,CAAC;IACpD,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC;IACzB,OAAO,cAAc,CAAC,KAAK;GAC5B,MAAM;IACL,OACE,IAAI,CAAM,OAAO,EAAE,UAAC,IAAI,EAAA;MACtB,OAAO,QAAQ,CAAC,SAAS,EAAW,IAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,KAAK,SAAS;EAEnB;AACH","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { VERSION, BaseRegExpVisitor } from \"regexp-to-ast\";\nimport { forEach, contains, PRINT_ERROR, PRINT_WARNING, find, isArray, every, values } from \"../utils/utils\";\nimport { getRegExpAst } from \"./reg_exp_parser\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer\";\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexport var failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nexport function getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n    if (ensureOptimizations === void 0) { ensureOptimizations = false; }\n    try {\n        var ast = getRegExpAst(regExp);\n        var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n        return firstChars;\n    }\n    catch (e) {\n        /* istanbul ignore next */\n        // Testing this relies on the regexp-to-ast library having a bug... */\n        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n        if (e.message === complementErrorMessage) {\n            if (ensureOptimizations) {\n                PRINT_WARNING(\"\" + failedOptimizationPrefixMsg +\n                    (\"\\tUnable to optimize: < \" + regExp.toString() + \" >\\n\") +\n                    \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n            }\n        }\n        else {\n            var msgSuffix = \"\";\n            if (ensureOptimizations) {\n                msgSuffix =\n                    \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n                        \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n            }\n            PRINT_ERROR(failedOptimizationPrefixMsg + \"\\n\" +\n                (\"\\tFailed parsing: < \" + regExp.toString() + \" >\\n\") +\n                (\"\\tUsing the regexp-to-ast library version: \" + VERSION + \"\\n\") +\n                \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" +\n                msgSuffix);\n        }\n    }\n    return [];\n}\nexport function firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n        case \"Disjunction\":\n            for (var i = 0; i < ast.value.length; i++) {\n                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n            }\n            break;\n        case \"Alternative\":\n            var terms = ast.value;\n            for (var i = 0; i < terms.length; i++) {\n                var term = terms[i];\n                // skip terms that cannot effect the first char results\n                switch (term.type) {\n                    case \"EndAnchor\":\n                    // A group back reference cannot affect potential starting char.\n                    // because if a back reference is the first production than automatically\n                    // the group being referenced has had to come BEFORE so its codes have already been added\n                    case \"GroupBackReference\":\n                    // assertions do not affect potential starting codes\n                    case \"Lookahead\":\n                    case \"NegativeLookahead\":\n                    case \"StartAnchor\":\n                    case \"WordBoundary\":\n                    case \"NonWordBoundary\":\n                        continue;\n                }\n                var atom = term;\n                switch (atom.type) {\n                    case \"Character\":\n                        addOptimizedIdxToResult(atom.value, result, ignoreCase);\n                        break;\n                    case \"Set\":\n                        if (atom.complement === true) {\n                            throw Error(complementErrorMessage);\n                        }\n                        forEach(atom.value, function (code) {\n                            if (typeof code === \"number\") {\n                                addOptimizedIdxToResult(code, result, ignoreCase);\n                            }\n                            else {\n                                // range\n                                var range = code;\n                                // cannot optimize when ignoreCase is\n                                if (ignoreCase === true) {\n                                    for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                }\n                                // Optimization (2 orders of magnitude less work for very large ranges)\n                                else {\n                                    // handle unoptimized values\n                                    for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < minOptimizationVal; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                                    if (range.to >= minOptimizationVal) {\n                                        var minUnOptVal = range.from >= minOptimizationVal\n                                            ? range.from\n                                            : minOptimizationVal;\n                                        var maxUnOptVal = range.to;\n                                        var minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                                        var maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n                                        for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                                            result[currOptIdx] = currOptIdx;\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                        break;\n                    case \"Group\":\n                        firstCharOptimizedIndices(atom.value, result, ignoreCase);\n                        break;\n                    /* istanbul ignore next */\n                    default:\n                        throw Error(\"Non Exhaustive Match\");\n                }\n                // reached a mandatory production, no more **start** codes can be found on this alternative\n                var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n                if (\n                // A group may be optional due to empty contents /(?:)/\n                // or if everything inside it is optional /((a)?)/\n                (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n                    // If this term is not a group it may only be optional if it has an optional quantifier\n                    (atom.type !== \"Group\" && isOptionalQuantifier === false)) {\n                    break;\n                }\n            }\n            break;\n        /* istanbul ignore next */\n        default:\n            throw Error(\"non exhaustive match!\");\n    }\n    // console.log(Object.keys(result).length)\n    return values(result);\n}\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n    var optimizedCharIdx = charCodeToOptimizedIndex(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n        handleIgnoreCase(code, result);\n    }\n}\nfunction handleIgnoreCase(code, result) {\n    var char = String.fromCharCode(code);\n    var upperChar = char.toUpperCase();\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n        var optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n    }\n    else {\n        var lowerChar = char.toLowerCase();\n        if (lowerChar !== char) {\n            var optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0));\n            result[optimizedCharIdx] = optimizedCharIdx;\n        }\n    }\n}\nfunction findCode(setNode, targetCharCodes) {\n    return find(setNode.value, function (codeOrRange) {\n        if (typeof codeOrRange === \"number\") {\n            return contains(targetCharCodes, codeOrRange);\n        }\n        else {\n            // range\n            var range_1 = codeOrRange;\n            return (find(targetCharCodes, function (targetCode) { return range_1.from <= targetCode && targetCode <= range_1.to; }) !== undefined);\n        }\n    });\n}\nfunction isWholeOptional(ast) {\n    if (ast.quantifier && ast.quantifier.atLeast === 0) {\n        return true;\n    }\n    if (!ast.value) {\n        return false;\n    }\n    return isArray(ast.value)\n        ? every(ast.value, isWholeOptional)\n        : isWholeOptional(ast.value);\n}\nvar CharCodeFinder = /** @class */ (function (_super) {\n    __extends(CharCodeFinder, _super);\n    function CharCodeFinder(targetCharCodes) {\n        var _this = _super.call(this) || this;\n        _this.targetCharCodes = targetCharCodes;\n        _this.found = false;\n        return _this;\n    }\n    CharCodeFinder.prototype.visitChildren = function (node) {\n        // No need to keep looking...\n        if (this.found === true) {\n            return;\n        }\n        // switch lookaheads as they do not actually consume any characters thus\n        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n        switch (node.type) {\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                return;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                return;\n        }\n        _super.prototype.visitChildren.call(this, node);\n    };\n    CharCodeFinder.prototype.visitCharacter = function (node) {\n        if (contains(this.targetCharCodes, node.value)) {\n            this.found = true;\n        }\n    };\n    CharCodeFinder.prototype.visitSet = function (node) {\n        if (node.complement) {\n            if (findCode(node, this.targetCharCodes) === undefined) {\n                this.found = true;\n            }\n        }\n        else {\n            if (findCode(node, this.targetCharCodes) !== undefined) {\n                this.found = true;\n            }\n        }\n    };\n    return CharCodeFinder;\n}(BaseRegExpVisitor));\nexport function canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n        var ast = getRegExpAst(pattern);\n        var charCodeFinder = new CharCodeFinder(charCodes);\n        charCodeFinder.visit(ast);\n        return charCodeFinder.found;\n    }\n    else {\n        return (find(pattern, function (char) {\n            return contains(charCodes, char.charCodeAt(0));\n        }) !== undefined);\n    }\n}\n//# sourceMappingURL=reg_exp.js.map"]},"metadata":{},"sourceType":"module"}