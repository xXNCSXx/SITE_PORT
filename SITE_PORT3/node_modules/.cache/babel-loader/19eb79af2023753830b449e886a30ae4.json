{"ast":null,"code":"let updateQueue = makeQueue();\nconst raf = fn => schedule(fn, updateQueue);\nlet writeQueue = makeQueue();\nraf.write = fn => schedule(fn, writeQueue);\nlet onStartQueue = makeQueue();\nraf.onStart = fn => schedule(fn, onStartQueue);\nlet onFrameQueue = makeQueue();\nraf.onFrame = fn => schedule(fn, onFrameQueue);\nlet onFinishQueue = makeQueue();\nraf.onFinish = fn => schedule(fn, onFinishQueue);\nlet timeouts = [];\nraf.setTimeout = (handler, ms) => {\n  let time = raf.now() + ms;\n  let cancel = () => {\n    let i = timeouts.findIndex(t => t.cancel == cancel);\n    if (~i) timeouts.splice(i, 1);\n    __raf.count -= ~i ? 1 : 0;\n  };\n  let timeout = {\n    time,\n    handler,\n    cancel\n  };\n  timeouts.splice(findTimeout(time), 0, timeout);\n  __raf.count += 1;\n  start();\n  return timeout;\n};\nlet findTimeout = time => ~(~timeouts.findIndex(t => t.time > time) || ~timeouts.length);\nraf.cancel = fn => {\n  updateQueue.delete(fn);\n  writeQueue.delete(fn);\n};\nraf.sync = fn => {\n  sync = true;\n  raf.batchedUpdates(fn);\n  sync = false;\n};\nraf.throttle = fn => {\n  let lastArgs;\n  function queuedFn() {\n    try {\n      fn(...lastArgs);\n    } finally {\n      lastArgs = null;\n    }\n  }\n  function throttled(...args) {\n    lastArgs = args;\n    raf.onStart(queuedFn);\n  }\n  throttled.handler = fn;\n  throttled.cancel = () => {\n    onStartQueue.delete(queuedFn);\n    lastArgs = null;\n  };\n  return throttled;\n};\nlet nativeRaf = typeof window != \"undefined\" ? window.requestAnimationFrame : () => {};\nraf.use = impl => nativeRaf = impl;\nraf.now = typeof performance != \"undefined\" ? () => performance.now() : Date.now;\nraf.batchedUpdates = fn => fn();\nraf.catch = console.error;\nlet ts = -1;\nlet sync = false;\nfunction schedule(fn, queue) {\n  if (sync) {\n    queue.delete(fn);\n    fn(0);\n  } else {\n    queue.add(fn);\n    start();\n  }\n}\nfunction start() {\n  if (ts < 0) {\n    ts = 0;\n    nativeRaf(loop);\n  }\n}\nfunction loop() {\n  if (~ts) {\n    nativeRaf(loop);\n    raf.batchedUpdates(update);\n  }\n}\nfunction update() {\n  let prevTs = ts;\n  ts = raf.now();\n  let count = findTimeout(ts);\n  if (count) {\n    eachSafely(timeouts.splice(0, count), t => t.handler());\n    __raf.count -= count;\n  }\n  onStartQueue.flush();\n  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);\n  onFrameQueue.flush();\n  writeQueue.flush();\n  onFinishQueue.flush();\n}\nfunction makeQueue() {\n  let next = new Set();\n  let current = next;\n  return {\n    add(fn) {\n      __raf.count += current == next && !next.has(fn) ? 1 : 0;\n      next.add(fn);\n    },\n    delete(fn) {\n      __raf.count -= current == next && next.has(fn) ? 1 : 0;\n      return next.delete(fn);\n    },\n    flush(arg) {\n      if (current.size) {\n        next = new Set();\n        __raf.count -= current.size;\n        eachSafely(current, fn => fn(arg) && next.add(fn));\n        __raf.count += next.size;\n        current = next;\n      }\n    }\n  };\n}\nfunction eachSafely(values, each) {\n  values.forEach(value => {\n    try {\n      each(value);\n    } catch (e) {\n      raf.catch(e);\n    }\n  });\n}\nconst __raf = {\n  count: 0,\n  clear() {\n    ts = -1;\n    timeouts = [];\n    onStartQueue = makeQueue();\n    updateQueue = makeQueue();\n    onFrameQueue = makeQueue();\n    writeQueue = makeQueue();\n    onFinishQueue = makeQueue();\n    __raf.count = 0;\n  }\n};\nexport { __raf, raf };","map":{"version":3,"names":["updateQueue","makeQueue","fn","schedule","writeQueue","raf","write","onStartQueue","onStart","onFrameQueue","onFrame","onFinishQueue","onFinish","timeouts","setTimeout","handler","ms","time","now","cancel","i","findIndex","t","splice","__raf","count","timeout","findTimeout","start","length","delete","sync","batchedUpdates","throttle","lastArgs","queuedFn","throttled","args","nativeRaf","window","requestAnimationFrame","use","impl","performance","Date","catch","console","error","ts","queue","add","loop","update","prevTs","eachSafely","flush","Math","min","next","Set","current","has","arg","size","values","each","forEach","value","e","clear"],"sources":["../src/raf.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}