{"ast":null,"code":"import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandOculusMeshModel } from './XRHandOculusMeshModel.js';\nfunction XRHandModel(controller) {\n  Object3D.call(this);\n  this.controller = controller;\n  this.motionController = null;\n  this.envMap = null;\n  this.mesh = null;\n}\nXRHandModel.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: XRHandModel,\n  updateMatrixWorld: function (force) {\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n});\nconst XRHandModelFactory = function () {\n  function XRHandModelFactory() {\n    this.path = '';\n  }\n  XRHandModelFactory.prototype = {\n    constructor: XRHandModelFactory,\n    setPath: function (path) {\n      this.path = path;\n      return this;\n    },\n    createHandModel: function (controller, profile, options) {\n      const handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', event => {\n        const xrInputSource = event.data;\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.visible = true;\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'oculus') {\n            handModel.motionController = new XRHandOculusMeshModel(handModel, controller, this.path, xrInputSource.handedness, options);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', () => {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  };\n  return XRHandModelFactory;\n}();\nexport { XRHandModelFactory };","map":{"version":3,"names":["Object3D","XRHandPrimitiveModel","XRHandOculusMeshModel","XRHandModel","controller","call","motionController","envMap","mesh","prototype","Object","assign","create","constructor","updateMatrixWorld","force","updateMesh","XRHandModelFactory","path","setPath","createHandModel","profile","options","handModel","addEventListener","event","xrInputSource","data","hand","visible","undefined","handedness","primitive"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"sourcesContent":["import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandOculusMeshModel } from './XRHandOculusMeshModel.js';\n\nfunction XRHandModel(controller) {\n  Object3D.call(this);\n  this.controller = controller;\n  this.motionController = null;\n  this.envMap = null;\n  this.mesh = null;\n}\n\nXRHandModel.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: XRHandModel,\n  updateMatrixWorld: function (force) {\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n});\n\nconst XRHandModelFactory = function () {\n  function XRHandModelFactory() {\n    this.path = '';\n  }\n\n  XRHandModelFactory.prototype = {\n    constructor: XRHandModelFactory,\n    setPath: function (path) {\n      this.path = path;\n      return this;\n    },\n    createHandModel: function (controller, profile, options) {\n      const handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', event => {\n        const xrInputSource = event.data;\n\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.visible = true;\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'oculus') {\n            handModel.motionController = new XRHandOculusMeshModel(handModel, controller, this.path, xrInputSource.handedness, options);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', () => {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  };\n  return XRHandModelFactory;\n}();\n\nexport { XRHandModelFactory };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,qBAAqB,QAAQ,4BAA4B;AAElE,SAASC,WAAWA,CAACC,UAAU,EAAE;EAC/BJ,QAAQ,CAACK,IAAI,CAAC,IAAI,CAAC;EACnB,IAAI,CAACD,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACE,gBAAgB,GAAG,IAAI;EAC5B,IAAI,CAACC,MAAM,GAAG,IAAI;EAClB,IAAI,CAACC,IAAI,GAAG,IAAI;AAClB;AAEAL,WAAW,CAACM,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,MAAM,CAACZ,QAAQ,CAACS,SAAS,CAAC,EAAE;EACvEI,WAAW,EAAEV,WAAW;EACxBW,iBAAiB,EAAE,SAAAA,CAAUC,KAAK,EAAE;IAClCf,QAAQ,CAACS,SAAS,CAACK,iBAAiB,CAACT,IAAI,CAAC,IAAI,EAAEU,KAAK,CAAC;IAEtD,IAAI,IAAI,CAACT,gBAAgB,EAAE;MACzB,IAAI,CAACA,gBAAgB,CAACU,UAAU,CAAC,CAAC;IACpC;EACF;AACF,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAG,YAAY;EACrC,SAASA,kBAAkBA,CAAA,EAAG;IAC5B,IAAI,CAACC,IAAI,GAAG,EAAE;EAChB;EAEAD,kBAAkB,CAACR,SAAS,GAAG;IAC7BI,WAAW,EAAEI,kBAAkB;IAC/BE,OAAO,EAAE,SAAAA,CAAUD,IAAI,EAAE;MACvB,IAAI,CAACA,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI;IACb,CAAC;IACDE,eAAe,EAAE,SAAAA,CAAUhB,UAAU,EAAEiB,OAAO,EAAEC,OAAO,EAAE;MACvD,MAAMC,SAAS,GAAG,IAAIpB,WAAW,CAACC,UAAU,CAAC;MAC7CA,UAAU,CAACoB,gBAAgB,CAAC,WAAW,EAAEC,KAAK,IAAI;QAChD,MAAMC,aAAa,GAAGD,KAAK,CAACE,IAAI;QAEhC,IAAID,aAAa,CAACE,IAAI,IAAI,CAACL,SAAS,CAACjB,gBAAgB,EAAE;UACrDiB,SAAS,CAACM,OAAO,GAAG,IAAI;UACxBN,SAAS,CAACG,aAAa,GAAGA,aAAa,CAAC,CAAC;;UAEzC,IAAIL,OAAO,KAAKS,SAAS,IAAIT,OAAO,KAAK,SAAS,EAAE;YAClDE,SAAS,CAACjB,gBAAgB,GAAG,IAAIL,oBAAoB,CAACsB,SAAS,EAAEnB,UAAU,EAAE,IAAI,CAACc,IAAI,EAAEQ,aAAa,CAACK,UAAU,EAAE;cAChHC,SAAS,EAAE;YACb,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIX,OAAO,KAAK,OAAO,EAAE;YAC9BE,SAAS,CAACjB,gBAAgB,GAAG,IAAIL,oBAAoB,CAACsB,SAAS,EAAEnB,UAAU,EAAE,IAAI,CAACc,IAAI,EAAEQ,aAAa,CAACK,UAAU,EAAE;cAChHC,SAAS,EAAE;YACb,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIX,OAAO,KAAK,QAAQ,EAAE;YAC/BE,SAAS,CAACjB,gBAAgB,GAAG,IAAIJ,qBAAqB,CAACqB,SAAS,EAAEnB,UAAU,EAAE,IAAI,CAACc,IAAI,EAAEQ,aAAa,CAACK,UAAU,EAAET,OAAO,CAAC;UAC7H;QACF;MACF,CAAC,CAAC;MACFlB,UAAU,CAACoB,gBAAgB,CAAC,cAAc,EAAE,MAAM,CAAC;QACjD;QACA;MAAA,CACD,CAAC;MACF,OAAOD,SAAS;IAClB;EACF,CAAC;EACD,OAAON,kBAAkB;AAC3B,CAAC,CAAC,CAAC;AAEH,SAASA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module"}