{"ast":null,"code":"import { createTokenInstance, EOF } from \"../../../scan/tokens_public\";\nimport { cloneArr, contains, dropRight, find, flatten, has, isEmpty, map } from \"../../../utils/utils\";\nimport { MismatchedTokenException } from \"../../exceptions_public\";\nimport { IN } from \"../../constants\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\nexport var EOF_FOLLOW_KEY = {};\nexport var IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nexport function InRuleRecoveryException(message) {\n  this.name = IN_RULE_RECOVERY_EXCEPTION;\n  this.message = message;\n}\nInRuleRecoveryException.prototype = Error.prototype;\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nvar Recoverable = /** @class */function () {\n  function Recoverable() {}\n  Recoverable.prototype.initRecoverable = function (config) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n    this.recoveryEnabled = has(config, \"recoveryEnabled\") ? config.recoveryEnabled : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  };\n  Recoverable.prototype.getTokenToInsert = function (tokType) {\n    var tokToInsert = createTokenInstance(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  };\n  Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {\n    return true;\n  };\n  Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n    var _this = this;\n    // TODO: can the resyncTokenType be cached?\n    var reSyncTokType = this.findReSyncTokenType();\n    var savedLexerState = this.exportLexerState();\n    var resyncedTokens = [];\n    var passedResyncPoint = false;\n    var nextTokenWithoutResync = this.LA(1);\n    var currToken = this.LA(1);\n    var generateErrorMessage = function () {\n      var previousToken = _this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      var msg = _this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: _this.getCurrRuleFullName()\n      });\n      var error = new MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0));\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      _this.SAVE_ERROR(error);\n    };\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  };\n  Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n    // arguments to try and perform resync into the next iteration of the many are missing\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n      return false;\n    }\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n      return false;\n    }\n    return true;\n  };\n  // Error Recovery functionality\n  Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {\n    var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    var follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  };\n  Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      var tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      var nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  };\n  Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {\n    return this.canRecoverWithSingleTokenInsertion(expectedToken, follows) || this.canRecoverWithSingleTokenDeletion(expectedToken);\n  };\n  Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {\n    var _this = this;\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n    var mismatchedTok = this.LA(1);\n    var isMisMatchedTokInFollows = find(follows, function (possibleFollowsTokType) {\n      return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n    }) !== undefined;\n    return isMisMatchedTokInFollows;\n  };\n  Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {\n    var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n    return isNextTokenWhatIsExpected;\n  };\n  Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {\n    var followKey = this.getCurrFollowKey();\n    var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return contains(currentRuleReSyncSet, tokenTypeIdx);\n  };\n  Recoverable.prototype.findReSyncTokenType = function () {\n    var allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    var nextToken = this.LA(1);\n    var k = 2;\n    while (true) {\n      var nextTokenType = nextToken.tokenType;\n      if (contains(allPossibleReSyncTokTypes, nextTokenType)) {\n        return nextTokenType;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  };\n  Recoverable.prototype.getCurrFollowKey = function () {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    var currRuleShortName = this.getLastExplicitRuleShortName();\n    var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    var prevRuleShortName = this.getPreviousExplicitRuleShortName();\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName)\n    };\n  };\n  Recoverable.prototype.buildFullFollowKeyStack = function () {\n    var _this = this;\n    var explicitRuleStack = this.RULE_STACK;\n    var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return map(explicitRuleStack, function (ruleName, idx) {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: _this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n      };\n    });\n  };\n  Recoverable.prototype.flattenFollowSet = function () {\n    var _this = this;\n    var followStack = map(this.buildFullFollowKeyStack(), function (currKey) {\n      return _this.getFollowSetFromFollowKey(currKey);\n    });\n    return flatten(followStack);\n  };\n  Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n    var followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n    return this.resyncFollows[followName];\n  };\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  };\n  Recoverable.prototype.reSyncTo = function (tokType) {\n    var resyncedTokens = [];\n    var nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  };\n  Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  };\n  Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {\n    var pathRuleStack = this.getHumanReadableRuleStack();\n    var pathOccurrenceStack = cloneArr(this.RULE_OCCURRENCE_STACK);\n    var grammarPath = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule\n    };\n    return grammarPath;\n  };\n  Recoverable.prototype.getHumanReadableRuleStack = function () {\n    var _this = this;\n    return map(this.RULE_STACK, function (currShortName) {\n      return _this.shortRuleNameToFullName(currShortName);\n    });\n  };\n  return Recoverable;\n}();\nexport { Recoverable };\nexport function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n  var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  var firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    var currRuleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[currRuleName];\n    var walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n  var expectTokAfterLastMatch = firstAfterRepInfo.token;\n  var nextTokIdx = firstAfterRepInfo.occurrence;\n  var isEndOfRule = firstAfterRepInfo.isEndOfRule;\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === undefined) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n  if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n  }\n}","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/recoverable.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { createTokenInstance, EOF } from \"../../../scan/tokens_public\";\nimport { cloneArr, contains, dropRight, find, flatten, has, isEmpty, map } from \"../../../utils/utils\";\nimport { MismatchedTokenException } from \"../../exceptions_public\";\nimport { IN } from \"../../constants\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\nexport var EOF_FOLLOW_KEY = {};\nexport var IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nexport function InRuleRecoveryException(message) {\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n    this.message = message;\n}\nInRuleRecoveryException.prototype = Error.prototype;\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nvar Recoverable = /** @class */ (function () {\n    function Recoverable() {\n    }\n    Recoverable.prototype.initRecoverable = function (config) {\n        this.firstAfterRepMap = {};\n        this.resyncFollows = {};\n        this.recoveryEnabled = has(config, \"recoveryEnabled\")\n            ? config.recoveryEnabled\n            : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n        // performance optimization, NOOP will be inlined which\n        // effectively means that this optional feature does not exist\n        // when not used.\n        if (this.recoveryEnabled) {\n            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n        }\n    };\n    Recoverable.prototype.getTokenToInsert = function (tokType) {\n        var tokToInsert = createTokenInstance(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n        tokToInsert.isInsertedInRecovery = true;\n        return tokToInsert;\n    };\n    Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {\n        return true;\n    };\n    Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n        var _this = this;\n        // TODO: can the resyncTokenType be cached?\n        var reSyncTokType = this.findReSyncTokenType();\n        var savedLexerState = this.exportLexerState();\n        var resyncedTokens = [];\n        var passedResyncPoint = false;\n        var nextTokenWithoutResync = this.LA(1);\n        var currToken = this.LA(1);\n        var generateErrorMessage = function () {\n            var previousToken = _this.LA(0);\n            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n            // the error that would have been thrown\n            var msg = _this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: expectedTokType,\n                actual: nextTokenWithoutResync,\n                previous: previousToken,\n                ruleName: _this.getCurrRuleFullName()\n            });\n            var error = new MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0));\n            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n            error.resyncedTokens = dropRight(resyncedTokens);\n            _this.SAVE_ERROR(error);\n        };\n        while (!passedResyncPoint) {\n            // re-synced to a point where we can safely exit the repetition/\n            if (this.tokenMatcher(currToken, expectedTokType)) {\n                generateErrorMessage();\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (lookAheadFunc.call(this)) {\n                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n                generateErrorMessage();\n                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n                grammarRule.apply(this, grammarRuleArgs);\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (this.tokenMatcher(currToken, reSyncTokType)) {\n                passedResyncPoint = true;\n            }\n            else {\n                currToken = this.SKIP_TOKEN();\n                this.addToResyncTokens(currToken, resyncedTokens);\n            }\n        }\n        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n        // \"between rules\" resync recovery later in the flow.\n        this.importLexerState(savedLexerState);\n    };\n    Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {\n        // Edge case of arriving from a MANY repetition which is stuck\n        // Attempting recovery in this case could cause an infinite loop\n        if (notStuck === false) {\n            return false;\n        }\n        // arguments to try and perform resync into the next iteration of the many are missing\n        if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n            return false;\n        }\n        // no need to recover, next token is what we expect...\n        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n            return false;\n        }\n        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n        // and prefer some backtracking path that includes recovered errors.\n        if (this.isBackTracking()) {\n            return false;\n        }\n        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n        //noinspection RedundantIfStatementJS\n        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n            return false;\n        }\n        return true;\n    };\n    // Error Recovery functionality\n    Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {\n        var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n        var follows = this.getNextPossibleTokenTypes(grammarPath);\n        return follows;\n    };\n    Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {\n        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n            var tokToInsert = this.getTokenToInsert(expectedTokType);\n            return tokToInsert;\n        }\n        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n            var nextTok = this.SKIP_TOKEN();\n            this.consumeToken();\n            return nextTok;\n        }\n        throw new InRuleRecoveryException(\"sad sad panda\");\n    };\n    Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {\n        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n            this.canRecoverWithSingleTokenDeletion(expectedToken));\n    };\n    Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {\n        var _this = this;\n        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n            return false;\n        }\n        // must know the possible following tokens to perform single token insertion\n        if (isEmpty(follows)) {\n            return false;\n        }\n        var mismatchedTok = this.LA(1);\n        var isMisMatchedTokInFollows = find(follows, function (possibleFollowsTokType) {\n            return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n        }) !== undefined;\n        return isMisMatchedTokInFollows;\n    };\n    Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {\n        var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n        return isNextTokenWhatIsExpected;\n    };\n    Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {\n        var followKey = this.getCurrFollowKey();\n        var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n        return contains(currentRuleReSyncSet, tokenTypeIdx);\n    };\n    Recoverable.prototype.findReSyncTokenType = function () {\n        var allPossibleReSyncTokTypes = this.flattenFollowSet();\n        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n        var nextToken = this.LA(1);\n        var k = 2;\n        while (true) {\n            var nextTokenType = nextToken.tokenType;\n            if (contains(allPossibleReSyncTokTypes, nextTokenType)) {\n                return nextTokenType;\n            }\n            nextToken = this.LA(k);\n            k++;\n        }\n    };\n    Recoverable.prototype.getCurrFollowKey = function () {\n        // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n        if (this.RULE_STACK.length === 1) {\n            return EOF_FOLLOW_KEY;\n        }\n        var currRuleShortName = this.getLastExplicitRuleShortName();\n        var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n        var prevRuleShortName = this.getPreviousExplicitRuleShortName();\n        return {\n            ruleName: this.shortRuleNameToFullName(currRuleShortName),\n            idxInCallingRule: currRuleIdx,\n            inRule: this.shortRuleNameToFullName(prevRuleShortName)\n        };\n    };\n    Recoverable.prototype.buildFullFollowKeyStack = function () {\n        var _this = this;\n        var explicitRuleStack = this.RULE_STACK;\n        var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return map(explicitRuleStack, function (ruleName, idx) {\n            if (idx === 0) {\n                return EOF_FOLLOW_KEY;\n            }\n            return {\n                ruleName: _this.shortRuleNameToFullName(ruleName),\n                idxInCallingRule: explicitOccurrenceStack[idx],\n                inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n            };\n        });\n    };\n    Recoverable.prototype.flattenFollowSet = function () {\n        var _this = this;\n        var followStack = map(this.buildFullFollowKeyStack(), function (currKey) {\n            return _this.getFollowSetFromFollowKey(currKey);\n        });\n        return flatten(followStack);\n    };\n    Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {\n        if (followKey === EOF_FOLLOW_KEY) {\n            return [EOF];\n        }\n        var followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n        return this.resyncFollows[followName];\n    };\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {\n        if (!this.tokenMatcher(token, EOF)) {\n            resyncTokens.push(token);\n        }\n        return resyncTokens;\n    };\n    Recoverable.prototype.reSyncTo = function (tokType) {\n        var resyncedTokens = [];\n        var nextTok = this.LA(1);\n        while (this.tokenMatcher(nextTok, tokType) === false) {\n            nextTok = this.SKIP_TOKEN();\n            this.addToResyncTokens(nextTok, resyncedTokens);\n        }\n        // the last token is not part of the error.\n        return dropRight(resyncedTokens);\n    };\n    Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n        // by default this is a NO-OP\n        // The actual implementation is with the function(not method) below\n    };\n    Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {\n        var pathRuleStack = this.getHumanReadableRuleStack();\n        var pathOccurrenceStack = cloneArr(this.RULE_OCCURRENCE_STACK);\n        var grammarPath = {\n            ruleStack: pathRuleStack,\n            occurrenceStack: pathOccurrenceStack,\n            lastTok: tokType,\n            lastTokOccurrence: tokIdxInRule\n        };\n        return grammarPath;\n    };\n    Recoverable.prototype.getHumanReadableRuleStack = function () {\n        var _this = this;\n        return map(this.RULE_STACK, function (currShortName) {\n            return _this.shortRuleNameToFullName(currShortName);\n        });\n    };\n    return Recoverable;\n}());\nexport { Recoverable };\nexport function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    var firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === undefined) {\n        var currRuleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[currRuleName];\n        var walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n        firstAfterRepInfo = walker.startWalking();\n        this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    var expectTokAfterLastMatch = firstAfterRepInfo.token;\n    var nextTokIdx = firstAfterRepInfo.occurrence;\n    var isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 &&\n        isEndOfRule &&\n        expectTokAfterLastMatch === undefined) {\n        expectTokAfterLastMatch = EOF;\n        nextTokIdx = 1;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n        // TODO: performance optimization: instead of passing the original args here, we modify\n        // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n        // to avoid searching the cache for it once more.\n        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n}\n//# sourceMappingURL=recoverable.js.map"]},"metadata":{},"sourceType":"module"}