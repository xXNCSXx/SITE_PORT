{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\nclass ConvexGeometry extends BufferGeometry {\n  constructor(points) {\n    super(); // buffers\n\n    const vertices = [];\n    const normals = [];\n    if (ConvexHull === undefined) {\n      console.error('THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on ConvexHull');\n    }\n    const convexHull = new ConvexHull().setFromPoints(points); // generate vertices and normals\n\n    const faces = convexHull.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      let edge = face.edge; // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        const point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    } // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n}\nexport { ConvexGeometry };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","ConvexHull","ConvexGeometry","constructor","points","vertices","normals","undefined","console","error","convexHull","setFromPoints","faces","i","length","face","edge","point","head","push","x","y","z","normal","next","setAttribute"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/geometries/ConvexGeometry.js"],"sourcesContent":["import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\n\nclass ConvexGeometry extends BufferGeometry {\n  constructor(points) {\n    super(); // buffers\n\n    const vertices = [];\n    const normals = [];\n\n    if (ConvexHull === undefined) {\n      console.error('THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on ConvexHull');\n    }\n\n    const convexHull = new ConvexHull().setFromPoints(points); // generate vertices and normals\n\n    const faces = convexHull.faces;\n\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      let edge = face.edge; // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        const point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    } // build geometry\n\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n\n}\n\nexport { ConvexGeometry };\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,sBAAsB,QAAQ,OAAO;AAC9D,SAASC,UAAU,QAAQ,uBAAuB;AAElD,MAAMC,cAAc,SAASH,cAAc,CAAC;EAC1CI,WAAWA,CAACC,MAAM,EAAE;IAClB,KAAK,CAAC,CAAC,CAAC,CAAC;;IAET,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAG,EAAE;IAElB,IAAIL,UAAU,KAAKM,SAAS,EAAE;MAC5BC,OAAO,CAACC,KAAK,CAAC,uEAAuE,CAAC;IACxF;IAEA,MAAMC,UAAU,GAAG,IAAIT,UAAU,CAAC,CAAC,CAACU,aAAa,CAACP,MAAM,CAAC,CAAC,CAAC;;IAE3D,MAAMQ,KAAK,GAAGF,UAAU,CAACE,KAAK;IAE9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,MAAME,IAAI,GAAGH,KAAK,CAACC,CAAC,CAAC;MACrB,IAAIG,IAAI,GAAGD,IAAI,CAACC,IAAI,CAAC,CAAC;;MAEtB,GAAG;QACD,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACD,KAAK;QAC/BZ,QAAQ,CAACc,IAAI,CAACF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,EAAEJ,KAAK,CAACK,CAAC,CAAC;QACxChB,OAAO,CAACa,IAAI,CAACJ,IAAI,CAACQ,MAAM,CAACH,CAAC,EAAEL,IAAI,CAACQ,MAAM,CAACF,CAAC,EAAEN,IAAI,CAACQ,MAAM,CAACD,CAAC,CAAC;QACzDN,IAAI,GAAGA,IAAI,CAACQ,IAAI;MAClB,CAAC,QAAQR,IAAI,KAAKD,IAAI,CAACC,IAAI;IAC7B,CAAC,CAAC;;IAGF,IAAI,CAACS,YAAY,CAAC,UAAU,EAAE,IAAIzB,sBAAsB,CAACK,QAAQ,EAAE,CAAC,CAAC,CAAC;IACtE,IAAI,CAACoB,YAAY,CAAC,QAAQ,EAAE,IAAIzB,sBAAsB,CAACM,OAAO,EAAE,CAAC,CAAC,CAAC;EACrE;AAEF;AAEA,SAASJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}