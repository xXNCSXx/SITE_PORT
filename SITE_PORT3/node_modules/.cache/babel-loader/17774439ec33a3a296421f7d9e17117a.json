{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\nvar DotScreenPass = function (center, angle, scale) {\n  if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\n  var shader = DotScreenShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n};\nDotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: DotScreenPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { DotScreenPass };","map":{"version":3,"names":["UniformsUtils","ShaderMaterial","FullScreenQuad","Pass","DotScreenShader","DotScreenPass","center","angle","scale","undefined","console","error","shader","uniforms","clone","value","copy","material","vertexShader","fragmentShader","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/postprocessing/DotScreenPass.js"],"sourcesContent":["import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nvar DotScreenPass = function (center, angle, scale) {\n  if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\n  var shader = DotScreenShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nDotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: DotScreenPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n\nexport { DotScreenPass };\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,cAAc,QAAQ,OAAO;AACrD,SAASC,cAAc,EAAEC,IAAI,QAAQ,WAAW;AAChD,SAASC,eAAe,QAAQ,+BAA+B;AAE/D,IAAIC,aAAa,GAAG,SAAAA,CAAUC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAClD,IAAIJ,eAAe,KAAKK,SAAS,EAAEC,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;EACjG,IAAIC,MAAM,GAAGR,eAAe;EAC5B,IAAI,CAACS,QAAQ,GAAGb,aAAa,CAACc,KAAK,CAACF,MAAM,CAACC,QAAQ,CAAC;EACpD,IAAIP,MAAM,KAAKG,SAAS,EAAE,IAAI,CAACI,QAAQ,CAAC,QAAQ,CAAC,CAACE,KAAK,CAACC,IAAI,CAACV,MAAM,CAAC;EACpE,IAAIC,KAAK,KAAKE,SAAS,EAAE,IAAI,CAACI,QAAQ,CAAC,OAAO,CAAC,CAACE,KAAK,GAAGR,KAAK;EAC7D,IAAIC,KAAK,KAAKC,SAAS,EAAE,IAAI,CAACI,QAAQ,CAAC,OAAO,CAAC,CAACE,KAAK,GAAGP,KAAK;EAC7D,IAAI,CAACS,QAAQ,GAAG,IAAIhB,cAAc,CAAC;IACjCY,QAAQ,EAAE,IAAI,CAACA,QAAQ;IACvBK,YAAY,EAAEN,MAAM,CAACM,YAAY;IACjCC,cAAc,EAAEP,MAAM,CAACO;EACzB,CAAC,CAAC;EACF,IAAI,CAACC,MAAM,GAAG,IAAIlB,cAAc,CAAC,IAAI,CAACe,QAAQ,CAAC;AACjD,CAAC;AAEDZ,aAAa,CAACgB,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,MAAM,CAACrB,IAAI,CAACkB,SAAS,CAAC,EAAE;EACrEI,WAAW,EAAEpB,aAAa;EAC1BqB,MAAM,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,WAAW,EAAEC;EACzC,8BACE;IACA,IAAI,CAAChB,QAAQ,CAAC,UAAU,CAAC,CAACE,KAAK,GAAGc,UAAU,CAACC,OAAO;IACpD,IAAI,CAACjB,QAAQ,CAAC,OAAO,CAAC,CAACE,KAAK,CAACgB,GAAG,CAACF,UAAU,CAACG,KAAK,EAAEH,UAAU,CAACI,MAAM,CAAC;IAErE,IAAI,IAAI,CAACC,cAAc,EAAE;MACvBP,QAAQ,CAACQ,eAAe,CAAC,IAAI,CAAC;MAC9B,IAAI,CAACf,MAAM,CAACM,MAAM,CAACC,QAAQ,CAAC;IAC9B,CAAC,MAAM;MACLA,QAAQ,CAACQ,eAAe,CAACP,WAAW,CAAC;MACrC,IAAI,IAAI,CAACQ,KAAK,EAAET,QAAQ,CAACS,KAAK,CAAC,CAAC;MAChC,IAAI,CAAChB,MAAM,CAACM,MAAM,CAACC,QAAQ,CAAC;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,SAAStB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}