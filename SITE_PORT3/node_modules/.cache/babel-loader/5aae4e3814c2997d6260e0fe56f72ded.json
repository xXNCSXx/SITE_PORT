{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useMemo, createElement } from 'react';\nimport { WebGLRenderTarget, PlaneBufferGeometry, Mesh, MeshDepthMaterial, ShaderMaterial } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n      opacity = 1,\n      width = 1,\n      height = 1,\n      blur = 1,\n      far = 10,\n      resolution = 256\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, [\"opacity\", \"width\", \"height\", \"blur\", \"far\", \"resolution\"]);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = useMemo(() => {\n    const renderTarget = new WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new Mesh(planeGeometry);\n    const depthMaterial = new MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n    const horizontalBlurMaterial = new ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  useFrame(() => {\n    if (shadowCamera.current) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n    }\n  });\n  return /*#__PURE__*/createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","forwardRef","useRef","useMemo","createElement","WebGLRenderTarget","PlaneBufferGeometry","Mesh","MeshDepthMaterial","ShaderMaterial","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","_ref","ref","opacity","width","height","blur","far","resolution","props","scene","gl","shadowCamera","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","texture","generateMipmaps","rotateX","Math","PI","depthTest","depthWrite","onBeforeCompile","shader","fragmentShader","replace","current","initialBackground","background","overrideMaterial","setRenderTarget","render","material","uniforms","tDiffuse","value","h","v","geometry","scale","rotation","map","transparent","args"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/@react-three/drei/core/ContactShadows.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useMemo, createElement } from 'react';\nimport { WebGLRenderTarget, PlaneBufferGeometry, Mesh, MeshDepthMaterial, ShaderMaterial } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    opacity = 1,\n    width = 1,\n    height = 1,\n    blur = 1,\n    far = 10,\n    resolution = 256\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"opacity\", \"width\", \"height\", \"blur\", \"far\", \"resolution\"]);\n\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = useMemo(() => {\n    const renderTarget = new WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new Mesh(planeGeometry);\n    const depthMaterial = new MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  useFrame(() => {\n    if (shadowCamera.current) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n    }\n  });\n  return /*#__PURE__*/createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}