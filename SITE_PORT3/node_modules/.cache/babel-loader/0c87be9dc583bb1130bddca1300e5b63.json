{"ast":null,"code":"import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from 'three';\nvar a = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: [] // half width\n};\nvar b = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: [] // half width\n};\nvar R = [[], [], []];\nvar AbsR = [[], [], []];\nvar t = [];\nvar xAxis = new Vector3();\nvar yAxis = new Vector3();\nvar zAxis = new Vector3();\nvar v1 = new Vector3();\nvar size = new Vector3();\nvar closestPoint = new Vector3();\nvar rotationMatrix = new Matrix3();\nvar aabb = new Box3();\nvar matrix = new Matrix4();\nvar inverse = new Matrix4();\nvar localRay = new Ray(); // OBB\n\nfunction OBB(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n  this.center = center;\n  this.halfSize = halfSize;\n  this.rotation = rotation;\n}\nObject.assign(OBB.prototype, {\n  set: function (center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  },\n  copy: function (obb) {\n    this.center.copy(obb.center);\n    this.halfSize.copy(obb.halfSize);\n    this.rotation.copy(obb.rotation);\n    return this;\n  },\n  clone: function () {\n    return new this.constructor().copy(this);\n  },\n  getSize: function (result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  },\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint: function (point, result) {\n    var halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // start at the center position of the OBB\n\n    result.copy(this.center); // project the target onto the OBB axes and walk towards that point\n\n    var x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    var y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    var z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  },\n  containsPoint: function (point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // project v1 onto each axis and check if these points lie inside the OBB\n\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  },\n  intersectsBox3: function (box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  },\n  intersectsSphere: function (sphere) {\n    // find the point on the OBB closest to the sphere center\n    this.clampPoint(sphere.center, closestPoint); // if that point is inside the sphere, the OBB and sphere intersect\n\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  },\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB: function (obb, epsilon = Number.EPSILON) {\n    // prepare data structures (the code uses the same nomenclature like the reference)\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb.center;\n    b.e[0] = obb.halfSize.x;\n    b.e[1] = obb.halfSize.y;\n    b.e[2] = obb.halfSize.z;\n    obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2]); // compute rotation matrix expressing b in a's coordinate frame\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    } // compute translation vector\n\n    v1.subVectors(b.c, a.c); // bring translation into a's coordinate frame\n\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]); // compute common subexpressions. Add in an epsilon term to\n    // counteract arithmetic errors when two edges are parallel and\n    // their cross product is (near) null\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n    var ra, rb; // test axes L = A0, L = A1, L = A2\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb) return false;\n    } // test axes L = B0, L = B1, L = B2\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb) return false;\n    } // test axis L = A0 x B0\n\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false; // test axis L = A0 x B1\n\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false; // test axis L = A0 x B2\n\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false; // test axis L = A1 x B0\n\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false; // test axis L = A1 x B1\n\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false; // test axis L = A1 x B2\n\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false; // test axis L = A2 x B0\n\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false; // test axis L = A2 x B1\n\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false; // test axis L = A2 x B2\n\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false; // since no separating axis is found, the OBBs must be intersecting\n\n    return true;\n  },\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane: function (plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;\n\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis)); // compute distance of the OBB's center from the plane\n\n    const d = plane.normal.dot(this.center) - plane.constant; // Intersection occurs when distance d falls within [-r,+r] interval\n\n    return Math.abs(d) <= r;\n  },\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay: function (ray, result) {\n    // the idea is to perform the intersection test in the local space\n    // of the OBB.\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size); // create a 4x4 transformation matrix\n\n    matrix4FromRotationMatrix(matrix, this.rotation);\n    matrix.setPosition(this.center); // transform ray to the local space of the OBB\n\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse); // perform ray <-> AABB intersection test\n\n    if (localRay.intersectBox(aabb, result)) {\n      // transform the intersection point back to world space\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  },\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay: function (ray) {\n    return this.intersectRay(ray, v1) !== null;\n  },\n  fromBox3: function (box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  },\n  equals: function (obb) {\n    return obb.center.equals(this.center) && obb.halfSize.equals(this.halfSize) && obb.rotation.equals(this.rotation);\n  },\n  applyMatrix4: function (matrix) {\n    var e = matrix.elements;\n    var sx = v1.set(e[0], e[1], e[2]).length();\n    var sy = v1.set(e[4], e[5], e[6]).length();\n    var sz = v1.set(e[8], e[9], e[10]).length();\n    var det = matrix.determinant();\n    if (det < 0) sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix);\n    var invSX = 1 / sx;\n    var invSY = 1 / sy;\n    var invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix);\n    this.center.add(v1);\n    return this;\n  }\n});\nfunction matrix4FromRotationMatrix(matrix4, matrix3) {\n  var e = matrix4.elements;\n  var me = matrix3.elements;\n  e[0] = me[0];\n  e[1] = me[1];\n  e[2] = me[2];\n  e[3] = 0;\n  e[4] = me[3];\n  e[5] = me[4];\n  e[6] = me[5];\n  e[7] = 0;\n  e[8] = me[6];\n  e[9] = me[7];\n  e[10] = me[8];\n  e[11] = 0;\n  e[12] = 0;\n  e[13] = 0;\n  e[14] = 0;\n  e[15] = 1;\n}\nvar obb = new OBB();\nexport { OBB };","map":{"version":3,"names":["Vector3","Matrix3","Box3","Matrix4","Ray","MathUtils","a","c","u","e","b","R","AbsR","t","xAxis","yAxis","zAxis","v1","size","closestPoint","rotationMatrix","aabb","matrix","inverse","localRay","OBB","center","halfSize","rotation","Object","assign","prototype","set","copy","obb","clone","constructor","getSize","result","multiplyScalar","clampPoint","point","subVectors","extractBasis","x","clamp","dot","add","y","z","containsPoint","Math","abs","intersectsBox3","box3","intersectsOBB","fromBox3","intersectsSphere","sphere","distanceToSquared","radius","epsilon","Number","EPSILON","i","j","ra","rb","intersectsPlane","plane","r","normal","d","constant","intersectRay","ray","setFromCenterAndSize","matrix4FromRotationMatrix","setPosition","invert","applyMatrix4","intersectBox","intersectsRay","getCenter","identity","equals","elements","sx","length","sy","sz","det","determinant","setFromMatrix4","invSX","invSY","invSZ","multiply","setFromMatrixPosition","matrix4","matrix3","me"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/math/OBB.js"],"sourcesContent":["import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from 'three';\n\nvar a = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar b = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar R = [[], [], []];\nvar AbsR = [[], [], []];\nvar t = [];\nvar xAxis = new Vector3();\nvar yAxis = new Vector3();\nvar zAxis = new Vector3();\nvar v1 = new Vector3();\nvar size = new Vector3();\nvar closestPoint = new Vector3();\nvar rotationMatrix = new Matrix3();\nvar aabb = new Box3();\nvar matrix = new Matrix4();\nvar inverse = new Matrix4();\nvar localRay = new Ray(); // OBB\n\nfunction OBB(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n  this.center = center;\n  this.halfSize = halfSize;\n  this.rotation = rotation;\n}\n\nObject.assign(OBB.prototype, {\n  set: function (center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  },\n  copy: function (obb) {\n    this.center.copy(obb.center);\n    this.halfSize.copy(obb.halfSize);\n    this.rotation.copy(obb.rotation);\n    return this;\n  },\n  clone: function () {\n    return new this.constructor().copy(this);\n  },\n  getSize: function (result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  },\n\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint: function (point, result) {\n    var halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // start at the center position of the OBB\n\n    result.copy(this.center); // project the target onto the OBB axes and walk towards that point\n\n    var x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    var y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    var z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  },\n  containsPoint: function (point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // project v1 onto each axis and check if these points lie inside the OBB\n\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  },\n  intersectsBox3: function (box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  },\n  intersectsSphere: function (sphere) {\n    // find the point on the OBB closest to the sphere center\n    this.clampPoint(sphere.center, closestPoint); // if that point is inside the sphere, the OBB and sphere intersect\n\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  },\n\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB: function (obb, epsilon = Number.EPSILON) {\n    // prepare data structures (the code uses the same nomenclature like the reference)\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb.center;\n    b.e[0] = obb.halfSize.x;\n    b.e[1] = obb.halfSize.y;\n    b.e[2] = obb.halfSize.z;\n    obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2]); // compute rotation matrix expressing b in a's coordinate frame\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    } // compute translation vector\n\n\n    v1.subVectors(b.c, a.c); // bring translation into a's coordinate frame\n\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]); // compute common subexpressions. Add in an epsilon term to\n    // counteract arithmetic errors when two edges are parallel and\n    // their cross product is (near) null\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n\n    var ra, rb; // test axes L = A0, L = A1, L = A2\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb) return false;\n    } // test axes L = B0, L = B1, L = B2\n\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb) return false;\n    } // test axis L = A0 x B0\n\n\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false; // test axis L = A0 x B1\n\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false; // test axis L = A0 x B2\n\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false; // test axis L = A1 x B0\n\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false; // test axis L = A1 x B1\n\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false; // test axis L = A1 x B2\n\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false; // test axis L = A2 x B0\n\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false; // test axis L = A2 x B1\n\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false; // test axis L = A2 x B2\n\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false; // since no separating axis is found, the OBBs must be intersecting\n\n    return true;\n  },\n\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane: function (plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;\n\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis)); // compute distance of the OBB's center from the plane\n\n    const d = plane.normal.dot(this.center) - plane.constant; // Intersection occurs when distance d falls within [-r,+r] interval\n\n    return Math.abs(d) <= r;\n  },\n\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay: function (ray, result) {\n    // the idea is to perform the intersection test in the local space\n    // of the OBB.\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size); // create a 4x4 transformation matrix\n\n    matrix4FromRotationMatrix(matrix, this.rotation);\n    matrix.setPosition(this.center); // transform ray to the local space of the OBB\n\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse); // perform ray <-> AABB intersection test\n\n    if (localRay.intersectBox(aabb, result)) {\n      // transform the intersection point back to world space\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  },\n\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay: function (ray) {\n    return this.intersectRay(ray, v1) !== null;\n  },\n  fromBox3: function (box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  },\n  equals: function (obb) {\n    return obb.center.equals(this.center) && obb.halfSize.equals(this.halfSize) && obb.rotation.equals(this.rotation);\n  },\n  applyMatrix4: function (matrix) {\n    var e = matrix.elements;\n    var sx = v1.set(e[0], e[1], e[2]).length();\n    var sy = v1.set(e[4], e[5], e[6]).length();\n    var sz = v1.set(e[8], e[9], e[10]).length();\n    var det = matrix.determinant();\n    if (det < 0) sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix);\n    var invSX = 1 / sx;\n    var invSY = 1 / sy;\n    var invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix);\n    this.center.add(v1);\n    return this;\n  }\n});\n\nfunction matrix4FromRotationMatrix(matrix4, matrix3) {\n  var e = matrix4.elements;\n  var me = matrix3.elements;\n  e[0] = me[0];\n  e[1] = me[1];\n  e[2] = me[2];\n  e[3] = 0;\n  e[4] = me[3];\n  e[5] = me[4];\n  e[6] = me[5];\n  e[7] = 0;\n  e[8] = me[6];\n  e[9] = me[7];\n  e[10] = me[8];\n  e[11] = 0;\n  e[12] = 0;\n  e[13] = 0;\n  e[14] = 0;\n  e[15] = 1;\n}\n\nvar obb = new OBB();\n\nexport { OBB };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}