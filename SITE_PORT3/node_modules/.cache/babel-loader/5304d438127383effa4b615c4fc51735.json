{"ast":null,"code":"import { has, timer } from \"../../../utils/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */function () {\n  function PerformanceTracer() {}\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if (has(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n    this.traceInitIndent = -1;\n  };\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n      var _a = timer(phaseImpl),\n        time = _a.time,\n        value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      var traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n  return PerformanceTracer;\n}();\nexport { PerformanceTracer };","map":{"version":3,"names":["has","timer","DEFAULT_PARSER_CONFIG","PerformanceTracer","prototype","initPerformanceTracer","config","userTraceInitPerf","traceInitPerf","traceIsNumber","traceInitMaxIdent","Infinity","traceInitIndent","TRACE_INIT","phaseDesc","phaseImpl","indent","Array","join","console","log","_a","time","value","traceMethod","warn"],"sources":["../../../../../src/parse/parser/traits/perf_tracer.ts"],"sourcesContent":[null],"mappings":"AACA,SAASA,GAAG,EAAEC,KAAK,QAAQ,sBAAsB;AAEjD,SAASC,qBAAqB,QAAQ,WAAW;AAEjD;;;AAGA,IAAAC,iBAAA;EAAA,SAAAA,kBAAA,GA4CA;EAvCEA,iBAAA,CAAAC,SAAA,CAAAC,qBAAqB,GAArB,UAAsBC,MAAqB;IACzC,IAAIN,GAAG,CAACM,MAAM,EAAE,eAAe,CAAC,EAAE;MAChC,IAAMC,iBAAiB,GAAGD,MAAM,CAACE,aAAa;MAC9C,IAAMC,aAAa,GAAG,OAAOF,iBAAiB,KAAK,QAAQ;MAC3D,IAAI,CAACG,iBAAiB,GAAGD,aAAa,GAC1BF,iBAAiB,GACzBI,QAAQ;MACZ,IAAI,CAACH,aAAa,GAAGC,aAAa,GAC9BF,iBAAiB,GAAG,CAAC,GACrBA,iBAAiB;KACtB,MAAM;MACL,IAAI,CAACG,iBAAiB,GAAG,CAAC;MAC1B,IAAI,CAACF,aAAa,GAAGN,qBAAqB,CAACM,aAAa;;IAG1D,IAAI,CAACI,eAAe,GAAG,CAAC,CAAC;EAC3B,CAAC;EAEDT,iBAAA,CAAAC,SAAA,CAAAS,UAAU,GAAV,UAAmCC,SAAiB,EAAEC,SAAkB;IACtE;IACA;IACA,IAAI,IAAI,CAACP,aAAa,KAAK,IAAI,EAAE;MAC/B,IAAI,CAACI,eAAe,EAAE;MACtB,IAAMI,MAAM,GAAG,IAAIC,KAAK,CAAC,IAAI,CAACL,eAAe,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC;MAC7D,IAAI,IAAI,CAACN,eAAe,GAAG,IAAI,CAACF,iBAAiB,EAAE;QACjDS,OAAO,CAACC,GAAG,CAAIJ,MAAM,aAAQF,SAAS,MAAG,CAAC;;MAEtC,IAAAO,EAAA,GAAkBpB,KAAK,CAACc,SAAS,CAAC;QAAhCO,IAAI,GAAAD,EAAA,CAAAC,IAAA;QAAEC,KAAK,GAAAF,EAAA,CAAAE,KAAqB;MACxC;MACA,IAAMC,WAAW,GAAGF,IAAI,GAAG,EAAE,GAAGH,OAAO,CAACM,IAAI,GAAGN,OAAO,CAACC,GAAG;MAC1D,IAAI,IAAI,CAACR,eAAe,GAAG,IAAI,CAACF,iBAAiB,EAAE;QACjDc,WAAW,CAAIR,MAAM,aAAQF,SAAS,gBAAWQ,IAAI,OAAI,CAAC;;MAE5D,IAAI,CAACV,eAAe,EAAE;MACtB,OAAOW,KAAK;KACb,MAAM;MACL,OAAOR,SAAS,EAAE;;EAEtB,CAAC;EACH,OAAAZ,iBAAC;AAAD,CAAC,CA5CD","ignoreList":[]},"metadata":{},"sourceType":"module"}