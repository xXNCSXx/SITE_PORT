{"ast":null,"code":"import { analyzeTokenTypes, charCodeToOptimizedIndex, cloneEmptyGroups, DEFAULT_MODE, LineTerminatorOptimizedTester, performRuntimeChecks, performWarningRuntimeChecks, SUPPORT_STICKY, validatePatterns } from \"./lexer\";\nimport { cloneArr, cloneObj, forEach, IDENTITY, isArray, isEmpty, isUndefined, keys, last, map, merge, NOOP, PRINT_WARNING, reduce, reject, timer, toFastProperties } from \"../utils/utils\";\nimport { augmentTokenTypes } from \"./tokens\";\nimport { defaultLexerErrorProvider } from \"../scan/lexer_errors_public\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser\";\nexport var LexerDefinitionErrorType;\n(function (LexerDefinitionErrorType) {\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\nvar DEFAULT_LEXER_CONFIG = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\nvar Lexer = /** @class */function () {\n  function Lexer(lexerDefinition, config) {\n    var _this = this;\n    if (config === void 0) {\n      config = DEFAULT_LEXER_CONFIG;\n    }\n    this.lexerDefinition = lexerDefinition;\n    this.lexerDefinitionErrors = [];\n    this.lexerDefinitionWarning = [];\n    this.patternIdxToConfig = {};\n    this.charCodeToPatternIdxToConfig = {};\n    this.modes = [];\n    this.emptyGroups = {};\n    this.config = undefined;\n    this.trackStartLines = true;\n    this.trackEndLines = true;\n    this.hasCustom = false;\n    this.canModeBeOptimized = {};\n    if (typeof config === \"boolean\") {\n      throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" + \"a boolean 2nd argument is no longer supported\");\n    }\n    // todo: defaults func?\n    this.config = merge(DEFAULT_LEXER_CONFIG, config);\n    var traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n    this.TRACE_INIT(\"Lexer Constructor\", function () {\n      var actualDefinition;\n      var hasOnlySingleMode = true;\n      _this.TRACE_INIT(\"Lexer Config handling\", function () {\n        if (_this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          _this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (_this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n            throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n          }\n        }\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n        }\n        _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);\n        _this.trackEndLines = /full/i.test(_this.config.positionTracking);\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: {}\n          };\n          actualDefinition.modes[DEFAULT_MODE] = cloneArr(lexerDefinition);\n          actualDefinition[DEFAULT_MODE] = DEFAULT_MODE;\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = cloneObj(lexerDefinition);\n        }\n      });\n      if (_this.config.skipValidations === false) {\n        _this.TRACE_INIT(\"performRuntimeChecks\", function () {\n          _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(performRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n        _this.TRACE_INIT(\"performWarningRuntimeChecks\", function () {\n          _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat(performWarningRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n      }\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {};\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, function (currModeValue, currModeName) {\n        actualDefinition.modes[currModeName] = reject(currModeValue, function (currTokType) {\n          return isUndefined(currTokType);\n        });\n      });\n      var allModeNames = keys(actualDefinition.modes);\n      forEach(actualDefinition.modes, function (currModDef, currModName) {\n        _this.TRACE_INIT(\"Mode: <\" + currModName + \"> processing\", function () {\n          _this.modes.push(currModName);\n          if (_this.config.skipValidations === false) {\n            _this.TRACE_INIT(\"validatePatterns\", function () {\n              _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(validatePatterns(currModDef, allModeNames));\n            });\n          }\n          // If definition errors were encountered, the analysis phase may fail unexpectedly/\n          // Considering a lexer with definition errors may never be used, there is no point\n          // to performing the analysis anyhow...\n          if (isEmpty(_this.lexerDefinitionErrors)) {\n            augmentTokenTypes(currModDef);\n            var currAnalyzeResult_1;\n            _this.TRACE_INIT(\"analyzeTokenTypes\", function () {\n              currAnalyzeResult_1 = analyzeTokenTypes(currModDef, {\n                lineTerminatorCharacters: _this.config.lineTerminatorCharacters,\n                positionTracking: config.positionTracking,\n                ensureOptimizations: config.ensureOptimizations,\n                safeMode: config.safeMode,\n                tracer: _this.TRACE_INIT.bind(_this)\n              });\n            });\n            _this.patternIdxToConfig[currModName] = currAnalyzeResult_1.patternIdxToConfig;\n            _this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult_1.charCodeToPatternIdxToConfig;\n            _this.emptyGroups = merge(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);\n            _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;\n            _this.canModeBeOptimized[currModName] = currAnalyzeResult_1.canBeOptimized;\n          }\n        });\n      });\n      _this.defaultMode = actualDefinition.defaultMode;\n      if (!isEmpty(_this.lexerDefinitionErrors) && !_this.config.deferDefinitionErrorsHandling) {\n        var allErrMessages = map(_this.lexerDefinitionErrors, function (error) {\n          return error.message;\n        });\n        var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n        throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n      }\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(_this.lexerDefinitionWarning, function (warningDescriptor) {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n      _this.TRACE_INIT(\"Choosing sub-methods implementations\", function () {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          _this.chopInput = IDENTITY;\n          _this.match = _this.matchWithTest;\n        } else {\n          _this.updateLastIndex = NOOP;\n          _this.match = _this.matchWithExec;\n        }\n        if (hasOnlySingleMode) {\n          _this.handleModes = NOOP;\n        }\n        if (_this.trackStartLines === false) {\n          _this.computeNewColumn = IDENTITY;\n        }\n        if (_this.trackEndLines === false) {\n          _this.updateTokenEndLineColumnLocation = NOOP;\n        }\n        if (/full/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createFullToken;\n        } else if (/onlyStart/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createOffsetOnlyToken;\n        } else {\n          throw Error(\"Invalid <positionTracking> config option: \\\"\" + _this.config.positionTracking + \"\\\"\");\n        }\n        if (_this.hasCustom) {\n          _this.addToken = _this.addTokenUsingPush;\n          _this.handlePayload = _this.handlePayloadWithCustom;\n        } else {\n          _this.addToken = _this.addTokenUsingMemberAccess;\n          _this.handlePayload = _this.handlePayloadNoCustom;\n        }\n      });\n      _this.TRACE_INIT(\"Failed Optimization Warnings\", function () {\n        var unOptimizedModes = reduce(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {\n          if (canBeOptimized === false) {\n            cannotBeOptimized.push(modeName);\n          }\n          return cannotBeOptimized;\n        }, []);\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\"Lexer Modes: < \" + unOptimizedModes.join(\", \") + \" > cannot be optimized.\\n\" + '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' + \"\\t Or inspect the console log for details on how to resolve these issues.\");\n        }\n      });\n      _this.TRACE_INIT(\"clearRegExpParserCache\", function () {\n        clearRegExpParserCache();\n      });\n      _this.TRACE_INIT(\"toFastProperties\", function () {\n        toFastProperties(_this);\n      });\n    });\n  }\n  Lexer.prototype.tokenize = function (text, initialMode) {\n    if (initialMode === void 0) {\n      initialMode = this.defaultMode;\n    }\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      var allErrMessages = map(this.lexerDefinitionErrors, function (error) {\n        return error.message;\n      });\n      var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n      throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n    }\n    var lexResult = this.tokenizeInternal(text, initialMode);\n    return lexResult;\n  };\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  Lexer.prototype.tokenizeInternal = function (text, initialMode) {\n    var _this = this;\n    var i, j, matchAltImage, longerAltIdx, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n    var orgText = text;\n    var orgLength = orgText.length;\n    var offset = 0;\n    var matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    var guessedNumberOfTokens = this.hasCustom ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n    : Math.floor(text.length / 10);\n    var matchedTokens = new Array(guessedNumberOfTokens);\n    var errors = [];\n    var line = this.trackStartLines ? 1 : undefined;\n    var column = this.trackStartLines ? 1 : undefined;\n    var groups = cloneEmptyGroups(this.emptyGroups);\n    var trackLines = this.trackStartLines;\n    var lineTerminatorPattern = this.config.lineTerminatorsPattern;\n    var currModePatternsLength = 0;\n    var patternIdxToConfig = [];\n    var currCharCodeToPatternIdxToConfig = [];\n    var modeStack = [];\n    var emptyArray = [];\n    Object.freeze(emptyArray);\n    var getPossiblePatterns = undefined;\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n    function getPossiblePatternsOptimized(charCode) {\n      var optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n    var pop_mode = function (popToken) {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (modeStack.length === 1 &&\n      // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n      // So no error should occur.\n      popToken.tokenType.PUSH_MODE === undefined) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine !== undefined ? popToken.startLine : undefined,\n          column: popToken.startColumn !== undefined ? popToken.startColumn : undefined,\n          length: popToken.image.length,\n          message: msg_1\n        });\n      } else {\n        modeStack.pop();\n        var newMode = last(modeStack);\n        patternIdxToConfig = _this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n    function push_mode(newMode) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n      currModePatternsLength = patternIdxToConfig.length;\n      var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n    var currConfig;\n    while (offset < orgLength) {\n      matchedImage = null;\n      var nextCharCode = orgText.charCodeAt(offset);\n      var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      var chosenPatternsLength = chosenPatternIdxToConfig.length;\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        var currPattern = currConfig.pattern;\n        payload = null;\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        var singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = currPattern.exec(orgText, offset, matchedTokens, groups);\n          if (match !== null) {\n            matchedImage = match[0];\n            if (match.payload !== undefined) {\n              payload = match.payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern, offset);\n          matchedImage = this.match(currPattern, text, offset);\n        }\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAltIdx = currConfig.longerAlt;\n          if (longerAltIdx !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            var longerAltConfig = patternIdxToConfig[longerAltIdx];\n            var longerAltPattern = longerAltConfig.pattern;\n            altPayload = null;\n            // single Char can never be a longer alt so no need to test it.\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            if (longerAltConfig.isCustom === true) {\n              match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n              if (match !== null) {\n                matchAltImage = match[0];\n                if (match.payload !== undefined) {\n                  altPayload = match.payload;\n                }\n              } else {\n                matchAltImage = null;\n              }\n            } else {\n              this.updateLastIndex(longerAltPattern, offset);\n              matchAltImage = this.match(longerAltPattern, text, offset);\n            }\n            if (matchAltImage && matchAltImage.length > matchedImage.length) {\n              matchedImage = matchAltImage;\n              payload = altPayload;\n              currConfig = longerAltConfig;\n            }\n          }\n          break;\n        }\n      }\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n          this.handlePayload(newToken, payload);\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column, imageLength);\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          var numOfLTsInMatch = 0;\n          var foundTerminator = void 0;\n          var lastLTEndOffset = void 0;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n          if (numOfLTsInMatch !== 0) {\n            line = line + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset;\n            this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        var errorStartOffset = offset;\n        var errorLine = line;\n        var errorColumn = column;\n        var foundResyncPoint = false;\n        while (!foundResyncPoint && offset < orgLength) {\n          // drop chars until we succeed in matching something\n          droppedChar = orgText.charCodeAt(offset);\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            var currConfig_1 = patternIdxToConfig[j];\n            var currPattern = currConfig_1.pattern;\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            var singleCharCode = currConfig_1.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig_1.isCustom === true) {\n              foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n            } else {\n              this.updateLastIndex(currPattern, offset);\n              foundResyncPoint = currPattern.exec(text) !== null;\n            }\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n        errLength = offset - errorStartOffset;\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg\n        });\n      }\n    }\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors\n    };\n  };\n  Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      var pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  };\n  Lexer.prototype.chopInput = function (text, length) {\n    return text.substring(length);\n  };\n  Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {\n    regExp.lastIndex = newLastIndex;\n  };\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n    var lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  };\n  Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {\n    return oldColumn + imageLength;\n  };\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  Lexer.prototype.createTokenInstance = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return null;\n  };\n  Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n  Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      startLine: startLine,\n      startColumn: startColumn,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n  Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine: startLine,\n      endLine: startLine,\n      startColumn: startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {\n    return 666;\n  };\n  Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {\n    tokenVector.push(tokenToAdd);\n    return index;\n  };\n  Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  };\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  /* istanbul ignore next - place holder */\n  Lexer.prototype.handlePayload = function (token, payload) {};\n  Lexer.prototype.handlePayloadNoCustom = function (token, payload) {};\n  Lexer.prototype.handlePayloadWithCustom = function (token, payload) {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  };\n  /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */\n  Lexer.prototype.match = function (pattern, text, offset) {\n    return null;\n  };\n  Lexer.prototype.matchWithTest = function (pattern, text, offset) {\n    var found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  };\n  Lexer.prototype.matchWithExec = function (pattern, text) {\n    var regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : regExpArray;\n  };\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n      var _a = timer(phaseImpl),\n        time = _a.time,\n        value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      var traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n  Lexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" + \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n  Lexer.NA = /NOT_APPLICABLE/;\n  return Lexer;\n}();\nexport { Lexer };","map":{"version":3,"names":["analyzeTokenTypes","charCodeToOptimizedIndex","cloneEmptyGroups","DEFAULT_MODE","LineTerminatorOptimizedTester","performRuntimeChecks","performWarningRuntimeChecks","SUPPORT_STICKY","validatePatterns","cloneArr","cloneObj","forEach","IDENTITY","isArray","isEmpty","isUndefined","keys","last","map","merge","NOOP","PRINT_WARNING","reduce","reject","timer","toFastProperties","augmentTokenTypes","defaultLexerErrorProvider","clearRegExpParserCache","LexerDefinitionErrorType","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","positionTracking","lineTerminatorsPattern","lineTerminatorCharacters","ensureOptimizations","safeMode","errorMessageProvider","traceInitPerf","skipValidations","Object","freeze","Lexer","lexerDefinition","config","_this","lexerDefinitionErrors","lexerDefinitionWarning","patternIdxToConfig","charCodeToPatternIdxToConfig","modes","emptyGroups","undefined","trackStartLines","trackEndLines","hasCustom","canModeBeOptimized","Error","traceInitVal","traceInitMaxIdent","Infinity","traceInitIndent","TRACE_INIT","actualDefinition","hasOnlySingleMode","test","concat","currModeValue","currModeName","currTokType","allModeNames","currModDef","currModName","push","currAnalyzeResult_1","tracer","bind","canBeOptimized","defaultMode","allErrMessages","error","message","allErrMessagesString","join","warningDescriptor","chopInput","match","matchWithTest","updateLastIndex","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","prototype","tokenize","text","initialMode","lexResult","tokenizeInternal","i","j","matchAltImage","longerAltIdx","matchedImage","payload","altPayload","imageLength","group","tokType","newToken","errLength","droppedChar","msg","orgText","orgLength","length","offset","matchedTokensIndex","guessedNumberOfTokens","Math","floor","matchedTokens","Array","errors","line","column","groups","trackLines","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","charCode","optimizedCharIdx","possiblePatterns","pop_mode","popToken","tokenType","PUSH_MODE","msg_1","buildUnableToPopLexerModeMessage","startOffset","startLine","startColumn","image","pop","newMode","modeCanBeOptimized","push_mode","call","currConfig","nextCharCode","charCodeAt","chosenPatternIdxToConfig","chosenPatternsLength","currPattern","pattern","singleCharCode","short","isCustom","exec","longerAlt","longerAltConfig","longerAltPattern","tokenTypeIdx","canLineTerminator","numOfLTsInMatch","foundTerminator","lastLTEndOffset","lastIndex","errorStartOffset","errorLine","errorColumn","foundResyncPoint","currConfig_1","buildUnexpectedCharactersMessage","tokens","pushMode","substring","regExp","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","endLine","endColumn","oldColumn","args","_i","arguments","endOffset","tokenVector","index","tokenToAdd","token","found","regExpArray","phaseDesc","phaseImpl","indent","console","log","_a","time","value","traceMethod","warn","SKIPPED","NA"],"sources":["../../../src/scan/lexer_public.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}