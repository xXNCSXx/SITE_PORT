{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useState, useCallback, useMemo, createElement } from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, Vector2 } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterial\n});\nconst MIPMAP_NUM = 8;\nconst Reflector = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n      mixBlur = 0.0,\n      mixStrength = 0.5,\n      resolution = 256,\n      args = [1, 1],\n      minDepthThreshold = 0.9,\n      maxDepthThreshold = 1,\n      depthScale = 0,\n      depthToBlurRatioBias = 0.25,\n      mirror,\n      children,\n      debug = 0,\n      distortion = 1,\n      distortionMap\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, [\"mixBlur\", \"mixStrength\", \"resolution\", \"args\", \"minDepthThreshold\", \"maxDepthThreshold\", \"depthScale\", \"depthToBlurRatioBias\", \"mirror\", \"children\", \"debug\", \"distortion\", \"distortionMap\"]);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const meshRef = useRef(null);\n  const [reflectorPlane] = useState(() => new Plane());\n  const [normal] = useState(() => new Vector3());\n  const [reflectorWorldPosition] = useState(() => new Vector3());\n  const [cameraWorldPosition] = useState(() => new Vector3());\n  const [rotationMatrix] = useState(() => new Matrix4());\n  const [lookAtPosition] = useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = useState(() => new Vector4());\n  const [view] = useState(() => new Vector3());\n  const [target] = useState(() => new Vector3());\n  const [q] = useState(() => new Vector4());\n  const [textureMatrix] = useState(() => new Matrix4());\n  const [virtualCamera] = useState(() => new PerspectiveCamera());\n  const [renderTargets] = useState(() => {\n    const renderTargets = [];\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    for (let i = 0; i < MIPMAP_NUM; i++) {\n      const res = Math.max(8, Math.round(resolution / Math.pow(2, i)));\n      const renderTarget = new WebGLRenderTarget(res, res, pars);\n      renderTarget.texture.generateMipmaps = false;\n      renderTargets.push(renderTarget);\n    }\n    return renderTargets;\n  });\n  const beforeRender = useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera.far, camera.matrixWorld, camera.projectionMatrix, cameraWorldPosition, clipPlane, lookAtPosition, normal, q, reflectorPlane, reflectorWorldPosition, rotationMatrix, target, textureMatrix, view, virtualCamera]);\n  const [fbo1, reflectorProps] = useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    if (depthScale > 0) {\n      fbo1.depthBuffer = true;\n      fbo1.depthTexture = new DepthTexture(resolution, resolution);\n      fbo1.depthTexture.format = DepthFormat;\n      fbo1.depthTexture.type = UnsignedShortType;\n    }\n    const mipmaps = renderTargets.reduce((acc, fbo, index) => {\n      acc[\"u_mipmap_\" + index] = fbo.texture;\n      acc[\"u_mipmap_res_\" + index] = new Vector2(fbo.width, fbo.height);\n      return acc;\n    }, {});\n    const reflectorProps = _extends({\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      debug,\n      distortion,\n      distortionMap,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': !!distortionMap ? '' : undefined\n    }, mipmaps);\n    return [fbo1, reflectorProps];\n  }, [gl, textureMatrix, resolution, mirror, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, renderTargets]);\n  useFrame(() => {\n    if (!(meshRef == null ? void 0 : meshRef.current)) return;\n    meshRef.current.visible = false;\n    beforeRender();\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    gl.render(scene, virtualCamera);\n    if (mixBlur !== 0) {\n      renderTargets.forEach(fbo => {\n        gl.setRenderTarget(fbo);\n        gl.state.buffers.depth.setMask(true);\n        gl.render(scene, virtualCamera);\n      });\n    }\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/createElement(\"meshReflectorMaterial\", reflectorProps));\n});\nexport { Reflector };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","forwardRef","useRef","useState","useCallback","useMemo","createElement","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","RGBFormat","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","Vector2","extend","useThree","useFrame","mergeRefs","MeshReflectorMaterial","MIPMAP_NUM","Reflector","_ref","ref","mixBlur","mixStrength","resolution","args","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","children","debug","distortion","distortionMap","props","gl","camera","scene","meshRef","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","renderTargets","pars","minFilter","magFilter","format","encoding","outputEncoding","i","res","Math","max","round","pow","renderTarget","texture","generateMipmaps","push","beforeRender","setFromMatrixPosition","current","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","sign","elements","w","multiplyScalar","fbo1","reflectorProps","parameters","depthBuffer","depthTexture","type","mipmaps","reduce","acc","fbo","index","width","height","tDiffuse","tDepth","undefined","visible","setRenderTarget","state","buffers","depth","setMask","render","forEach"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/@react-three/drei/core/Reflector.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useState, useCallback, useMemo, createElement } from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, Vector2 } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterial\n});\nconst MIPMAP_NUM = 8;\nconst Reflector = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    mixBlur = 0.0,\n    mixStrength = 0.5,\n    resolution = 256,\n    args = [1, 1],\n    minDepthThreshold = 0.9,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25,\n    mirror,\n    children,\n    debug = 0,\n    distortion = 1,\n    distortionMap\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"mixBlur\", \"mixStrength\", \"resolution\", \"args\", \"minDepthThreshold\", \"maxDepthThreshold\", \"depthScale\", \"depthToBlurRatioBias\", \"mirror\", \"children\", \"debug\", \"distortion\", \"distortionMap\"]);\n\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const meshRef = useRef(null);\n  const [reflectorPlane] = useState(() => new Plane());\n  const [normal] = useState(() => new Vector3());\n  const [reflectorWorldPosition] = useState(() => new Vector3());\n  const [cameraWorldPosition] = useState(() => new Vector3());\n  const [rotationMatrix] = useState(() => new Matrix4());\n  const [lookAtPosition] = useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = useState(() => new Vector4());\n  const [view] = useState(() => new Vector3());\n  const [target] = useState(() => new Vector3());\n  const [q] = useState(() => new Vector4());\n  const [textureMatrix] = useState(() => new Matrix4());\n  const [virtualCamera] = useState(() => new PerspectiveCamera());\n  const [renderTargets] = useState(() => {\n    const renderTargets = [];\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n\n    for (let i = 0; i < MIPMAP_NUM; i++) {\n      const res = Math.max(8, Math.round(resolution / Math.pow(2, i)));\n      const renderTarget = new WebGLRenderTarget(res, res, pars);\n      renderTarget.texture.generateMipmaps = false;\n      renderTargets.push(renderTarget);\n    }\n\n    return renderTargets;\n  });\n  const beforeRender = useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera.far, camera.matrixWorld, camera.projectionMatrix, cameraWorldPosition, clipPlane, lookAtPosition, normal, q, reflectorPlane, reflectorWorldPosition, rotationMatrix, target, textureMatrix, view, virtualCamera]);\n  const [fbo1, reflectorProps] = useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n\n    if (depthScale > 0) {\n      fbo1.depthBuffer = true;\n      fbo1.depthTexture = new DepthTexture(resolution, resolution);\n      fbo1.depthTexture.format = DepthFormat;\n      fbo1.depthTexture.type = UnsignedShortType;\n    }\n\n    const mipmaps = renderTargets.reduce((acc, fbo, index) => {\n      acc[\"u_mipmap_\" + index] = fbo.texture;\n      acc[\"u_mipmap_res_\" + index] = new Vector2(fbo.width, fbo.height);\n      return acc;\n    }, {});\n\n    const reflectorProps = _extends({\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      debug,\n      distortion,\n      distortionMap,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': !!distortionMap ? '' : undefined\n    }, mipmaps);\n\n    return [fbo1, reflectorProps];\n  }, [gl, textureMatrix, resolution, mirror, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, renderTargets]);\n  useFrame(() => {\n    if (!(meshRef == null ? void 0 : meshRef.current)) return;\n    meshRef.current.visible = false;\n    beforeRender();\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    gl.render(scene, virtualCamera);\n\n    if (mixBlur !== 0) {\n      renderTargets.forEach(fbo => {\n        gl.setRenderTarget(fbo);\n        gl.state.buffers.depth.setMask(true);\n        gl.render(scene, virtualCamera);\n      });\n    }\n\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/createElement(\"meshReflectorMaterial\", reflectorProps));\n});\n\nexport { Reflector };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}