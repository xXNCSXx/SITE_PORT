{"ast":null,"code":"import { DepthTexture, UnsignedShortType, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, FloatType, RepeatWrapping } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nvar SSAOPass = function (scene, camera, width, height) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function () {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function (renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function () {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function () {\n    var width = 4,\n      height = 4;\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n    for (let i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  },\n  overrideVisibility: function () {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function () {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":{"version":3,"names":["DepthTexture","UnsignedShortType","WebGLRenderTarget","LinearFilter","RGBAFormat","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","CustomBlending","Vector3","MathUtils","DataTexture","FloatType","RepeatWrapping","FullScreenQuad","Pass","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","scene","camera","width","height","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","type","beautyRenderTarget","minFilter","magFilter","format","normalRenderTarget","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","prototype","create","constructor","dispose","render","renderer","writeBuffer","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","stride","noise","noise3d","wrapS","wrapT","cache","traverse","object","visible","isPoints","isLine","get"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["import { DepthTexture, UnsignedShortType, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, FloatType, RepeatWrapping } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSAOPass = function (scene, camera, width, height) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function () {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function (renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function () {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function () {\n    var width = 4,\n        height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n\n    for (let i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  },\n  overrideVisibility: function () {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function () {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\n\nexport { SSAOPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}