{"ast":null,"code":"import { Loader, UnsignedByteType, CubeTexture, HalfFloatType, LinearEncoding, RGBFormat, LinearFilter, FloatType, RGBEEncoding, RGBAFormat, NearestFilter, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\nvar HDRCubeTextureLoader = function (manager) {\n  Loader.call(this, manager);\n  this.hdrLoader = new RGBELoader();\n  this.type = UnsignedByteType;\n};\nHDRCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: HDRCubeTextureLoader,\n  load: function (urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    var texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    var scope = this;\n    var loaded = 0;\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        var texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n        if (texData.data !== undefined) {\n          var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  },\n  setDataType: function (value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n});\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["Loader","UnsignedByteType","CubeTexture","HalfFloatType","LinearEncoding","RGBFormat","LinearFilter","FloatType","RGBEEncoding","RGBAFormat","NearestFilter","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","manager","call","hdrLoader","type","prototype","Object","assign","create","constructor","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","format","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","undefined","dataTexture","width","height","images","needsUpdate","length","value"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import { Loader, UnsignedByteType, CubeTexture, HalfFloatType, LinearEncoding, RGBFormat, LinearFilter, FloatType, RGBEEncoding, RGBAFormat, NearestFilter, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nvar HDRCubeTextureLoader = function (manager) {\n  Loader.call(this, manager);\n  this.hdrLoader = new RGBELoader();\n  this.type = UnsignedByteType;\n};\n\nHDRCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: HDRCubeTextureLoader,\n  load: function (urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    var texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    var scope = this;\n    var loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        var texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  },\n  setDataType: function (value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n});\n\nexport { HDRCubeTextureLoader };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,gBAAgB,EAAEC,WAAW,EAAEC,aAAa,EAAEC,cAAc,EAAEC,SAAS,EAAEC,YAAY,EAAEC,SAAS,EAAEC,YAAY,EAAEC,UAAU,EAAEC,aAAa,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAClM,SAASC,UAAU,QAAQ,iBAAiB;AAE5C,IAAIC,oBAAoB,GAAG,SAAAA,CAAUC,OAAO,EAAE;EAC5Cf,MAAM,CAACgB,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;EAC1B,IAAI,CAACE,SAAS,GAAG,IAAIJ,UAAU,CAAC,CAAC;EACjC,IAAI,CAACK,IAAI,GAAGjB,gBAAgB;AAC9B,CAAC;AAEDa,oBAAoB,CAACK,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,MAAM,CAACtB,MAAM,CAACmB,SAAS,CAAC,EAAE;EAC9EI,WAAW,EAAET,oBAAoB;EACjCU,IAAI,EAAE,SAAAA,CAAUC,IAAI,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;IACjD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;MACxBM,OAAO,CAACC,IAAI,CAAC,+EAA+E,CAAC;MAC7F,IAAI,CAACC,WAAW,CAACR,IAAI,CAAC;MACtBA,IAAI,GAAGC,MAAM;MACbA,MAAM,GAAGC,UAAU;MACnBA,UAAU,GAAGC,OAAO;MACpBA,OAAO,GAAGM,SAAS,CAAC,CAAC,CAAC;IACxB;IAEA,IAAIC,OAAO,GAAG,IAAIjC,WAAW,CAAC,CAAC;IAC/BiC,OAAO,CAACjB,IAAI,GAAG,IAAI,CAACA,IAAI;IAExB,QAAQiB,OAAO,CAACjB,IAAI;MAClB,KAAKjB,gBAAgB;QACnBkC,OAAO,CAACC,QAAQ,GAAG5B,YAAY;QAC/B2B,OAAO,CAACE,MAAM,GAAG5B,UAAU;QAC3B0B,OAAO,CAACG,SAAS,GAAG5B,aAAa;QACjCyB,OAAO,CAACI,SAAS,GAAG7B,aAAa;QACjCyB,OAAO,CAACK,eAAe,GAAG,KAAK;QAC/B;MAEF,KAAKjC,SAAS;QACZ4B,OAAO,CAACC,QAAQ,GAAGhC,cAAc;QACjC+B,OAAO,CAACE,MAAM,GAAGhC,SAAS;QAC1B8B,OAAO,CAACG,SAAS,GAAGhC,YAAY;QAChC6B,OAAO,CAACI,SAAS,GAAGjC,YAAY;QAChC6B,OAAO,CAACK,eAAe,GAAG,KAAK;QAC/B;MAEF,KAAKrC,aAAa;QAChBgC,OAAO,CAACC,QAAQ,GAAGhC,cAAc;QACjC+B,OAAO,CAACE,MAAM,GAAGhC,SAAS;QAC1B8B,OAAO,CAACG,SAAS,GAAGhC,YAAY;QAChC6B,OAAO,CAACI,SAAS,GAAGjC,YAAY;QAChC6B,OAAO,CAACK,eAAe,GAAG,KAAK;QAC/B;IACJ;IAEA,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIC,MAAM,GAAG,CAAC;IAEd,SAASC,WAAWA,CAACC,CAAC,EAAElB,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;MACnD,IAAIjB,UAAU,CAAC8B,KAAK,CAAC1B,OAAO,CAAC,CAAC8B,OAAO,CAACJ,KAAK,CAACK,IAAI,CAAC,CAACC,eAAe,CAAC,aAAa,CAAC,CAACC,kBAAkB,CAACP,KAAK,CAACQ,eAAe,CAAC,CAACzB,IAAI,CAACC,IAAI,CAACmB,CAAC,CAAC,EAAE,UAAUM,MAAM,EAAE;QACzJR,MAAM,EAAE;QACR,IAAIS,OAAO,GAAGV,KAAK,CAACxB,SAAS,CAACmC,KAAK,CAACF,MAAM,CAAC;QAC3C,IAAI,CAACC,OAAO,EAAE;QAEd,IAAIA,OAAO,CAACE,IAAI,KAAKC,SAAS,EAAE;UAC9B,IAAIC,WAAW,GAAG,IAAI3C,WAAW,CAACuC,OAAO,CAACE,IAAI,EAAEF,OAAO,CAACK,KAAK,EAAEL,OAAO,CAACM,MAAM,CAAC;UAC9EF,WAAW,CAACrC,IAAI,GAAGiB,OAAO,CAACjB,IAAI;UAC/BqC,WAAW,CAACnB,QAAQ,GAAGD,OAAO,CAACC,QAAQ;UACvCmB,WAAW,CAAClB,MAAM,GAAGF,OAAO,CAACE,MAAM;UACnCkB,WAAW,CAACjB,SAAS,GAAGH,OAAO,CAACG,SAAS;UACzCiB,WAAW,CAAChB,SAAS,GAAGJ,OAAO,CAACI,SAAS;UACzCgB,WAAW,CAACf,eAAe,GAAGL,OAAO,CAACK,eAAe;UACrDL,OAAO,CAACuB,MAAM,CAACd,CAAC,CAAC,GAAGW,WAAW;QACjC;QAEA,IAAIb,MAAM,KAAK,CAAC,EAAE;UAChBP,OAAO,CAACwB,WAAW,GAAG,IAAI;UAC1B,IAAIjC,MAAM,EAAEA,MAAM,CAACS,OAAO,CAAC;QAC7B;MACF,CAAC,EAAER,UAAU,EAAEC,OAAO,CAAC;IACzB;IAEA,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,IAAI,CAACmC,MAAM,EAAEhB,CAAC,EAAE,EAAE;MACpCD,WAAW,CAACC,CAAC,EAAElB,MAAM,EAAEC,UAAU,EAAEC,OAAO,CAAC;IAC7C;IAEA,OAAOO,OAAO;EAChB,CAAC;EACDF,WAAW,EAAE,SAAAA,CAAU4B,KAAK,EAAE;IAC5B,IAAI,CAAC3C,IAAI,GAAG2C,KAAK;IACjB,IAAI,CAAC5C,SAAS,CAACgB,WAAW,CAAC4B,KAAK,CAAC;IACjC,OAAO,IAAI;EACb;AACF,CAAC,CAAC;AAEF,SAAS/C,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module"}