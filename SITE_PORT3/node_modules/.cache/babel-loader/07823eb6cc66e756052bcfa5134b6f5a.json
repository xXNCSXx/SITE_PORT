{"ast":null,"code":"import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from 'three';\n\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nvar PVRLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\nPVRLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: PVRLoader,\n  parse: function (buffer, loadMipmaps) {\n    var headerLengthInt = 13;\n    var header = new Uint32Array(buffer, 0, headerLengthInt);\n    var pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps\n    };\n    if (header[0] === 0x03525650) {\n      // PVR v3\n      return PVRLoader._parseV3(pvrDatas);\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n      return PVRLoader._parseV2(pvrDatas);\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.');\n    }\n  }\n});\nPVRLoader._parseV3 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n    pixelFormat = header[2],\n    height = header[6],\n    width = header[7],\n    // numSurfs = header[ 9 ],\n    numFaces = header[10],\n    numMipmaps = header[11];\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return PVRLoader._extract(pvrDatas);\n};\nPVRLoader._parseV2 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n    height = header[1],\n    width = header[2],\n    numMipmaps = header[3],\n    flags = header[4],\n    // dataLength = header[ 5 ],\n    // bpp =  header[ 6 ],\n    // bitmaskRed = header[ 7 ],\n    // bitmaskGreen = header[ 8 ],\n    // bitmaskBlue = header[ 9 ],\n    bitmaskAlpha = header[10],\n    // pvrTag = header[ 11 ],\n    numSurfs = header[12];\n  var TYPE_MASK = 0xff;\n  var PVRTC_2 = 24,\n    PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n  var _hasAlpha = bitmaskAlpha > 0;\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1; // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n\n  pvrDatas.isCubemap = numSurfs === 6;\n  return PVRLoader._extract(pvrDatas);\n};\nPVRLoader._extract = function (pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n    bpp = pvrDatas.bpp,\n    numSurfs = pvrDatas.numSurfaces,\n    dataSize = 0,\n    blockSize = 0,\n    blockWidth = 0,\n    blockHeight = 0,\n    widthBlocks = 0,\n    heightBlocks = 0;\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n      sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight; // Clamp to minimum number of blocks\n\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n    mipLevel++;\n  }\n  return pvr;\n};\nexport { PVRLoader };","map":{"version":3,"names":["CompressedTextureLoader","RGBA_PVRTC_4BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_PVRTC_2BPPV1_Format","PVRLoader","manager","call","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","headerLengthInt","header","Uint32Array","pvrDatas","_parseV3","_parseV2","console","error","bpp","format","metaLen","pixelFormat","height","width","numFaces","numMipmaps","dataPtr","numSurfaces","isCubemap","_extract","headerLength","flags","bitmaskAlpha","numSurfs","TYPE_MASK","PVRTC_2","PVRTC_4","formatFlags","_hasAlpha","pvr","mipmaps","mipmapCount","dataOffset","dataSize","blockSize","blockWidth","blockHeight","widthBlocks","heightBlocks","length","mipLevel","sWidth","sHeight","surfIndex","byteArray","Uint8Array","mipmap","data"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/PVRLoader.js"],"sourcesContent":["import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from 'three';\n\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nvar PVRLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nPVRLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: PVRLoader,\n  parse: function (buffer, loadMipmaps) {\n    var headerLengthInt = 13;\n    var header = new Uint32Array(buffer, 0, headerLengthInt);\n    var pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps\n    };\n\n    if (header[0] === 0x03525650) {\n      // PVR v3\n      return PVRLoader._parseV3(pvrDatas);\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n      return PVRLoader._parseV2(pvrDatas);\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.');\n    }\n  }\n});\n\nPVRLoader._parseV3 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n      pixelFormat = header[2],\n      height = header[6],\n      width = header[7],\n      // numSurfs = header[ 9 ],\n  numFaces = header[10],\n      numMipmaps = header[11];\n\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._parseV2 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n      height = header[1],\n      width = header[2],\n      numMipmaps = header[3],\n      flags = header[4],\n      // dataLength = header[ 5 ],\n  // bpp =  header[ 6 ],\n  // bitmaskRed = header[ 7 ],\n  // bitmaskGreen = header[ 8 ],\n  // bitmaskBlue = header[ 9 ],\n  bitmaskAlpha = header[10],\n      // pvrTag = header[ 11 ],\n  numSurfs = header[12];\n  var TYPE_MASK = 0xff;\n  var PVRTC_2 = 24,\n      PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n\n  var _hasAlpha = bitmaskAlpha > 0;\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1; // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n\n  pvrDatas.isCubemap = numSurfs === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._extract = function (pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n      bpp = pvrDatas.bpp,\n      numSurfs = pvrDatas.numSurfaces,\n      dataSize = 0,\n      blockSize = 0,\n      blockWidth = 0,\n      blockHeight = 0,\n      widthBlocks = 0,\n      heightBlocks = 0;\n\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n        sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight; // Clamp to minimum number of blocks\n\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n\n    mipLevel++;\n  }\n\n  return pvr;\n};\n\nexport { PVRLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}