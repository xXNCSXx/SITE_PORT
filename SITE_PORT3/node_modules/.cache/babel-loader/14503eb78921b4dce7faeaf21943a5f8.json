{"ast":null,"code":"import { cloneArr, compact, contains, difference, flatten, forEach, has, isArray, isEmpty, map } from \"../utils/utils\";\nexport function tokenStructuredMatcher(tokInstance, tokConstructor) {\n  var instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n  }\n}\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(token, tokType) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\nexport var tokenShortNameIdx = 1;\nexport var tokenIdxToClass = {};\nexport function augmentTokenTypes(tokenTypes) {\n  // collect the parent Token Types as well.\n  var tokenTypesAndParents = expandCategories(tokenTypes);\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n  forEach(tokenTypesAndParents, function (tokType) {\n    tokType.isParent = tokType.categoryMatches.length > 0;\n  });\n}\nexport function expandCategories(tokenTypes) {\n  var result = cloneArr(tokenTypes);\n  var categories = tokenTypes;\n  var searching = true;\n  while (searching) {\n    categories = compact(flatten(map(categories, function (currTokType) {\n      return currTokType.CATEGORIES;\n    })));\n    var newCategories = difference(categories, result);\n    result = result.concat(newCategories);\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\nexport function assignTokenDefaultProps(tokenTypes) {\n  forEach(tokenTypes, function (currTokType) {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      currTokType.tokenTypeIdx = tokenShortNameIdx++;\n    }\n    // CATEGORIES? : TokenType | TokenType[]\n    if (hasCategoriesProperty(currTokType) && !isArray(currTokType.CATEGORIES)\n    // &&\n    // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES];\n    }\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\nexport function assignCategoriesTokensProp(tokenTypes) {\n  forEach(tokenTypes, function (currTokType) {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap, function (val, key) {\n      currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);\n    });\n  });\n}\nexport function assignCategoriesMapProp(tokenTypes) {\n  forEach(tokenTypes, function (currTokType) {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\nexport function singleAssignCategoriesToksMap(path, nextNode) {\n  forEach(path, function (pathNode) {\n    nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n  });\n  forEach(nextNode.CATEGORIES, function (nextCategory) {\n    var newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!contains(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\nexport function hasShortKeyProperty(tokType) {\n  return has(tokType, \"tokenTypeIdx\");\n}\nexport function hasCategoriesProperty(tokType) {\n  return has(tokType, \"CATEGORIES\");\n}\nexport function hasExtendingTokensTypesProperty(tokType) {\n  return has(tokType, \"categoryMatches\");\n}\nexport function hasExtendingTokensTypesMapProperty(tokType) {\n  return has(tokType, \"categoryMatchesMap\");\n}\nexport function isTokenType(tokType) {\n  return has(tokType, \"tokenTypeIdx\");\n}","map":{"version":3,"names":["cloneArr","compact","contains","difference","flatten","forEach","has","isArray","isEmpty","map","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","tokenTypeIdx","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","token","tokType","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypes","tokenTypesAndParents","expandCategories","assignTokenDefaultProps","assignCategoriesMapProp","assignCategoriesTokensProp","categoryMatches","length","result","categories","searching","currTokType","CATEGORIES","newCategories","concat","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesProperty","hasExtendingTokensTypesMapProperty","val","key","push","singleAssignCategoriesToksMap","path","nextNode","pathNode","nextCategory","newPath","isTokenType"],"sources":["../../../src/scan/tokens.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}