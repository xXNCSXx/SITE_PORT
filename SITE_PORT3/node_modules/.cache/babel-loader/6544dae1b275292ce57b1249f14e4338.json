{"ast":null,"code":"import { CompressedTextureLoader } from 'three';\n\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nvar KTXLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\nKTXLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: KTXLoader,\n  parse: function (buffer, loadMipmaps) {\n    var ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n});\nvar KhronosTextureContainer = function () {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  function KhronosTextureContainer(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */) {\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n    this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n  } // return mipmaps for js\n\n  KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {\n    var mipmaps = []; // initialize width & height for level 1\n\n    var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n    var width = this.pixelWidth;\n    var height = this.pixelHeight;\n    var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n    for (let level = 0; level < mipmapCount; level++) {\n      var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; // size of the image + 4 for the imageSize field\n\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          data: byteArray,\n          width: width,\n          height: height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n    return mipmaps;\n  };\n  KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n  // load types\n\n  KhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\n  KhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\n  KhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\n  KhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n  return KhronosTextureContainer;\n}();\nexport { KTXLoader };","map":{"version":3,"names":["CompressedTextureLoader","KTXLoader","manager","call","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","arrayBuffer","facesExpected","identifier","Uint8Array","console","error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","endianness","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","warn","Math","max","loadType","COMPRESSED_2D","dataOffset","HEADER_LEN","level","imageSize","Int32Array","face","byteArray","push","data","COMPRESSED_3D","TEX_2D","TEX_3D"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/KTXLoader.js"],"sourcesContent":["import { CompressedTextureLoader } from 'three';\n\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nvar KTXLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nKTXLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: KTXLoader,\n  parse: function (buffer, loadMipmaps) {\n    var ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n});\n\nvar KhronosTextureContainer = function () {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  function KhronosTextureContainer(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */\n  ) {\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n  } // return mipmaps for js\n\n\n  KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {\n    var mipmaps = []; // initialize width & height for level 1\n\n    var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n    var width = this.pixelWidth;\n    var height = this.pixelHeight;\n    var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (let level = 0; level < mipmapCount; level++) {\n      var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; // size of the image + 4 for the imageSize field\n\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          data: byteArray,\n          width: width,\n          height: height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n\n    return mipmaps;\n  };\n\n  KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n  // load types\n\n  KhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\n  KhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\n  KhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\n  KhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n  return KhronosTextureContainer;\n}();\n\nexport { KTXLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}