{"ast":null,"code":"class VRButton {\n  static createButton(renderer, options) {\n    if (options) {\n      console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\n    }\n    const button = document.createElement('button');\n    function showEnterVR() /*device*/\n    {\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n      function onSessionEnded() /*event*/\n      {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const sessionInit = {\n            optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n          };\n          navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n}\nexport { VRButton };","map":{"version":3,"names":["VRButton","createButton","renderer","options","console","error","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","sessionInit","optionalFeatures","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/webxr/VRButton.js"],"sourcesContent":["class VRButton {\n  static createButton(renderer, options) {\n    if (options) {\n      console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\n    }\n\n    const button = document.createElement('button');\n\n    function showEnterVR()\n    /*device*/\n    {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function onSessionEnded()\n      /*event*/\n      {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const sessionInit = {\n            optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n          };\n          navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n}\n\nexport { VRButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}