{"ast":null,"code":"import { MathUtils } from 'three';\nimport { ShaderPass } from '../../postprocessing/ShaderPass.js';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { ScreenNode } from '../inputs/ScreenNode.js';\nfunction NodePass() {\n  ShaderPass.call(this);\n  this.name = '';\n  this.uuid = MathUtils.generateUUID();\n  this.userData = {};\n  this.textureID = 'renderTexture';\n  this.input = new ScreenNode();\n  this.material = new NodeMaterial();\n  this.needsUpdate = true;\n}\nNodePass.prototype = Object.create(ShaderPass.prototype);\nNodePass.prototype.constructor = NodePass;\nNodePass.prototype.render = function () {\n  if (this.needsUpdate) {\n    this.material.dispose();\n    this.material.fragment.value = this.input;\n    this.needsUpdate = false;\n  }\n  this.uniforms = this.material.uniforms;\n  ShaderPass.prototype.render.apply(this, arguments);\n};\nNodePass.prototype.copy = function (source) {\n  this.input = source.input;\n  return this;\n};\nNodePass.prototype.toJSON = function (meta) {\n  var isRootObject = meta === undefined || typeof meta === 'string';\n  if (isRootObject) {\n    meta = {\n      nodes: {}\n    };\n  }\n  if (meta && !meta.passes) meta.passes = {};\n  if (!meta.passes[this.uuid]) {\n    var data = {};\n    data.uuid = this.uuid;\n    data.type = 'NodePass';\n    meta.passes[this.uuid] = data;\n    if (this.name !== '') data.name = this.name;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n    data.input = this.input.toJSON(meta).uuid;\n  }\n  meta.pass = this.uuid;\n  return meta;\n};\nexport { NodePass };","map":{"version":3,"names":["MathUtils","ShaderPass","NodeMaterial","ScreenNode","NodePass","call","name","uuid","generateUUID","userData","textureID","input","material","needsUpdate","prototype","Object","create","constructor","render","dispose","fragment","value","uniforms","apply","arguments","copy","source","toJSON","meta","isRootObject","undefined","nodes","passes","data","type","JSON","stringify","pass"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/nodes/postprocessing/NodePass.js"],"sourcesContent":["import { MathUtils } from 'three';\nimport { ShaderPass } from '../../postprocessing/ShaderPass.js';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { ScreenNode } from '../inputs/ScreenNode.js';\n\nfunction NodePass() {\n  ShaderPass.call(this);\n  this.name = '';\n  this.uuid = MathUtils.generateUUID();\n  this.userData = {};\n  this.textureID = 'renderTexture';\n  this.input = new ScreenNode();\n  this.material = new NodeMaterial();\n  this.needsUpdate = true;\n}\n\nNodePass.prototype = Object.create(ShaderPass.prototype);\nNodePass.prototype.constructor = NodePass;\n\nNodePass.prototype.render = function () {\n  if (this.needsUpdate) {\n    this.material.dispose();\n    this.material.fragment.value = this.input;\n    this.needsUpdate = false;\n  }\n\n  this.uniforms = this.material.uniforms;\n  ShaderPass.prototype.render.apply(this, arguments);\n};\n\nNodePass.prototype.copy = function (source) {\n  this.input = source.input;\n  return this;\n};\n\nNodePass.prototype.toJSON = function (meta) {\n  var isRootObject = meta === undefined || typeof meta === 'string';\n\n  if (isRootObject) {\n    meta = {\n      nodes: {}\n    };\n  }\n\n  if (meta && !meta.passes) meta.passes = {};\n\n  if (!meta.passes[this.uuid]) {\n    var data = {};\n    data.uuid = this.uuid;\n    data.type = 'NodePass';\n    meta.passes[this.uuid] = data;\n    if (this.name !== '') data.name = this.name;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n    data.input = this.input.toJSON(meta).uuid;\n  }\n\n  meta.pass = this.uuid;\n  return meta;\n};\n\nexport { NodePass };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,oCAAoC;AAC/D,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,UAAU,QAAQ,yBAAyB;AAEpD,SAASC,QAAQA,CAAA,EAAG;EAClBH,UAAU,CAACI,IAAI,CAAC,IAAI,CAAC;EACrB,IAAI,CAACC,IAAI,GAAG,EAAE;EACd,IAAI,CAACC,IAAI,GAAGP,SAAS,CAACQ,YAAY,CAAC,CAAC;EACpC,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EAClB,IAAI,CAACC,SAAS,GAAG,eAAe;EAChC,IAAI,CAACC,KAAK,GAAG,IAAIR,UAAU,CAAC,CAAC;EAC7B,IAAI,CAACS,QAAQ,GAAG,IAAIV,YAAY,CAAC,CAAC;EAClC,IAAI,CAACW,WAAW,GAAG,IAAI;AACzB;AAEAT,QAAQ,CAACU,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACf,UAAU,CAACa,SAAS,CAAC;AACxDV,QAAQ,CAACU,SAAS,CAACG,WAAW,GAAGb,QAAQ;AAEzCA,QAAQ,CAACU,SAAS,CAACI,MAAM,GAAG,YAAY;EACtC,IAAI,IAAI,CAACL,WAAW,EAAE;IACpB,IAAI,CAACD,QAAQ,CAACO,OAAO,CAAC,CAAC;IACvB,IAAI,CAACP,QAAQ,CAACQ,QAAQ,CAACC,KAAK,GAAG,IAAI,CAACV,KAAK;IACzC,IAAI,CAACE,WAAW,GAAG,KAAK;EAC1B;EAEA,IAAI,CAACS,QAAQ,GAAG,IAAI,CAACV,QAAQ,CAACU,QAAQ;EACtCrB,UAAU,CAACa,SAAS,CAACI,MAAM,CAACK,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AACpD,CAAC;AAEDpB,QAAQ,CAACU,SAAS,CAACW,IAAI,GAAG,UAAUC,MAAM,EAAE;EAC1C,IAAI,CAACf,KAAK,GAAGe,MAAM,CAACf,KAAK;EACzB,OAAO,IAAI;AACb,CAAC;AAEDP,QAAQ,CAACU,SAAS,CAACa,MAAM,GAAG,UAAUC,IAAI,EAAE;EAC1C,IAAIC,YAAY,GAAGD,IAAI,KAAKE,SAAS,IAAI,OAAOF,IAAI,KAAK,QAAQ;EAEjE,IAAIC,YAAY,EAAE;IAChBD,IAAI,GAAG;MACLG,KAAK,EAAE,CAAC;IACV,CAAC;EACH;EAEA,IAAIH,IAAI,IAAI,CAACA,IAAI,CAACI,MAAM,EAAEJ,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC;EAE1C,IAAI,CAACJ,IAAI,CAACI,MAAM,CAAC,IAAI,CAACzB,IAAI,CAAC,EAAE;IAC3B,IAAI0B,IAAI,GAAG,CAAC,CAAC;IACbA,IAAI,CAAC1B,IAAI,GAAG,IAAI,CAACA,IAAI;IACrB0B,IAAI,CAACC,IAAI,GAAG,UAAU;IACtBN,IAAI,CAACI,MAAM,CAAC,IAAI,CAACzB,IAAI,CAAC,GAAG0B,IAAI;IAC7B,IAAI,IAAI,CAAC3B,IAAI,KAAK,EAAE,EAAE2B,IAAI,CAAC3B,IAAI,GAAG,IAAI,CAACA,IAAI;IAC3C,IAAI6B,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC3B,QAAQ,CAAC,KAAK,IAAI,EAAEwB,IAAI,CAACxB,QAAQ,GAAG,IAAI,CAACA,QAAQ;IACzEwB,IAAI,CAACtB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACgB,MAAM,CAACC,IAAI,CAAC,CAACrB,IAAI;EAC3C;EAEAqB,IAAI,CAACS,IAAI,GAAG,IAAI,CAAC9B,IAAI;EACrB,OAAOqB,IAAI;AACb,CAAC;AAED,SAASxB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}