{"ast":null,"code":"import { Loader, FileLoader, LineBasicMaterial, Group, Euler, BufferGeometry, Float32BufferAttribute, LineSegments } from 'three';\n\n/**\n * GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n *\n * Gcode files are composed by commands used by machines to create objects.\n *\n * @class GCodeLoader\n * @param {Manager} manager Loading manager.\n */\n\nvar GCodeLoader = function (manager) {\n  Loader.call(this, manager);\n  this.splitLayer = false;\n};\nGCodeLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: GCodeLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    var state = {\n      x: 0,\n      y: 0,\n      z: 0,\n      e: 0,\n      f: 0,\n      extruding: false,\n      relative: false\n    };\n    var layers = [];\n    var currentLayer = undefined;\n    var pathMaterial = new LineBasicMaterial({\n      color: 0xff0000\n    });\n    pathMaterial.name = 'path';\n    var extrudingMaterial = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    extrudingMaterial.name = 'extruded';\n    function newLayer(line) {\n      currentLayer = {\n        vertex: [],\n        pathVertex: [],\n        z: line.z\n      };\n      layers.push(currentLayer);\n    } //Create lie segment between p1 and p2\n\n    function addSegment(p1, p2) {\n      if (currentLayer === undefined) {\n        newLayer(p1);\n      }\n      if (line.extruding) {\n        currentLayer.vertex.push(p1.x, p1.y, p1.z);\n        currentLayer.vertex.push(p2.x, p2.y, p2.z);\n      } else {\n        currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n        currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n      }\n    }\n    function delta(v1, v2) {\n      return state.relative ? v2 : v2 - v1;\n    }\n    function absolute(v1, v2) {\n      return state.relative ? v1 + v2 : v2;\n    }\n    var lines = data.replace(/;.+/g, '').split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      var tokens = lines[i].split(' ');\n      var cmd = tokens[0].toUpperCase(); //Argumments\n\n      var args = {};\n      tokens.splice(1).forEach(function (token) {\n        if (token[0] !== undefined) {\n          var key = token[0].toLowerCase();\n          var value = parseFloat(token.substring(1));\n          args[key] = value;\n        }\n      }); //Process commands\n      //G0/G1 – Linear Movement\n\n      if (cmd === 'G0' || cmd === 'G1') {\n        var line = {\n          x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n          y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n          z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n          e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n          f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n        }; //Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\n        if (delta(state.e, line.e) > 0) {\n          line.extruding = delta(state.e, line.e) > 0;\n          if (currentLayer == undefined || line.z != currentLayer.z) {\n            newLayer(line);\n          }\n        }\n        addSegment(state, line);\n        state = line;\n      } else if (cmd === 'G2' || cmd === 'G3') ;else if (cmd === 'G90') {\n        //G90: Set to Absolute Positioning\n        state.relative = false;\n      } else if (cmd === 'G91') {\n        //G91: Set to state.relative Positioning\n        state.relative = true;\n      } else if (cmd === 'G92') {\n        //G92: Set Position\n        var line = state;\n        line.x = args.x !== undefined ? args.x : line.x;\n        line.y = args.y !== undefined ? args.y : line.y;\n        line.z = args.z !== undefined ? args.z : line.z;\n        line.e = args.e !== undefined ? args.e : line.e;\n        state = line;\n      } else ;\n    }\n    function addObject(vertex, extruding) {\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertex, 3));\n      var segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n      segments.name = 'layer' + i;\n      object.add(segments);\n    }\n    var object = new Group();\n    object.name = 'gcode';\n    if (this.splitLayer) {\n      for (let i = 0; i < layers.length; i++) {\n        var layer = layers[i];\n        addObject(layer.vertex, true);\n        addObject(layer.pathVertex, false);\n      }\n    } else {\n      var vertex = [],\n        pathVertex = [];\n      for (let i = 0; i < layers.length; i++) {\n        var layer = layers[i];\n        var layerVertex = layer.vertex;\n        var layerPathVertex = layer.pathVertex;\n        for (let j = 0; j < layerVertex.length; j++) {\n          vertex.push(layerVertex[j]);\n        }\n        for (let j = 0; j < layerPathVertex.length; j++) {\n          pathVertex.push(layerPathVertex[j]);\n        }\n      }\n      addObject(vertex, true);\n      addObject(pathVertex, false);\n    }\n    object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    return object;\n  }\n});\nexport { GCodeLoader };","map":{"version":3,"names":["Loader","FileLoader","LineBasicMaterial","Group","Euler","BufferGeometry","Float32BufferAttribute","LineSegments","GCodeLoader","manager","call","splitLayer","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","state","x","y","z","f","extruding","relative","layers","currentLayer","undefined","pathMaterial","color","name","extrudingMaterial","newLayer","line","vertex","pathVertex","push","addSegment","p1","p2","delta","v1","v2","absolute","lines","replace","split","i","length","tokens","cmd","toUpperCase","args","splice","forEach","token","key","toLowerCase","value","parseFloat","substring","addObject","geometry","setAttribute","segments","object","add","layer","layerVertex","layerPathVertex","j","quaternion","setFromEuler","Math","PI"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/GCodeLoader.js"],"sourcesContent":["import { Loader, FileLoader, LineBasicMaterial, Group, Euler, BufferGeometry, Float32BufferAttribute, LineSegments } from 'three';\n\n/**\n * GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n *\n * Gcode files are composed by commands used by machines to create objects.\n *\n * @class GCodeLoader\n * @param {Manager} manager Loading manager.\n */\n\nvar GCodeLoader = function (manager) {\n  Loader.call(this, manager);\n  this.splitLayer = false;\n};\n\nGCodeLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: GCodeLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    var state = {\n      x: 0,\n      y: 0,\n      z: 0,\n      e: 0,\n      f: 0,\n      extruding: false,\n      relative: false\n    };\n    var layers = [];\n    var currentLayer = undefined;\n    var pathMaterial = new LineBasicMaterial({\n      color: 0xff0000\n    });\n    pathMaterial.name = 'path';\n    var extrudingMaterial = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    extrudingMaterial.name = 'extruded';\n\n    function newLayer(line) {\n      currentLayer = {\n        vertex: [],\n        pathVertex: [],\n        z: line.z\n      };\n      layers.push(currentLayer);\n    } //Create lie segment between p1 and p2\n\n\n    function addSegment(p1, p2) {\n      if (currentLayer === undefined) {\n        newLayer(p1);\n      }\n\n      if (line.extruding) {\n        currentLayer.vertex.push(p1.x, p1.y, p1.z);\n        currentLayer.vertex.push(p2.x, p2.y, p2.z);\n      } else {\n        currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n        currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n      }\n    }\n\n    function delta(v1, v2) {\n      return state.relative ? v2 : v2 - v1;\n    }\n\n    function absolute(v1, v2) {\n      return state.relative ? v1 + v2 : v2;\n    }\n\n    var lines = data.replace(/;.+/g, '').split('\\n');\n\n    for (let i = 0; i < lines.length; i++) {\n      var tokens = lines[i].split(' ');\n      var cmd = tokens[0].toUpperCase(); //Argumments\n\n      var args = {};\n      tokens.splice(1).forEach(function (token) {\n        if (token[0] !== undefined) {\n          var key = token[0].toLowerCase();\n          var value = parseFloat(token.substring(1));\n          args[key] = value;\n        }\n      }); //Process commands\n      //G0/G1 – Linear Movement\n\n      if (cmd === 'G0' || cmd === 'G1') {\n        var line = {\n          x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n          y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n          z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n          e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n          f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n        }; //Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\n        if (delta(state.e, line.e) > 0) {\n          line.extruding = delta(state.e, line.e) > 0;\n\n          if (currentLayer == undefined || line.z != currentLayer.z) {\n            newLayer(line);\n          }\n        }\n\n        addSegment(state, line);\n        state = line;\n      } else if (cmd === 'G2' || cmd === 'G3') ; else if (cmd === 'G90') {\n        //G90: Set to Absolute Positioning\n        state.relative = false;\n      } else if (cmd === 'G91') {\n        //G91: Set to state.relative Positioning\n        state.relative = true;\n      } else if (cmd === 'G92') {\n        //G92: Set Position\n        var line = state;\n        line.x = args.x !== undefined ? args.x : line.x;\n        line.y = args.y !== undefined ? args.y : line.y;\n        line.z = args.z !== undefined ? args.z : line.z;\n        line.e = args.e !== undefined ? args.e : line.e;\n        state = line;\n      } else ;\n    }\n\n    function addObject(vertex, extruding) {\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertex, 3));\n      var segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n      segments.name = 'layer' + i;\n      object.add(segments);\n    }\n\n    var object = new Group();\n    object.name = 'gcode';\n\n    if (this.splitLayer) {\n      for (let i = 0; i < layers.length; i++) {\n        var layer = layers[i];\n        addObject(layer.vertex, true);\n        addObject(layer.pathVertex, false);\n      }\n    } else {\n      var vertex = [],\n          pathVertex = [];\n\n      for (let i = 0; i < layers.length; i++) {\n        var layer = layers[i];\n        var layerVertex = layer.vertex;\n        var layerPathVertex = layer.pathVertex;\n\n        for (let j = 0; j < layerVertex.length; j++) {\n          vertex.push(layerVertex[j]);\n        }\n\n        for (let j = 0; j < layerPathVertex.length; j++) {\n          pathVertex.push(layerPathVertex[j]);\n        }\n      }\n\n      addObject(vertex, true);\n      addObject(pathVertex, false);\n    }\n\n    object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    return object;\n  }\n});\n\nexport { GCodeLoader };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,iBAAiB,EAAEC,KAAK,EAAEC,KAAK,EAAEC,cAAc,EAAEC,sBAAsB,EAAEC,YAAY,QAAQ,OAAO;;AAEjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GAAG,SAAAA,CAAUC,OAAO,EAAE;EACnCT,MAAM,CAACU,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;EAC1B,IAAI,CAACE,UAAU,GAAG,KAAK;AACzB,CAAC;AAEDH,WAAW,CAACI,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,MAAM,CAACf,MAAM,CAACY,SAAS,CAAC,EAAE;EACrEI,WAAW,EAAER,WAAW;EACxBS,IAAI,EAAE,SAAAA,CAAUC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;IAChD,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIC,MAAM,GAAG,IAAItB,UAAU,CAACqB,KAAK,CAACb,OAAO,CAAC;IAC1Cc,MAAM,CAACC,OAAO,CAACF,KAAK,CAACG,IAAI,CAAC;IAC1BF,MAAM,CAACG,gBAAgB,CAACJ,KAAK,CAACK,aAAa,CAAC;IAC5CJ,MAAM,CAACK,kBAAkB,CAACN,KAAK,CAACO,eAAe,CAAC;IAChDN,MAAM,CAACN,IAAI,CAACC,GAAG,EAAE,UAAUY,IAAI,EAAE;MAC/B,IAAI;QACFX,MAAM,CAACG,KAAK,CAACS,KAAK,CAACD,IAAI,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAOE,CAAC,EAAE;QACV,IAAIX,OAAO,EAAE;UACXA,OAAO,CAACW,CAAC,CAAC;QACZ,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;QAClB;QAEAV,KAAK,CAACb,OAAO,CAAC0B,SAAS,CAACjB,GAAG,CAAC;MAC9B;IACF,CAAC,EAAEE,UAAU,EAAEC,OAAO,CAAC;EACzB,CAAC;EACDU,KAAK,EAAE,SAAAA,CAAUK,IAAI,EAAE;IACrB,IAAIC,KAAK,GAAG;MACVC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJR,CAAC,EAAE,CAAC;MACJS,CAAC,EAAE,CAAC;MACJC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE;IACZ,CAAC;IACD,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,YAAY,GAAGC,SAAS;IAC5B,IAAIC,YAAY,GAAG,IAAI7C,iBAAiB,CAAC;MACvC8C,KAAK,EAAE;IACT,CAAC,CAAC;IACFD,YAAY,CAACE,IAAI,GAAG,MAAM;IAC1B,IAAIC,iBAAiB,GAAG,IAAIhD,iBAAiB,CAAC;MAC5C8C,KAAK,EAAE;IACT,CAAC,CAAC;IACFE,iBAAiB,CAACD,IAAI,GAAG,UAAU;IAEnC,SAASE,QAAQA,CAACC,IAAI,EAAE;MACtBP,YAAY,GAAG;QACbQ,MAAM,EAAE,EAAE;QACVC,UAAU,EAAE,EAAE;QACdd,CAAC,EAAEY,IAAI,CAACZ;MACV,CAAC;MACDI,MAAM,CAACW,IAAI,CAACV,YAAY,CAAC;IAC3B,CAAC,CAAC;;IAGF,SAASW,UAAUA,CAACC,EAAE,EAAEC,EAAE,EAAE;MAC1B,IAAIb,YAAY,KAAKC,SAAS,EAAE;QAC9BK,QAAQ,CAACM,EAAE,CAAC;MACd;MAEA,IAAIL,IAAI,CAACV,SAAS,EAAE;QAClBG,YAAY,CAACQ,MAAM,CAACE,IAAI,CAACE,EAAE,CAACnB,CAAC,EAAEmB,EAAE,CAAClB,CAAC,EAAEkB,EAAE,CAACjB,CAAC,CAAC;QAC1CK,YAAY,CAACQ,MAAM,CAACE,IAAI,CAACG,EAAE,CAACpB,CAAC,EAAEoB,EAAE,CAACnB,CAAC,EAAEmB,EAAE,CAAClB,CAAC,CAAC;MAC5C,CAAC,MAAM;QACLK,YAAY,CAACS,UAAU,CAACC,IAAI,CAACE,EAAE,CAACnB,CAAC,EAAEmB,EAAE,CAAClB,CAAC,EAAEkB,EAAE,CAACjB,CAAC,CAAC;QAC9CK,YAAY,CAACS,UAAU,CAACC,IAAI,CAACG,EAAE,CAACpB,CAAC,EAAEoB,EAAE,CAACnB,CAAC,EAAEmB,EAAE,CAAClB,CAAC,CAAC;MAChD;IACF;IAEA,SAASmB,KAAKA,CAACC,EAAE,EAAEC,EAAE,EAAE;MACrB,OAAOxB,KAAK,CAACM,QAAQ,GAAGkB,EAAE,GAAGA,EAAE,GAAGD,EAAE;IACtC;IAEA,SAASE,QAAQA,CAACF,EAAE,EAAEC,EAAE,EAAE;MACxB,OAAOxB,KAAK,CAACM,QAAQ,GAAGiB,EAAE,GAAGC,EAAE,GAAGA,EAAE;IACtC;IAEA,IAAIE,KAAK,GAAG3B,IAAI,CAAC4B,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;IAEhD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIE,MAAM,GAAGL,KAAK,CAACG,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;MAChC,IAAII,GAAG,GAAGD,MAAM,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC;;MAEnC,IAAIC,IAAI,GAAG,CAAC,CAAC;MACbH,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,KAAK,EAAE;QACxC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK5B,SAAS,EAAE;UAC1B,IAAI6B,GAAG,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;UAChC,IAAIC,KAAK,GAAGC,UAAU,CAACJ,KAAK,CAACK,SAAS,CAAC,CAAC,CAAC,CAAC;UAC1CR,IAAI,CAACI,GAAG,CAAC,GAAGE,KAAK;QACnB;MACF,CAAC,CAAC,CAAC,CAAC;MACJ;;MAEA,IAAIR,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,IAAI,EAAE;QAChC,IAAIjB,IAAI,GAAG;UACTd,CAAC,EAAEiC,IAAI,CAACjC,CAAC,KAAKQ,SAAS,GAAGgB,QAAQ,CAACzB,KAAK,CAACC,CAAC,EAAEiC,IAAI,CAACjC,CAAC,CAAC,GAAGD,KAAK,CAACC,CAAC;UAC7DC,CAAC,EAAEgC,IAAI,CAAChC,CAAC,KAAKO,SAAS,GAAGgB,QAAQ,CAACzB,KAAK,CAACE,CAAC,EAAEgC,IAAI,CAAChC,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC;UAC7DC,CAAC,EAAE+B,IAAI,CAAC/B,CAAC,KAAKM,SAAS,GAAGgB,QAAQ,CAACzB,KAAK,CAACG,CAAC,EAAE+B,IAAI,CAAC/B,CAAC,CAAC,GAAGH,KAAK,CAACG,CAAC;UAC7DR,CAAC,EAAEuC,IAAI,CAACvC,CAAC,KAAKc,SAAS,GAAGgB,QAAQ,CAACzB,KAAK,CAACL,CAAC,EAAEuC,IAAI,CAACvC,CAAC,CAAC,GAAGK,KAAK,CAACL,CAAC;UAC7DS,CAAC,EAAE8B,IAAI,CAAC9B,CAAC,KAAKK,SAAS,GAAGgB,QAAQ,CAACzB,KAAK,CAACI,CAAC,EAAE8B,IAAI,CAAC9B,CAAC,CAAC,GAAGJ,KAAK,CAACI;QAC9D,CAAC,CAAC,CAAC;;QAEH,IAAIkB,KAAK,CAACtB,KAAK,CAACL,CAAC,EAAEoB,IAAI,CAACpB,CAAC,CAAC,GAAG,CAAC,EAAE;UAC9BoB,IAAI,CAACV,SAAS,GAAGiB,KAAK,CAACtB,KAAK,CAACL,CAAC,EAAEoB,IAAI,CAACpB,CAAC,CAAC,GAAG,CAAC;UAE3C,IAAIa,YAAY,IAAIC,SAAS,IAAIM,IAAI,CAACZ,CAAC,IAAIK,YAAY,CAACL,CAAC,EAAE;YACzDW,QAAQ,CAACC,IAAI,CAAC;UAChB;QACF;QAEAI,UAAU,CAACnB,KAAK,EAAEe,IAAI,CAAC;QACvBf,KAAK,GAAGe,IAAI;MACd,CAAC,MAAM,IAAIiB,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,IAAI,EAAE,CAAC,KAAM,IAAIA,GAAG,KAAK,KAAK,EAAE;QACjE;QACAhC,KAAK,CAACM,QAAQ,GAAG,KAAK;MACxB,CAAC,MAAM,IAAI0B,GAAG,KAAK,KAAK,EAAE;QACxB;QACAhC,KAAK,CAACM,QAAQ,GAAG,IAAI;MACvB,CAAC,MAAM,IAAI0B,GAAG,KAAK,KAAK,EAAE;QACxB;QACA,IAAIjB,IAAI,GAAGf,KAAK;QAChBe,IAAI,CAACd,CAAC,GAAGiC,IAAI,CAACjC,CAAC,KAAKQ,SAAS,GAAGyB,IAAI,CAACjC,CAAC,GAAGc,IAAI,CAACd,CAAC;QAC/Cc,IAAI,CAACb,CAAC,GAAGgC,IAAI,CAAChC,CAAC,KAAKO,SAAS,GAAGyB,IAAI,CAAChC,CAAC,GAAGa,IAAI,CAACb,CAAC;QAC/Ca,IAAI,CAACZ,CAAC,GAAG+B,IAAI,CAAC/B,CAAC,KAAKM,SAAS,GAAGyB,IAAI,CAAC/B,CAAC,GAAGY,IAAI,CAACZ,CAAC;QAC/CY,IAAI,CAACpB,CAAC,GAAGuC,IAAI,CAACvC,CAAC,KAAKc,SAAS,GAAGyB,IAAI,CAACvC,CAAC,GAAGoB,IAAI,CAACpB,CAAC;QAC/CK,KAAK,GAAGe,IAAI;MACd,CAAC,MAAM;IACT;IAEA,SAAS4B,SAASA,CAAC3B,MAAM,EAAEX,SAAS,EAAE;MACpC,IAAIuC,QAAQ,GAAG,IAAI5E,cAAc,CAAC,CAAC;MACnC4E,QAAQ,CAACC,YAAY,CAAC,UAAU,EAAE,IAAI5E,sBAAsB,CAAC+C,MAAM,EAAE,CAAC,CAAC,CAAC;MACxE,IAAI8B,QAAQ,GAAG,IAAI5E,YAAY,CAAC0E,QAAQ,EAAEvC,SAAS,GAAGQ,iBAAiB,GAAGH,YAAY,CAAC;MACvFoC,QAAQ,CAAClC,IAAI,GAAG,OAAO,GAAGiB,CAAC;MAC3BkB,MAAM,CAACC,GAAG,CAACF,QAAQ,CAAC;IACtB;IAEA,IAAIC,MAAM,GAAG,IAAIjF,KAAK,CAAC,CAAC;IACxBiF,MAAM,CAACnC,IAAI,GAAG,OAAO;IAErB,IAAI,IAAI,CAACtC,UAAU,EAAE;MACnB,KAAK,IAAIuD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,MAAM,CAACuB,MAAM,EAAED,CAAC,EAAE,EAAE;QACtC,IAAIoB,KAAK,GAAG1C,MAAM,CAACsB,CAAC,CAAC;QACrBc,SAAS,CAACM,KAAK,CAACjC,MAAM,EAAE,IAAI,CAAC;QAC7B2B,SAAS,CAACM,KAAK,CAAChC,UAAU,EAAE,KAAK,CAAC;MACpC;IACF,CAAC,MAAM;MACL,IAAID,MAAM,GAAG,EAAE;QACXC,UAAU,GAAG,EAAE;MAEnB,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,MAAM,CAACuB,MAAM,EAAED,CAAC,EAAE,EAAE;QACtC,IAAIoB,KAAK,GAAG1C,MAAM,CAACsB,CAAC,CAAC;QACrB,IAAIqB,WAAW,GAAGD,KAAK,CAACjC,MAAM;QAC9B,IAAImC,eAAe,GAAGF,KAAK,CAAChC,UAAU;QAEtC,KAAK,IAAImC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAACpB,MAAM,EAAEsB,CAAC,EAAE,EAAE;UAC3CpC,MAAM,CAACE,IAAI,CAACgC,WAAW,CAACE,CAAC,CAAC,CAAC;QAC7B;QAEA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,eAAe,CAACrB,MAAM,EAAEsB,CAAC,EAAE,EAAE;UAC/CnC,UAAU,CAACC,IAAI,CAACiC,eAAe,CAACC,CAAC,CAAC,CAAC;QACrC;MACF;MAEAT,SAAS,CAAC3B,MAAM,EAAE,IAAI,CAAC;MACvB2B,SAAS,CAAC1B,UAAU,EAAE,KAAK,CAAC;IAC9B;IAEA8B,MAAM,CAACM,UAAU,CAACC,YAAY,CAAC,IAAIvF,KAAK,CAAC,CAACwF,IAAI,CAACC,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,OAAOT,MAAM;EACf;AACF,CAAC,CAAC;AAEF,SAAS5E,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}