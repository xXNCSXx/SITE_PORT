{"ast":null,"code":"import { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\nvar NRRDLoader = function (manager) {\n  Loader.call(this, manager);\n};\nNRRDLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: NRRDLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n    var _data = data;\n    var _dataPointer = 0;\n    var _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n    var _littleEndian = true;\n    var headerObject = {};\n    function scan(type, chunks) {\n      if (chunks === undefined || chunks === null) {\n        chunks = 1;\n      }\n      var _chunkSize = 1;\n      var _array_type = Uint8Array;\n      switch (type) {\n        // 1 byte data types\n        case 'uchar':\n          break;\n        case 'schar':\n          _array_type = Int8Array;\n          break;\n        // 2 byte data types\n\n        case 'ushort':\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n        case 'sshort':\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        // 4 byte data types\n\n        case 'uint':\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n        case 'sint':\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n        case 'float':\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n        case 'complex':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n        case 'double':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      } // increase the data pointer in-place\n\n      var _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n      if (_nativeLittleEndian != _littleEndian) {\n        // we need to flip here since the format doesn't match the native endianness\n        _bytes = flipEndianness(_bytes, _chunkSize);\n      }\n      if (chunks == 1) {\n        // if only one chunk was requested, just return one value\n        return _bytes[0];\n      } // return the byte array\n\n      return _bytes;\n    } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n    function flipEndianness(array, chunkSize) {\n      var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n      for (let i = 0; i < array.byteLength; i += chunkSize) {\n        for (let j = i + chunkSize - 1, k = i; j > k; j--, k++) {\n          var tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n      return array;\n    } //parse the header\n\n    function parseHeader(header) {\n      var data, field, fn, i, l, lines, m, _i, _len;\n      lines = header.split(/\\r?\\n/);\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) ;else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data = m[2].trim();\n          fn = NRRDLoader.prototype.fieldFunctions[field];\n          if (fn) {\n            fn.call(headerObject, data);\n          } else {\n            headerObject[field] = data;\n          }\n        }\n      }\n      if (!headerObject.isNrrd) {\n        throw new Error('Not an NRRD file');\n      }\n      if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n        throw new Error('Bzip is not supported');\n      }\n      if (!headerObject.vectors) {\n        //if no space direction is set, let's use the identity\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n        if (headerObject.spacings) {\n          for (i = 0; i <= 2; i++) {\n            if (!isNaN(headerObject.spacings[i])) {\n              headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n            }\n          }\n        }\n      }\n    } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n    function parseDataAsText(data, start, end) {\n      var number = '';\n      start = start || 0;\n      end = end || data.length;\n      var value; //length of the result is the product of the sizes\n\n      var lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      var base = 10;\n      if (headerObject.encoding === 'hex') {\n        base = 16;\n      }\n      var result = new headerObject.__array(lengthOfTheResult);\n      var resultIndex = 0;\n      var parsingFunction = parseInt;\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n      for (let i = start; i < end; i++) {\n        value = data[i]; //if value is not a space\n\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== '') {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n          number = '';\n        }\n      }\n      if (number !== '') {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n      return result;\n    }\n    var _bytes = scan('uchar', data.byteLength);\n    var _length = _bytes.length;\n    var _header = null;\n    var _data_start = 0;\n    var i;\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        // we found two line breaks in a row\n        // now we know what the header is\n        _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n        _data_start = i + 1;\n        break;\n      }\n    } // parse the header\n\n    parseHeader(_header);\n    var _data = _bytes.subarray(_data_start); // the data without header\n\n    if (headerObject.encoding.substring(0, 2) === 'gz') {\n      // we need to decompress the datastream\n      // here we start the unzipping and get a typed Uint8Array back\n      _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n    } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === 'raw') {\n      //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n      var _copy = new Uint8Array(_data.length);\n      for (let i = 0; i < _data.length; i++) {\n        _copy[i] = _data[i];\n      }\n      _data = _copy;\n    } // .. let's use the underlying array buffer\n\n    _data = _data.buffer;\n    var volume = new Volume();\n    volume.header = headerObject; //\n    // parse the (unzipped) data to a datastream of the correct type\n    //\n\n    volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n    var min_max = volume.computeMinMax();\n    var min = min_max[0];\n    var max = min_max[1]; // attach the scalar range to the volume\n\n    volume.windowLow = min;\n    volume.windowHigh = max; // get the image dimensions\n\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2]; // spacing\n\n    var spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    var spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    var spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n    volume.matrix = new Matrix4();\n    var _spaceX = 1;\n    var _spaceY = 1;\n    var _spaceZ = 1;\n    if (headerObject.space == 'left-posterior-superior') {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === 'left-anterior-superior') {\n      _spaceX = -1;\n    }\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      var v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n    // only if the threshold was not already set\n\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n    return volume;\n  },\n  parseChars: function (array, start, end) {\n    // without borders, use the whole array\n    if (start === undefined) {\n      start = 0;\n    }\n    if (end === undefined) {\n      end = array.length;\n    }\n    var output = ''; // create and append the chars\n\n    var i = 0;\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n    return output;\n  },\n  fieldFunctions: {\n    type: function (data) {\n      switch (data) {\n        case 'uchar':\n        case 'unsigned char':\n        case 'uint8':\n        case 'uint8_t':\n          this.__array = Uint8Array;\n          break;\n        case 'signed char':\n        case 'int8':\n        case 'int8_t':\n          this.__array = Int8Array;\n          break;\n        case 'short':\n        case 'short int':\n        case 'signed short':\n        case 'signed short int':\n        case 'int16':\n        case 'int16_t':\n          this.__array = Int16Array;\n          break;\n        case 'ushort':\n        case 'unsigned short':\n        case 'unsigned short int':\n        case 'uint16':\n        case 'uint16_t':\n          this.__array = Uint16Array;\n          break;\n        case 'int':\n        case 'signed int':\n        case 'int32':\n        case 'int32_t':\n          this.__array = Int32Array;\n          break;\n        case 'uint':\n        case 'unsigned int':\n        case 'uint32':\n        case 'uint32_t':\n          this.__array = Uint32Array;\n          break;\n        case 'float':\n          this.__array = Float32Array;\n          break;\n        case 'double':\n          this.__array = Float64Array;\n          break;\n        default:\n          throw new Error('Unsupported NRRD data type: ' + data);\n      }\n      return this.type = data;\n    },\n    endian: function (data) {\n      return this.endian = data;\n    },\n    encoding: function (data) {\n      return this.encoding = data;\n    },\n    dimension: function (data) {\n      return this.dim = parseInt(data, 10);\n    },\n    sizes: function (data) {\n      var i;\n      return this.sizes = function () {\n        var _i, _len, _ref, _results;\n        _ref = data.split(/\\s+/);\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          i = _ref[_i];\n          _results.push(parseInt(i, 10));\n        }\n        return _results;\n      }();\n    },\n    space: function (data) {\n      return this.space = data;\n    },\n    'space origin': function (data) {\n      return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n    },\n    'space directions': function (data) {\n      var f, parts, v;\n      parts = data.match(/\\(.*?\\)/g);\n      return this.vectors = function () {\n        var _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = parts.length; _i < _len; _i++) {\n          v = parts[_i];\n          _results.push(function () {\n            var _j, _len2, _ref, _results2;\n            _ref = v.slice(1, -1).split(/,/);\n            _results2 = [];\n            for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n              f = _ref[_j];\n              _results2.push(parseFloat(f));\n            }\n            return _results2;\n          }());\n        }\n        return _results;\n      }();\n    },\n    spacings: function (data) {\n      var f, parts;\n      parts = data.split(/\\s+/);\n      return this.spacings = function () {\n        var _i,\n          _len,\n          _results = [];\n        for (_i = 0, _len = parts.length; _i < _len; _i++) {\n          f = parts[_i];\n          _results.push(parseFloat(f));\n        }\n        return _results;\n      }();\n    }\n  }\n});\nexport { NRRDLoader };","map":{"version":3,"names":["Loader","FileLoader","Vector3","Matrix4","gunzipSync","Volume","NRRDLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","_data","_dataPointer","_nativeLittleEndian","Int8Array","Int16Array","buffer","_littleEndian","headerObject","scan","type","chunks","undefined","_chunkSize","_array_type","Uint8Array","Uint16Array","Uint32Array","Int32Array","Float32Array","Float64Array","_bytes","slice","flipEndianness","array","chunkSize","u8","byteOffset","byteLength","i","j","k","tmp","parseHeader","header","field","fn","l","lines","m","_i","_len","split","length","match","isNrrd","trim","fieldFunctions","Error","encoding","vectors","spacings","isNaN","multiplyScalar","parseDataAsText","start","end","number","value","lengthOfTheResult","sizes","reduce","previous","current","base","result","__array","resultIndex","parsingFunction","parseInt","parseFloat","String","fromCharCode","_length","_header","_data_start","parseChars","subarray","substring","_copy","volume","min_max","computeMinMax","min","max","windowLow","windowHigh","dimensions","xLength","yLength","zLength","spacingX","spacingY","spacingZ","spacing","matrix","_spaceX","_spaceY","_spaceZ","space","set","v","inverseMatrix","copy","invert","RASDimensions","applyMatrix4","round","toArray","map","Math","abs","lowerThreshold","Infinity","upperThreshold","output","endian","dimension","dim","_ref","_results","push","space origin","space_origin","space directions","f","parts","_j","_len2","_results2"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/NRRDLoader.js"],"sourcesContent":["import { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\n\nvar NRRDLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nNRRDLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: NRRDLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n    var _data = data;\n    var _dataPointer = 0;\n\n    var _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n\n    var _littleEndian = true;\n    var headerObject = {};\n\n    function scan(type, chunks) {\n      if (chunks === undefined || chunks === null) {\n        chunks = 1;\n      }\n\n      var _chunkSize = 1;\n      var _array_type = Uint8Array;\n\n      switch (type) {\n        // 1 byte data types\n        case 'uchar':\n          break;\n\n        case 'schar':\n          _array_type = Int8Array;\n          break;\n        // 2 byte data types\n\n        case 'ushort':\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n\n        case 'sshort':\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        // 4 byte data types\n\n        case 'uint':\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'sint':\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'float':\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'complex':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n\n        case 'double':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      } // increase the data pointer in-place\n\n\n      var _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n\n      if (_nativeLittleEndian != _littleEndian) {\n        // we need to flip here since the format doesn't match the native endianness\n        _bytes = flipEndianness(_bytes, _chunkSize);\n      }\n\n      if (chunks == 1) {\n        // if only one chunk was requested, just return one value\n        return _bytes[0];\n      } // return the byte array\n\n\n      return _bytes;\n    } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n\n    function flipEndianness(array, chunkSize) {\n      var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n\n      for (let i = 0; i < array.byteLength; i += chunkSize) {\n        for (let j = i + chunkSize - 1, k = i; j > k; j--, k++) {\n          var tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n\n      return array;\n    } //parse the header\n\n\n    function parseHeader(header) {\n      var data, field, fn, i, l, lines, m, _i, _len;\n\n      lines = header.split(/\\r?\\n/);\n\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) ; else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data = m[2].trim();\n          fn = NRRDLoader.prototype.fieldFunctions[field];\n\n          if (fn) {\n            fn.call(headerObject, data);\n          } else {\n            headerObject[field] = data;\n          }\n        }\n      }\n\n      if (!headerObject.isNrrd) {\n        throw new Error('Not an NRRD file');\n      }\n\n      if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n        throw new Error('Bzip is not supported');\n      }\n\n      if (!headerObject.vectors) {\n        //if no space direction is set, let's use the identity\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n        if (headerObject.spacings) {\n          for (i = 0; i <= 2; i++) {\n            if (!isNaN(headerObject.spacings[i])) {\n              headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n            }\n          }\n        }\n      }\n    } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n\n    function parseDataAsText(data, start, end) {\n      var number = '';\n      start = start || 0;\n      end = end || data.length;\n      var value; //length of the result is the product of the sizes\n\n      var lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      var base = 10;\n\n      if (headerObject.encoding === 'hex') {\n        base = 16;\n      }\n\n      var result = new headerObject.__array(lengthOfTheResult);\n      var resultIndex = 0;\n      var parsingFunction = parseInt;\n\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n\n      for (let i = start; i < end; i++) {\n        value = data[i]; //if value is not a space\n\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== '') {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n\n          number = '';\n        }\n      }\n\n      if (number !== '') {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n\n      return result;\n    }\n\n    var _bytes = scan('uchar', data.byteLength);\n\n    var _length = _bytes.length;\n    var _header = null;\n    var _data_start = 0;\n    var i;\n\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        // we found two line breaks in a row\n        // now we know what the header is\n        _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n        _data_start = i + 1;\n        break;\n      }\n    } // parse the header\n\n\n    parseHeader(_header);\n\n    var _data = _bytes.subarray(_data_start); // the data without header\n\n\n    if (headerObject.encoding.substring(0, 2) === 'gz') {\n      // we need to decompress the datastream\n      // here we start the unzipping and get a typed Uint8Array back\n      _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n    } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === 'raw') {\n      //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n      var _copy = new Uint8Array(_data.length);\n\n      for (let i = 0; i < _data.length; i++) {\n        _copy[i] = _data[i];\n      }\n\n      _data = _copy;\n    } // .. let's use the underlying array buffer\n\n\n    _data = _data.buffer;\n    var volume = new Volume();\n    volume.header = headerObject; //\n    // parse the (unzipped) data to a datastream of the correct type\n    //\n\n    volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n    var min_max = volume.computeMinMax();\n    var min = min_max[0];\n    var max = min_max[1]; // attach the scalar range to the volume\n\n    volume.windowLow = min;\n    volume.windowHigh = max; // get the image dimensions\n\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2]; // spacing\n\n    var spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    var spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    var spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n    volume.matrix = new Matrix4();\n    var _spaceX = 1;\n    var _spaceY = 1;\n    var _spaceZ = 1;\n\n    if (headerObject.space == 'left-posterior-superior') {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === 'left-anterior-superior') {\n      _spaceX = -1;\n    }\n\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      var v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n    // only if the threshold was not already set\n\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n\n    return volume;\n  },\n  parseChars: function (array, start, end) {\n    // without borders, use the whole array\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = array.length;\n    }\n\n    var output = ''; // create and append the chars\n\n    var i = 0;\n\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n\n    return output;\n  },\n  fieldFunctions: {\n    type: function (data) {\n      switch (data) {\n        case 'uchar':\n        case 'unsigned char':\n        case 'uint8':\n        case 'uint8_t':\n          this.__array = Uint8Array;\n          break;\n\n        case 'signed char':\n        case 'int8':\n        case 'int8_t':\n          this.__array = Int8Array;\n          break;\n\n        case 'short':\n        case 'short int':\n        case 'signed short':\n        case 'signed short int':\n        case 'int16':\n        case 'int16_t':\n          this.__array = Int16Array;\n          break;\n\n        case 'ushort':\n        case 'unsigned short':\n        case 'unsigned short int':\n        case 'uint16':\n        case 'uint16_t':\n          this.__array = Uint16Array;\n          break;\n\n        case 'int':\n        case 'signed int':\n        case 'int32':\n        case 'int32_t':\n          this.__array = Int32Array;\n          break;\n\n        case 'uint':\n        case 'unsigned int':\n        case 'uint32':\n        case 'uint32_t':\n          this.__array = Uint32Array;\n          break;\n\n        case 'float':\n          this.__array = Float32Array;\n          break;\n\n        case 'double':\n          this.__array = Float64Array;\n          break;\n\n        default:\n          throw new Error('Unsupported NRRD data type: ' + data);\n      }\n\n      return this.type = data;\n    },\n    endian: function (data) {\n      return this.endian = data;\n    },\n    encoding: function (data) {\n      return this.encoding = data;\n    },\n    dimension: function (data) {\n      return this.dim = parseInt(data, 10);\n    },\n    sizes: function (data) {\n      var i;\n      return this.sizes = function () {\n        var _i, _len, _ref, _results;\n\n        _ref = data.split(/\\s+/);\n        _results = [];\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          i = _ref[_i];\n\n          _results.push(parseInt(i, 10));\n        }\n\n        return _results;\n      }();\n    },\n    space: function (data) {\n      return this.space = data;\n    },\n    'space origin': function (data) {\n      return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n    },\n    'space directions': function (data) {\n      var f, parts, v;\n      parts = data.match(/\\(.*?\\)/g);\n      return this.vectors = function () {\n        var _i, _len, _results;\n\n        _results = [];\n\n        for (_i = 0, _len = parts.length; _i < _len; _i++) {\n          v = parts[_i];\n\n          _results.push(function () {\n            var _j, _len2, _ref, _results2;\n\n            _ref = v.slice(1, -1).split(/,/);\n            _results2 = [];\n\n            for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n              f = _ref[_j];\n\n              _results2.push(parseFloat(f));\n            }\n\n            return _results2;\n          }());\n        }\n\n        return _results;\n      }();\n    },\n    spacings: function (data) {\n      var f, parts;\n      parts = data.split(/\\s+/);\n      return this.spacings = function () {\n        var _i,\n            _len,\n            _results = [];\n\n        for (_i = 0, _len = parts.length; _i < _len; _i++) {\n          f = parts[_i];\n\n          _results.push(parseFloat(f));\n        }\n\n        return _results;\n      }();\n    }\n  }\n});\n\nexport { NRRDLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}