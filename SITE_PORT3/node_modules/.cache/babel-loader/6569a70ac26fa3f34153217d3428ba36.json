{"ast":null,"code":"import { DataTextureLoader, UnsignedByteType, HalfFloatType, FloatType, DataUtils, RGBFormat, RGBEFormat, LinearEncoding, LinearFilter, RGBEEncoding, NearestFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function (manager) {\n  DataTextureLoader.call(this, manager);\n  this.type = UnsignedByteType;\n};\nRGBELoader.prototype = Object.assign(Object.create(DataTextureLoader.prototype), {\n  constructor: RGBELoader,\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse: function (buffer) {\n    var /* return codes for rgbe routines */\n      //RGBE_RETURN_SUCCESS = 0,\n      RGBE_RETURN_FAILURE = -1,\n      /* default error routine.  change this to change error handling */\n      rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function (rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n            break;\n          case rgbe_write_error:\n            console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n            break;\n          case rgbe_format_error:\n            console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n            break;\n          default:\n          case rgbe_memory_error:\n            console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n        }\n        return RGBE_RETURN_FAILURE;\n      },\n      /* offsets to red, green, and blue components in a data (float) pixel */\n      //RGBE_DATA_RED = 0,\n      //RGBE_DATA_GREEN = 1,\n      //RGBE_DATA_BLUE = 2,\n\n      /* number of floats per pixel, use 4 since stored in rgba image format */\n      //RGBE_DATA_SIZE = 4,\n\n      /* flags indicating which fields in an rgbe_header_info are valid */\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = '\\n',\n      fgets = function (buffer, lineLimit, consume) {\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        var p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunkSize = 128,\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        }\n        if (-1 < i) {\n          /*for (i=l-1; i>=0; i--) {\n          byteCode = m.charCodeAt(i);\n          if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n          else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n          if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n          }*/\n          if (false !== consume) buffer.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n        return false;\n      },\n      /* minimal header reading.  modify if you want to parse more information */\n      RGBE_ReadHeader = function (buffer) {\n        var line,\n          match,\n          // regexes to parse header info fields\n          magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          // RGBE format header struct\n          header = {\n            valid: 0\n            /* indicate which fields are valid */,\n\n            string: ''\n            /* the actual header string */,\n\n            comments: ''\n            /* comments found in header */,\n\n            programtype: 'RGBE'\n            /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */,\n\n            format: ''\n            /* RGBE format, default 32-bit_rle_rgbe */,\n\n            gamma: 1.0\n            /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */,\n\n            exposure: 1.0\n            /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */,\n\n            width: 0,\n            height: 0\n            /* image dimensions, width/height */\n          };\n        if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n          return rgbe_error(rgbe_read_error, 'no header found');\n        }\n        /* if you want to require the magic token then uncomment the next line */\n\n        if (!(match = line.match(magic_token_re))) {\n          return rgbe_error(rgbe_format_error, 'bad initial token');\n        }\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + '\\n';\n        while (true) {\n          line = fgets(buffer);\n          if (false === line) break;\n          header.string += line + '\\n';\n          if ('#' === line.charAt(0)) {\n            header.comments += line + '\\n';\n            continue; // comment line\n          }\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1], 10);\n          }\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1], 10);\n          }\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1]; //'32-bit_rle_rgbe';\n          }\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          return rgbe_error(rgbe_format_error, 'missing format specifier');\n        }\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          return rgbe_error(rgbe_format_error, 'missing image size specifier');\n        }\n        return header;\n      },\n      RGBE_ReadPixels_RLE = function (buffer, w, h) {\n        var data_rgba,\n          offset,\n          pos,\n          count,\n          byteValue,\n          scanline_buffer,\n          ptr,\n          ptr_end,\n          i,\n          l,\n          off,\n          isEncodedRun,\n          scanline_width = w,\n          num_scanlines = h,\n          rgbeStart;\n        if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 0x7fff ||\n        // this file is not run length encoded\n        2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n          // return the flat buffer\n          return new Uint8Array(buffer);\n        }\n        if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n          return rgbe_error(rgbe_format_error, 'wrong scanline width');\n        }\n        data_rgba = new Uint8Array(4 * w * h);\n        if (!data_rgba.length) {\n          return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n        }\n        offset = 0;\n        pos = 0;\n        ptr_end = 4 * scanline_width;\n        rgbeStart = new Uint8Array(4);\n        scanline_buffer = new Uint8Array(ptr_end); // read in each successive scanline\n\n        while (num_scanlines > 0 && pos < buffer.byteLength) {\n          if (pos + 4 > buffer.byteLength) {\n            return rgbe_error(rgbe_read_error);\n          }\n          rgbeStart[0] = buffer[pos++];\n          rgbeStart[1] = buffer[pos++];\n          rgbeStart[2] = buffer[pos++];\n          rgbeStart[3] = buffer[pos++];\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n          } // read each of the four channels for the scanline into the buffer\n          // first red, then green, then blue, then exponent\n\n          ptr = 0;\n          while (ptr < ptr_end && pos < buffer.byteLength) {\n            count = buffer[pos++];\n            isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n            if (0 === count || ptr + count > ptr_end) {\n              return rgbe_error(rgbe_format_error, 'bad scanline data');\n            }\n            if (isEncodedRun) {\n              // a (encoded) run of the same value\n              byteValue = buffer[pos++];\n              for (i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              } //ptr += count;\n            } else {\n              // a literal-run\n              scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          } // now convert data from buffer into rgba\n          // first red, then green, then blue, then exponent (alpha)\n\n          l = scanline_width; //scanline_buffer.byteLength;\n\n          for (i = 0; i < l; i++) {\n            off = 0;\n            data_rgba[offset] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 1] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 2] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 3] = scanline_buffer[i + off];\n            offset += 4;\n          }\n          num_scanlines--;\n        }\n        return data_rgba;\n      };\n    var RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      var e = sourceArray[sourceOffset + 3];\n      var scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n    };\n    var RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      var e = sourceArray[sourceOffset + 3];\n      var scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 0] * scale);\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 1] * scale);\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 2] * scale);\n    };\n    var byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    var rgbe_header_info = RGBE_ReadHeader(byteArray);\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      var w = rgbe_header_info.width,\n        h = rgbe_header_info.height,\n        image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        switch (this.type) {\n          case UnsignedByteType:\n            var data = image_rgba_data;\n            var format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\n            var type = UnsignedByteType;\n            break;\n          case FloatType:\n            var numElements = image_rgba_data.length / 4 * 3;\n            var floatArray = new Float32Array(numElements);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 3);\n            }\n            var data = floatArray;\n            var format = RGBFormat;\n            var type = FloatType;\n            break;\n          case HalfFloatType:\n            var numElements = image_rgba_data.length / 4 * 3;\n            var halfArray = new Uint16Array(numElements);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 3);\n            }\n            var data = halfArray;\n            var format = RGBFormat;\n            var type = HalfFloatType;\n            break;\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          format: format,\n          type: type\n        };\n      }\n    }\n    return null;\n  },\n  setDataType: function (value) {\n    this.type = value;\n    return this;\n  },\n  load: function (url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case UnsignedByteType:\n          texture.encoding = RGBEEncoding;\n          texture.minFilter = NearestFilter;\n          texture.magFilter = NearestFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad) onLoad(texture, texData);\n    }\n    return DataTextureLoader.prototype.load.call(this, url, onLoadCallback, onProgress, onError);\n  }\n});\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","UnsignedByteType","HalfFloatType","FloatType","DataUtils","RGBFormat","RGBEFormat","LinearEncoding","LinearFilter","RGBEEncoding","NearestFilter","RGBELoader","manager","call","type","prototype","Object","assign","create","constructor","parse","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","p","pos","i","len","s","chunkSize","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","line","match","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","data_rgba","offset","count","byteValue","scanline_buffer","ptr","ptr_end","l","off","isEncodedRun","scanline_width","num_scanlines","rgbeStart","Uint8Array","set","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","minFilter","magFilter","generateMipmaps","flipY"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/RGBELoader.js"],"sourcesContent":["import { DataTextureLoader, UnsignedByteType, HalfFloatType, FloatType, DataUtils, RGBFormat, RGBEFormat, LinearEncoding, LinearFilter, RGBEEncoding, NearestFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function (manager) {\n  DataTextureLoader.call(this, manager);\n  this.type = UnsignedByteType;\n};\n\nRGBELoader.prototype = Object.assign(Object.create(DataTextureLoader.prototype), {\n  constructor: RGBELoader,\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse: function (buffer) {\n    var\n    /* return codes for rgbe routines */\n    //RGBE_RETURN_SUCCESS = 0,\n    RGBE_RETURN_FAILURE = -1,\n\n    /* default error routine.  change this to change error handling */\n    rgbe_read_error = 1,\n        rgbe_write_error = 2,\n        rgbe_format_error = 3,\n        rgbe_memory_error = 4,\n        rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n          break;\n\n        case rgbe_write_error:\n          console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n          break;\n\n        case rgbe_format_error:\n          console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n\n    /* offsets to red, green, and blue components in a data (float) pixel */\n    //RGBE_DATA_RED = 0,\n    //RGBE_DATA_GREEN = 1,\n    //RGBE_DATA_BLUE = 2,\n\n    /* number of floats per pixel, use 4 since stored in rgba image format */\n    //RGBE_DATA_SIZE = 4,\n\n    /* flags indicating which fields in an rgbe_header_info are valid */\n    RGBE_VALID_PROGRAMTYPE = 1,\n        RGBE_VALID_FORMAT = 2,\n        RGBE_VALID_DIMENSIONS = 4,\n        NEWLINE = '\\n',\n        fgets = function (buffer, lineLimit, consume) {\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      var p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunkSize = 128,\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        /*for (i=l-1; i>=0; i--) {\n        byteCode = m.charCodeAt(i);\n        if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n        if (false !== consume) buffer.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n\n    /* minimal header reading.  modify if you want to parse more information */\n    RGBE_ReadHeader = function (buffer) {\n      var line,\n          match,\n          // regexes to parse header info fields\n      magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          // RGBE format header struct\n      header = {\n        valid: 0\n        /* indicate which fields are valid */\n        ,\n        string: ''\n        /* the actual header string */\n        ,\n        comments: ''\n        /* comments found in header */\n        ,\n        programtype: 'RGBE'\n        /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n        ,\n        format: ''\n        /* RGBE format, default 32-bit_rle_rgbe */\n        ,\n        gamma: 1.0\n        /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n        ,\n        exposure: 1.0\n        /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n        ,\n        width: 0,\n        height: 0\n        /* image dimensions, width/height */\n\n      };\n\n      if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n        return rgbe_error(rgbe_read_error, 'no header found');\n      }\n      /* if you want to require the magic token then uncomment the next line */\n\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, 'bad initial token');\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + '\\n';\n\n      while (true) {\n        line = fgets(buffer);\n        if (false === line) break;\n        header.string += line + '\\n';\n\n        if ('#' === line.charAt(0)) {\n          header.comments += line + '\\n';\n          continue; // comment line\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1], 10);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1], 10);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1]; //'32-bit_rle_rgbe';\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, 'missing format specifier');\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, 'missing image size specifier');\n      }\n\n      return header;\n    },\n        RGBE_ReadPixels_RLE = function (buffer, w, h) {\n      var data_rgba,\n          offset,\n          pos,\n          count,\n          byteValue,\n          scanline_buffer,\n          ptr,\n          ptr_end,\n          i,\n          l,\n          off,\n          isEncodedRun,\n          scanline_width = w,\n          num_scanlines = h,\n          rgbeStart;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n        // return the flat buffer\n        return new Uint8Array(buffer);\n      }\n\n      if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n        return rgbe_error(rgbe_format_error, 'wrong scanline width');\n      }\n\n      data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n      }\n\n      offset = 0;\n      pos = 0;\n      ptr_end = 4 * scanline_width;\n      rgbeStart = new Uint8Array(4);\n      scanline_buffer = new Uint8Array(ptr_end); // read in each successive scanline\n\n      while (num_scanlines > 0 && pos < buffer.byteLength) {\n        if (pos + 4 > buffer.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer[pos++];\n        rgbeStart[1] = buffer[pos++];\n        rgbeStart[2] = buffer[pos++];\n        rgbeStart[3] = buffer[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n        } // read each of the four channels for the scanline into the buffer\n        // first red, then green, then blue, then exponent\n\n\n        ptr = 0;\n\n        while (ptr < ptr_end && pos < buffer.byteLength) {\n          count = buffer[pos++];\n          isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, 'bad scanline data');\n          }\n\n          if (isEncodedRun) {\n            // a (encoded) run of the same value\n            byteValue = buffer[pos++];\n\n            for (i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            } //ptr += count;\n\n          } else {\n            // a literal-run\n            scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        } // now convert data from buffer into rgba\n        // first red, then green, then blue, then exponent (alpha)\n\n\n        l = scanline_width; //scanline_buffer.byteLength;\n\n        for (i = 0; i < l; i++) {\n          off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    var RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      var e = sourceArray[sourceOffset + 3];\n      var scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n    };\n\n    var RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      var e = sourceArray[sourceOffset + 3];\n      var scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 0] * scale);\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 1] * scale);\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(sourceArray[sourceOffset + 2] * scale);\n    };\n\n    var byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    var rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      var w = rgbe_header_info.width,\n          h = rgbe_header_info.height,\n          image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        switch (this.type) {\n          case UnsignedByteType:\n            var data = image_rgba_data;\n            var format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\n            var type = UnsignedByteType;\n            break;\n\n          case FloatType:\n            var numElements = image_rgba_data.length / 4 * 3;\n            var floatArray = new Float32Array(numElements);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 3);\n            }\n\n            var data = floatArray;\n            var format = RGBFormat;\n            var type = FloatType;\n            break;\n\n          case HalfFloatType:\n            var numElements = image_rgba_data.length / 4 * 3;\n            var halfArray = new Uint16Array(numElements);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 3);\n            }\n\n            var data = halfArray;\n            var format = RGBFormat;\n            var type = HalfFloatType;\n            break;\n\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          format: format,\n          type: type\n        };\n      }\n    }\n\n    return null;\n  },\n  setDataType: function (value) {\n    this.type = value;\n    return this;\n  },\n  load: function (url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case UnsignedByteType:\n          texture.encoding = RGBEEncoding;\n          texture.minFilter = NearestFilter;\n          texture.magFilter = NearestFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return DataTextureLoader.prototype.load.call(this, url, onLoadCallback, onProgress, onError);\n  }\n});\n\nexport { RGBELoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}