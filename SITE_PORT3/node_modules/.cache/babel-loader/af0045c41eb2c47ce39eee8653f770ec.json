{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { map, reduce, every, isEmpty, flatten, forEach, has } from \"../../utils/utils\";\nimport { possiblePathsFrom } from \"./interpreter\";\nimport { RestWalker } from \"./rest\";\nimport { tokenStructuredMatcher, tokenStructuredMatcherNoCategories } from \"../../scan/tokens\";\nimport { Alternation, Alternative as AlternativeGAST, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator } from \"./gast/gast_public\";\nimport { GAstVisitor } from \"./gast/gast_visitor_public\";\nexport var PROD_TYPE;\n(function (PROD_TYPE) {\n  PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE || (PROD_TYPE = {}));\nexport function getProdType(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof Option) {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition) {\n    return PROD_TYPE.REPETITION;\n  } else if (prod instanceof RepetitionMandatory) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation) {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexport function buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n  var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n  var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher;\n  return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n  var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n  var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher;\n  return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nexport function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n  var numOfAlts = alts.length;\n  var areAllOneTokenLookahead = every(alts, function (currAlt) {\n    return every(currAlt, function (currPath) {\n      return currPath.length === 1;\n    });\n  });\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (orAlts) {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      var predicates = map(orAlts, function (currAlt) {\n        return currAlt.GATE;\n      });\n      for (var t = 0; t < numOfAlts; t++) {\n        var currAlt = alts[t];\n        var currNumOfPaths = currAlt.length;\n        var currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n          var currPath = currAlt[j];\n          var currPathLength = currPath.length;\n          for (var i = 0; i < currPathLength; i++) {\n            var nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    var singleTokenAlts = map(alts, function (currAlt) {\n      return flatten(currAlt);\n    });\n    var choiceToAlt_1 = reduce(singleTokenAlts, function (result, currAlt, idx) {\n      forEach(currAlt, function (currTokType) {\n        if (!has(result, currTokType.tokenTypeIdx)) {\n          result[currTokType.tokenTypeIdx] = idx;\n        }\n        forEach(currTokType.categoryMatches, function (currExtendingType) {\n          if (!has(result, currExtendingType)) {\n            result[currExtendingType] = idx;\n          }\n        });\n      });\n      return result;\n    }, []);\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function () {\n      var nextToken = this.LA(1);\n      return choiceToAlt_1[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function () {\n      for (var t = 0; t < numOfAlts; t++) {\n        var currAlt = alts[t];\n        var currNumOfPaths = currAlt.length;\n        nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n          var currPath = currAlt[j];\n          var currPathLength = currPath.length;\n          for (var i = 0; i < currPathLength; i++) {\n            var nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\nexport function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n  var areAllOneTokenLookahead = every(alt, function (currPath) {\n    return currPath.length === 1;\n  });\n  var numOfPaths = alt.length;\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    var singleTokensTypes = flatten(alt);\n    if (singleTokensTypes.length === 1 && isEmpty(singleTokensTypes[0].categoryMatches)) {\n      var expectedTokenType = singleTokensTypes[0];\n      var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;\n      return function () {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;\n      };\n    } else {\n      var choiceToAlt_2 = reduce(singleTokensTypes, function (result, currTokType, idx) {\n        result[currTokType.tokenTypeIdx] = true;\n        forEach(currTokType.categoryMatches, function (currExtendingType) {\n          result[currExtendingType] = true;\n        });\n        return result;\n      }, []);\n      return function () {\n        var nextToken = this.LA(1);\n        return choiceToAlt_2[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function () {\n      nextPath: for (var j = 0; j < numOfPaths; j++) {\n        var currPath = alt[j];\n        var currPathLength = currPath.length;\n        for (var i = 0; i < currPathLength; i++) {\n          var nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n      // none of the paths matched\n      return false;\n    };\n  }\n}\nvar RestDefinitionFinderWalker = /** @class */function (_super) {\n  __extends(RestDefinitionFinderWalker, _super);\n  function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {\n    var _this = _super.call(this) || this;\n    _this.topProd = topProd;\n    _this.targetOccurrence = targetOccurrence;\n    _this.targetProdType = targetProdType;\n    return _this;\n  }\n  RestDefinitionFinderWalker.prototype.startWalking = function () {\n    this.walk(this.topProd);\n    return this.restDef;\n  };\n  RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  };\n  RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);\n    }\n  };\n  RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n  RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);\n    }\n  };\n  RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);\n    }\n  };\n  RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n  return RestDefinitionFinderWalker;\n}(RestWalker);\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nvar InsideDefinitionFinderVisitor = /** @class */function (_super) {\n  __extends(InsideDefinitionFinderVisitor, _super);\n  function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType, targetRef) {\n    var _this = _super.call(this) || this;\n    _this.targetOccurrence = targetOccurrence;\n    _this.targetProdType = targetProdType;\n    _this.targetRef = targetRef;\n    _this.result = [];\n    return _this;\n  }\n  InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === undefined || node === this.targetRef)) {\n      this.result = node.definition;\n    }\n  };\n  InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  };\n  InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  };\n  return InsideDefinitionFinderVisitor;\n}(GAstVisitor);\nfunction initializeArrayOfArrays(size) {\n  var result = new Array(size);\n  for (var i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path) {\n  var keys = [\"\"];\n  for (var i = 0; i < path.length; i++) {\n    var tokType = path[i];\n    var longerKeys = [];\n    for (var j = 0; j < keys.length; j++) {\n      var currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (var t = 0; t < tokType.categoryMatches.length; t++) {\n        var categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n  for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      var searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\nexport function lookAheadSequenceFromAlternatives(altsDefs, k) {\n  var partialAlts = map(altsDefs, function (currAlt) {\n    return possiblePathsFrom([currAlt], 1);\n  });\n  var finalResult = initializeArrayOfArrays(partialAlts.length);\n  var altsHashes = map(partialAlts, function (currAltPaths) {\n    var dict = {};\n    forEach(currAltPaths, function (item) {\n      var keys = pathToHashKeys(item.partialPath);\n      forEach(keys, function (currKey) {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  var newData = partialAlts;\n  // maxLookahead loop\n  for (var pathLength = 1; pathLength <= k; pathLength++) {\n    var currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n    var _loop_1 = function (altIdx) {\n      var currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n        var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        var prefixKeys = pathToHashKeys(currPathPrefix);\n        var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          var currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (var j = 0; j < prefixKeys.length; j++) {\n              var currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          var newPartialPathsAndSuffixes = possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix);\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, function (item) {\n            var prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, function (key) {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    };\n    // alternatives loop\n    for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      _loop_1(altIdx);\n    }\n  }\n  return finalResult;\n}\nexport function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n  var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nexport function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n  var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n  ruleGrammar.accept(insideDefVisitor);\n  var insideDef = insideDefVisitor.result;\n  var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n  var afterDef = afterDefWalker.startWalking();\n  var insideFlat = new AlternativeGAST({\n    definition: insideDef\n  });\n  var afterFlat = new AlternativeGAST({\n    definition: afterDef\n  });\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\nexport function containsPath(alternative, searchPath) {\n  compareOtherPath: for (var i = 0; i < alternative.length; i++) {\n    var otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (var j = 0; j < otherPath.length; j++) {\n      var searchTok = searchPath[j];\n      var otherTok = otherPath[j];\n      var matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nexport function isStrictPrefixOfPath(prefix, other) {\n  return prefix.length < other.length && every(prefix, function (tokType, idx) {\n    var otherTokType = other[idx];\n    return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];\n  });\n}\nexport function areTokenCategoriesNotUsed(lookAheadPaths) {\n  return every(lookAheadPaths, function (singleAltPaths) {\n    return every(singleAltPaths, function (singlePath) {\n      return every(singlePath, function (token) {\n        return isEmpty(token.categoryMatches);\n      });\n    });\n  });\n}","map":{"version":3,"names":["map","reduce","every","isEmpty","flatten","forEach","has","possiblePathsFrom","RestWalker","tokenStructuredMatcher","tokenStructuredMatcherNoCategories","Alternation","Alternative","AlternativeGAST","Option","Repetition","RepetitionMandatory","RepetitionMandatoryWithSeparator","RepetitionWithSeparator","GAstVisitor","PROD_TYPE","getProdType","prod","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","Error","buildLookaheadFuncForOr","occurrence","ruleGrammar","maxLookahead","hasPredicates","dynamicTokensEnabled","laFuncBuilder","lookAheadPaths","getLookaheadPathsForOr","tokenMatcher","areTokenCategoriesNotUsed","buildLookaheadFuncForOptionalProd","k","prodType","lookaheadBuilder","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","alts","numOfAlts","length","areAllOneTokenLookahead","currAlt","currPath","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","undefined","call","nextPath","j","currPathLength","i","nextToken","LA","singleTokenAlts","choiceToAlt_1","result","idx","currTokType","tokenTypeIdx","categoryMatches","currExtendingType","buildSingleAlternativeLookaheadFunction","alt","numOfPaths","singleTokensTypes","expectedTokenType","expectedTokenUniqueKey_1","choiceToAlt_2","RestDefinitionFinderWalker","_super","__extends","topProd","targetOccurrence","targetProdType","_this","prototype","startWalking","walk","restDef","checkIsTarget","node","expectedProdType","currRest","prevRest","concat","walkOption","optionProd","walkAtLeastOne","atLeastOneProd","walkAtLeastOneSep","atLeastOneSepProd","walkMany","manyProd","walkManySep","manySepProd","InsideDefinitionFinderVisitor","targetRef","expectedProdName","definition","visitOption","visitRepetition","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitAlternation","initializeArrayOfArrays","size","Array","pathToHashKeys","path","keys","tokType","longerKeys","currShorterKey","push","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","searchKey","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","currAltPaths","dict","item","partialPath","currKey","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","suffixDef","prefixKeys","isUnique","currAltResult","containsPath","newPartialPathsAndSuffixes","key","orProd","visitor","accept","insideDefVisitor","insideDef","afterDefWalker","afterDef","insideFlat","afterFlat","alternative","searchPath","compareOtherPath","otherPath","searchTok","otherTok","matchingTokens","categoryMatchesMap","isStrictPrefixOfPath","prefix","other","otherTokType","singleAltPaths","singlePath","token"],"sources":["../../../../src/parse/grammar/lookahead.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}