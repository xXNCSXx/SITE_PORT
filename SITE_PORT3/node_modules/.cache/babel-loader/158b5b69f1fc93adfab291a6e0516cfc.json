{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, BufferAttribute, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nvar FBXLoader = function () {\n  var fbxTree;\n  var connections;\n  var sceneGraph;\n  function FBXLoader(manager) {\n    Loader.call(this, manager);\n  }\n  FBXLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: FBXLoader,\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    },\n    parse: function (FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }); // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n  function FBXTreeParser(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  FBXTreeParser.prototype = {\n    constructor: FBXTreeParser,\n    parse: function () {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    },\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n    parseConnections: function () {\n      var connectionMap = new Map();\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n      return connectionMap;\n    },\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n    parseImages: function () {\n      var images = {};\n      var blobs = {};\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n        for (let nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n      for (let id in images) {\n        var filename = images[id];\n        if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n      }\n      return images;\n    },\n    // Parse embedded image data in FBXTree.Video.Content\n    parseImage: function (videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n        case 'png':\n          type = 'image/png';\n          break;\n        case 'tif':\n          type = 'image/tiff';\n          break;\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n          type = 'image/tga';\n          break;\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    },\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n    parseTextures: function (images) {\n      var textureMap = new Map();\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n        for (let nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n      return textureMap;\n    },\n    // Parse individual node in FBXTree.Objects.Texture\n    parseTexture: function (textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n      return texture;\n    },\n    // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n    loadTexture: function (textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n      if (extension === 'tga') {\n        var loader = this.manager.getHandler('.tga');\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    },\n    // Parse nodes in FBXTree.Objects.Material\n    parseMaterials: function (textureMap) {\n      var materialMap = new Map();\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n        for (let nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n      return materialMap;\n    },\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n    parseMaterial: function (materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new MeshPhongMaterial();\n          break;\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    },\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n    parseParameters: function (materialNode, textureMap, ID) {\n      var parameters = {};\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            parameters.map.encoding = sRGBEncoding;\n            break;\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            parameters.emissiveMap.encoding = sRGBEncoding;\n            break;\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n            break;\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            parameters.specularMap.encoding = sRGBEncoding;\n            break;\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    },\n    // get a texture from the textureMap for use by a material.\n    getTexture: function (textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n      return textureMap.get(id);\n    },\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n    parseDeformers: function () {\n      var skeletons = {};\n      var morphTargets = {};\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n        for (let nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    },\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n    parseSkeleton: function (relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n        };\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    },\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n    parseMorphTargets: function (relationships, deformerNodes) {\n      var rawMorphTargets = [];\n      for (let i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n      return rawMorphTargets;\n    },\n    // create the main Group() to be returned by the loader\n    parseScene: function (deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      this.setupMorphMaterials();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n      sceneGraph.animations = animations;\n    },\n    // parse nodes in FBXTree.Objects.Model\n    parseModels: function (skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n      for (let nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n            case 'LimbNode':\n            case 'Root':\n              model = new Bone();\n              break;\n            case 'Null':\n            default:\n              model = new Group();\n              break;\n          }\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n      return modelMap;\n    },\n    buildSkeleton: function (relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        for (let ID in skeletons) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        }\n      });\n      return bone;\n    },\n    // create a PerspectiveCamera or OrthographicCamera\n    createCamera: function (relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n      if (cameraAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n        var nearClippingPlane = 1;\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n        var farClippingPlane = 1000;\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n        var aspect = width / height;\n        var fov = 45;\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n          case 1:\n            // Orthographic\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new Object3D();\n            break;\n        }\n      }\n      return model;\n    },\n    // Create a DirectionalLight, PointLight or SpotLight\n    createLight: function (relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n      if (lightAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n        var color = 0xffffff;\n        if (lightAttribute.Color !== undefined) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n        var distance = 0;\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n        var decay = 1;\n        switch (type) {\n          case 0:\n            // Point\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n          case 1:\n            // Directional\n            model = new DirectionalLight(color, intensity);\n            break;\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n            var penumbra = 0;\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n            model = new PointLight(color, intensity);\n            break;\n        }\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n      return model;\n    },\n    createMesh: function (relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n      if (geometry.FBX_Deformer) {\n        materials.forEach(function (material) {\n          material.skinning = true;\n        });\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n      return model;\n    },\n    createCurve: function (relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    },\n    // parse the model node for transform data\n    getTransformData: function (model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    },\n    setLookAtProperties: function (model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    },\n    bindSkeleton: function (skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n      for (let ID in skeletons) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      }\n    },\n    parsePoseNodes: function () {\n      var bindMatrices = {};\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n        for (let nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n      return bindMatrices;\n    },\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n    createAmbientLight: function () {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    },\n    setupMorphMaterials: function () {\n      var scope = this;\n      sceneGraph.traverse(function (child) {\n        if (child.isMesh) {\n          if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n            if (Array.isArray(child.material)) {\n              child.material.forEach(function (material, i) {\n                scope.setupMorphMaterial(child, material, i);\n              });\n            } else {\n              scope.setupMorphMaterial(child, child.material);\n            }\n          }\n        }\n      });\n    },\n    setupMorphMaterial: function (child, material, index) {\n      var uuid = child.uuid;\n      var matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n      var sharedMat = false;\n      sceneGraph.traverse(function (node) {\n        if (node.isMesh) {\n          if (Array.isArray(node.material)) {\n            node.material.forEach(function (mat) {\n              if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n            });\n          } else if (node.material.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n        }\n      });\n      if (sharedMat === true) {\n        var clonedMat = material.clone();\n        clonedMat.morphTargets = true;\n        if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n      } else material.morphTargets = true;\n    }\n  }; // parse Geometry data from FBXTree and return map of BufferGeometries\n\n  function GeometryParser() {}\n  GeometryParser.prototype = {\n    constructor: GeometryParser,\n    // Parse nodes in FBXTree.Objects.Geometry\n    parse: function (deformers) {\n      var geometryMap = new Map();\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n        for (let nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n      return geometryMap;\n    },\n    // Parse single node in FBXTree.Objects.Geometry\n    parseGeometry: function (relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n      }\n    },\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n    parseMeshGeometry: function (relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      }); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    },\n    // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n    genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n      }\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    },\n    parseGeoNode: function (geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n          i++;\n        }\n      }\n      geoInfo.weightTable = {};\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n      return geoInfo;\n    },\n    genBuffers: function (geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n          for (let i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n        if (geoInfo.normal) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n        faceLength++;\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    },\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n    genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      for (let i = 2; i < faceLength; i++) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      }\n    },\n    addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    },\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n    genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n      for (let i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      } // TODO: add morph normal support\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    },\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n    parseNormals: function (NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n    parseUVs: function (UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n    parseVertexColors: function (ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n    parseMaterialIndices: function (MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n      for (let i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n    parseNurbsGeometry: function (geoNode) {\n      if (NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new BufferGeometry();\n      }\n      var order = parseInt(geoNode.Order);\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n      for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n      var startKnot, endKnot;\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n        for (let i = 0; i < degree; ++i) {\n          controlPoints.push(controlPoints[i]);\n        }\n      }\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var vertices = curve.getPoints(controlPoints.length * 7);\n      var positions = new Float32Array(vertices.length * 3);\n      vertices.forEach(function (vertex, i) {\n        vertex.toArray(positions, i * 3);\n      });\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new BufferAttribute(positions, 3));\n      return geometry;\n    }\n  }; // parse animation data from FBXTree\n\n  function AnimationParser() {}\n  AnimationParser.prototype = {\n    constructor: AnimationParser,\n    // take raw animation clips and turn them into three.js animation clips\n    parse: function () {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n      if (rawClips !== undefined) {\n        for (let key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n      return animationClips;\n    },\n    parseClips: function () {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n    parseAnimationCurveNodes: function () {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n      for (let nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n      return curveNodesMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n    parseAnimationCurves: function (curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (let nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    },\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n    parseAnimationLayers: function (curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n      for (let nodeID in rawLayers) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var modelID = connections.get(geoID).parents[0].ID;\n                  var rawModel = fbxTree.Objects.Model[modelID];\n                  var node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = node;\n                }\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      }\n      return layersMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n    parseAnimStacks: function (layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n      for (let nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n      return rawClips;\n    },\n    addClip: function (rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    },\n    generateTracks: function (rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n      return tracks;\n    },\n    generateVectorTrack: function (modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n    },\n    generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n      for (let i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n      return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    },\n    generateMorphTrack: function (rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    },\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n    getTimesForAllAxes: function (curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }); // and remove duplicates\n\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n        for (let i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n        times = times.slice(0, targetIndex);\n      }\n      return times;\n    },\n    getKeyframeTrackValues: function (times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    },\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n    interpolateRotations: function (curve) {\n      for (let i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }; // parse an FBX file in ASCII format\n\n  function TextParser() {}\n  TextParser.prototype = {\n    constructor: TextParser,\n    getPrevNode: function () {\n      return this.nodeStack[this.currentIndent - 2];\n    },\n    getCurrentNode: function () {\n      return this.nodeStack[this.currentIndent - 1];\n    },\n    getCurrentProp: function () {\n      return this.currentProp;\n    },\n    pushStack: function (node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    },\n    popStack: function () {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    },\n    setCurrentProp: function (val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    },\n    parse: function (text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    },\n    parseNodeBegin: function (line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    },\n    parseNodeAttr: function (attrs) {\n      var id = attrs[0];\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n      var name = '',\n        type = '';\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    },\n    parseNodeProperty: function (line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    },\n    parseNodePropertyContinued: function (line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    },\n    // parse \"Property70\"\n    parseNodeSpecialProperty: function (line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }; // Parse an FBX file in Binary format\n\n  function BinaryParser() {}\n  BinaryParser.prototype = {\n    constructor: BinaryParser,\n    parse: function (buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n      var allNodes = new FBXTree();\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n      return allNodes;\n    },\n    // Check if reader has reached the end of content.\n    endOfContent: function (reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    },\n    // recursively parse nodes until the end of the file is reached\n    parseNode: function (reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n      for (let i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    },\n    parseSubNode: function (name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    },\n    parseProperty: function (reader) {\n      var type = reader.getString(1);\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n        case 'D':\n          return reader.getFloat64();\n        case 'F':\n          return reader.getFloat32();\n        case 'I':\n          return reader.getInt32();\n        case 'L':\n          return reader.getInt64();\n        case 'R':\n          var length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n        case 'S':\n          var length = reader.getUint32();\n          return reader.getString(length);\n        case 'Y':\n          return reader.getInt16();\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(data.buffer);\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  };\n  function BinaryReader(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n  BinaryReader.prototype = {\n    constructor: BinaryReader,\n    getOffset: function () {\n      return this.offset;\n    },\n    size: function () {\n      return this.dv.buffer.byteLength;\n    },\n    skip: function (length) {\n      this.offset += length;\n    },\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n    getBoolean: function () {\n      return (this.getUint8() & 1) === 1;\n    },\n    getBooleanArray: function (size) {\n      var a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n      return a;\n    },\n    getUint8: function () {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getInt16: function () {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getInt32: function () {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getInt32Array: function (size) {\n      var a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n      return a;\n    },\n    getUint32: function () {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n    getInt64: function () {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n      if (high & 0x80000000) {\n        high = ~high & 0xffffffff;\n        low = ~low & 0xffffffff;\n        if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n        low = low + 1 & 0xffffffff;\n        return -(high * 0x100000000 + low);\n      }\n      return high * 0x100000000 + low;\n    },\n    getInt64Array: function (size) {\n      var a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n      return a;\n    },\n    // Note: see getInt64() comment\n    getUint64: function () {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      return high * 0x100000000 + low;\n    },\n    getFloat32: function () {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getFloat32Array: function (size) {\n      var a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n      return a;\n    },\n    getFloat64: function () {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    },\n    getFloat64Array: function (size) {\n      var a = [];\n      for (let i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n      return a;\n    },\n    getArrayBuffer: function (size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    },\n    getString: function (size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n      for (let i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }; // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n\n  function FBXTree() {}\n  FBXTree.prototype = {\n    constructor: FBXTree,\n    add: function (key, val) {\n      this[key] = val;\n    }\n  }; // ************** UTILITY FUNCTIONS **************\n\n  function isFbxFormatBinary(buffer) {\n    var CORRECT = 'Kaydara FBX Binary  \\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n  function isFbxFormatASCII(text) {\n    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    var cursor = 0;\n    function read(offset) {\n      var result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n    for (let i = 0; i < CORRECT.length; ++i) {\n      var num = read(1);\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function getFbxVersion(text) {\n    var versionRegExp = /FBXVersion: (\\d+)/;\n    var match = text.match(versionRegExp);\n    if (match) {\n      var version = parseInt(match[1]);\n      return version;\n    }\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  } // Converts FBX ticks into real time seconds.\n\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  }\n  var dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    var index;\n    switch (infoObject.mappingType) {\n      case 'ByPolygonVertex':\n        index = polygonVertexIndex;\n        break;\n      case 'ByPolygon':\n        index = polygonIndex;\n        break;\n      case 'ByVertice':\n        index = vertexIndex;\n        break;\n      case 'AllSame':\n        index = infoObject.indices[0];\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n    }\n    if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n    var from = index * infoObject.dataSize;\n    var to = from + infoObject.dataSize;\n    return slice(dataArray, infoObject.buffer, from, to);\n  }\n  var tempEuler = new Euler();\n  var tempVec = new Vector3(); // generate transformation from FBX transform data\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n  // ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\n  function generateTransform(transformData) {\n    var lTranslationM = new Matrix4();\n    var lPreRotationM = new Matrix4();\n    var lRotationM = new Matrix4();\n    var lPostRotationM = new Matrix4();\n    var lScalingM = new Matrix4();\n    var lScalingPivotM = new Matrix4();\n    var lScalingOffsetM = new Matrix4();\n    var lRotationOffsetM = new Matrix4();\n    var lRotationPivotM = new Matrix4();\n    var lParentGX = new Matrix4();\n    var lParentLX = new Matrix4();\n    var lGlobalT = new Matrix4();\n    var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n    if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n    if (transformData.preRotation) {\n      var array = transformData.preRotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n    if (transformData.rotation) {\n      var array = transformData.rotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n    if (transformData.postRotation) {\n      var array = transformData.postRotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n      lPostRotationM.invert();\n    }\n    if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n    if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n    if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n    if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n    if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n    if (transformData.parentMatrixWorld) {\n      lParentLX.copy(transformData.parentMatrix);\n      lParentGX.copy(transformData.parentMatrixWorld);\n    }\n    var lLRM = new Matrix4().copy(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n    var lParentGRM = new Matrix4();\n    lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n    var lParentTM = new Matrix4();\n    lParentTM.copyPosition(lParentGX);\n    var lParentGSM = new Matrix4();\n    var lParentGRSM = new Matrix4().copy(lParentTM).invert().multiply(lParentGX);\n    lParentGSM.copy(lParentGRM).invert().multiply(lParentGRSM);\n    var lLSM = lScalingM;\n    var lGlobalRS = new Matrix4();\n    if (inheritType === 0) {\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n    } else if (inheritType === 1) {\n      lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n    } else {\n      var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n      var lParentLSM_inv = new Matrix4().copy(lParentLSM).invert();\n      var lParentGSM_noLocal = new Matrix4().copy(lParentGSM).multiply(lParentLSM_inv);\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n    }\n    var lRotationPivotM_inv = new Matrix4();\n    lRotationPivotM_inv.copy(lRotationPivotM).invert();\n    var lScalingPivotM_inv = new Matrix4();\n    lScalingPivotM_inv.copy(lScalingPivotM).invert(); // Calculate the local transform matrix\n\n    var lTransform = new Matrix4();\n    lTransform.copy(lTranslationM).multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n    var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n    var lGlobalTranslation = new Matrix4().copy(lParentGX).multiply(lLocalTWithAllPivotAndOffsetInfo);\n    lGlobalT.copyPosition(lGlobalTranslation);\n    lTransform = new Matrix4().copy(lGlobalT).multiply(lGlobalRS); // from global to local\n\n    lTransform.premultiply(lParentGX.invert());\n    return lTransform;\n  } // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n  function getEulerOrder(order) {\n    order = order || 0;\n    var enums = ['ZYX',\n    // -> XYZ extrinsic\n    'YZX',\n    // -> XZY extrinsic\n    'XZY',\n    // -> YZX extrinsic\n    'ZXY',\n    // -> YXZ extrinsic\n    'YXZ',\n    // -> ZXY extrinsic\n    'XYZ' // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n    ];\n    if (order === 6) {\n      console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n      return enums[0];\n    }\n    return enums[order];\n  } // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n\n  function parseNumberArray(value) {\n    var array = value.split(',').map(function (val) {\n      return parseFloat(val);\n    });\n    return array;\n  }\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n  }\n  function append(a, b) {\n    for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n  function slice(a, b, from, to) {\n    for (let i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n    return a;\n  } // inject array a2 into array a1 at index\n\n  function inject(a1, index, a2) {\n    return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n  }\n  return FBXLoader;\n}();\nexport { FBXLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","sRGBEncoding","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","BufferAttribute","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","FBXLoader","fbxTree","connections","sceneGraph","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","skinning","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","vertices","getPoints","positions","toArray","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","setFromQuaternion","T","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGSM","lParentGRSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/FBXLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, BufferAttribute, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nvar FBXLoader = function () {\n  var fbxTree;\n  var connections;\n  var sceneGraph;\n\n  function FBXLoader(manager) {\n    Loader.call(this, manager);\n  }\n\n  FBXLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: FBXLoader,\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    },\n    parse: function (FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }); // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n  function FBXTreeParser(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  FBXTreeParser.prototype = {\n    constructor: FBXTreeParser,\n    parse: function () {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    },\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n    parseConnections: function () {\n      var connectionMap = new Map();\n\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n\n      return connectionMap;\n    },\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n    parseImages: function () {\n      var images = {};\n      var blobs = {};\n\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n\n        for (let nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n\n      for (let id in images) {\n        var filename = images[id];\n        if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n      }\n\n      return images;\n    },\n    // Parse embedded image data in FBXTree.Video.Content\n    parseImage: function (videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n\n        case 'png':\n          type = 'image/png';\n          break;\n\n        case 'tif':\n          type = 'image/tiff';\n          break;\n\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n\n          type = 'image/tga';\n          break;\n\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    },\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n    parseTextures: function (images) {\n      var textureMap = new Map();\n\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n\n        for (let nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n\n      return textureMap;\n    },\n    // Parse individual node in FBXTree.Objects.Texture\n    parseTexture: function (textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n\n      return texture;\n    },\n    // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n    loadTexture: function (textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n\n      if (extension === 'tga') {\n        var loader = this.manager.getHandler('.tga');\n\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    },\n    // Parse nodes in FBXTree.Objects.Material\n    parseMaterials: function (textureMap) {\n      var materialMap = new Map();\n\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n\n        for (let nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n\n      return materialMap;\n    },\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n    parseMaterial: function (materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    },\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n    parseParameters: function (materialNode, textureMap, ID) {\n      var parameters = {};\n\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            parameters.map.encoding = sRGBEncoding;\n            break;\n\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            parameters.emissiveMap.encoding = sRGBEncoding;\n            break;\n\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n            break;\n\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            parameters.specularMap.encoding = sRGBEncoding;\n            break;\n\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    },\n    // get a texture from the textureMap for use by a material.\n    getTexture: function (textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n\n      return textureMap.get(id);\n    },\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n    parseDeformers: function () {\n      var skeletons = {};\n      var morphTargets = {};\n\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n\n        for (let nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    },\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n    parseSkeleton: function (relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    },\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n    parseMorphTargets: function (relationships, deformerNodes) {\n      var rawMorphTargets = [];\n\n      for (let i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n\n      return rawMorphTargets;\n    },\n    // create the main Group() to be returned by the loader\n    parseScene: function (deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      this.setupMorphMaterials();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n\n      sceneGraph.animations = animations;\n    },\n    // parse nodes in FBXTree.Objects.Model\n    parseModels: function (skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n\n      for (let nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n\n            case 'LimbNode':\n            case 'Root':\n              model = new Bone();\n              break;\n\n            case 'Null':\n            default:\n              model = new Group();\n              break;\n          }\n\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n\n      return modelMap;\n    },\n    buildSkeleton: function (relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        for (let ID in skeletons) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        }\n      });\n      return bone;\n    },\n    // create a PerspectiveCamera or OrthographicCamera\n    createCamera: function (relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n\n      if (cameraAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n\n        var nearClippingPlane = 1;\n\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n\n        var farClippingPlane = 1000;\n\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n\n        var aspect = width / height;\n        var fov = 45;\n\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n\n          case 1:\n            // Orthographic\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new Object3D();\n            break;\n        }\n      }\n\n      return model;\n    },\n    // Create a DirectionalLight, PointLight or SpotLight\n    createLight: function (relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n\n      if (lightAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n\n        var color = 0xffffff;\n\n        if (lightAttribute.Color !== undefined) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n\n        var distance = 0;\n\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n        var decay = 1;\n\n        switch (type) {\n          case 0:\n            // Point\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n\n          case 1:\n            // Directional\n            model = new DirectionalLight(color, intensity);\n            break;\n\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n\n            var penumbra = 0;\n\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n            model = new PointLight(color, intensity);\n            break;\n        }\n\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n\n      return model;\n    },\n    createMesh: function (relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n\n      if (geometry.FBX_Deformer) {\n        materials.forEach(function (material) {\n          material.skinning = true;\n        });\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n\n      return model;\n    },\n    createCurve: function (relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    },\n    // parse the model node for transform data\n    getTransformData: function (model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    },\n    setLookAtProperties: function (model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    },\n    bindSkeleton: function (skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n\n      for (let ID in skeletons) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      }\n    },\n    parsePoseNodes: function () {\n      var bindMatrices = {};\n\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n\n        for (let nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n\n      return bindMatrices;\n    },\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n    createAmbientLight: function () {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    },\n    setupMorphMaterials: function () {\n      var scope = this;\n      sceneGraph.traverse(function (child) {\n        if (child.isMesh) {\n          if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n            if (Array.isArray(child.material)) {\n              child.material.forEach(function (material, i) {\n                scope.setupMorphMaterial(child, material, i);\n              });\n            } else {\n              scope.setupMorphMaterial(child, child.material);\n            }\n          }\n        }\n      });\n    },\n    setupMorphMaterial: function (child, material, index) {\n      var uuid = child.uuid;\n      var matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n      var sharedMat = false;\n      sceneGraph.traverse(function (node) {\n        if (node.isMesh) {\n          if (Array.isArray(node.material)) {\n            node.material.forEach(function (mat) {\n              if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n            });\n          } else if (node.material.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n        }\n      });\n\n      if (sharedMat === true) {\n        var clonedMat = material.clone();\n        clonedMat.morphTargets = true;\n        if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n      } else material.morphTargets = true;\n    }\n  }; // parse Geometry data from FBXTree and return map of BufferGeometries\n\n  function GeometryParser() {}\n\n  GeometryParser.prototype = {\n    constructor: GeometryParser,\n    // Parse nodes in FBXTree.Objects.Geometry\n    parse: function (deformers) {\n      var geometryMap = new Map();\n\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n\n        for (let nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      return geometryMap;\n    },\n    // Parse single node in FBXTree.Objects.Geometry\n    parseGeometry: function (relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n      }\n    },\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n    parseMeshGeometry: function (relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      }); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    },\n    // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n    genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n      }\n\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    },\n    parseGeoNode: function (geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n\n          i++;\n        }\n      }\n\n      geoInfo.weightTable = {};\n\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n\n      return geoInfo;\n    },\n    genBuffers: function (geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n\n          for (let i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n\n        if (geoInfo.normal) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n\n        faceLength++;\n\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    },\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n    genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      for (let i = 2; i < faceLength; i++) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      }\n    },\n    addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    },\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n    genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n\n      for (let i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      } // TODO: add morph normal support\n\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    },\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n    parseNormals: function (NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n    parseUVs: function (UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n    parseVertexColors: function (ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n    parseMaterialIndices: function (MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n\n      for (let i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n    parseNurbsGeometry: function (geoNode) {\n      if (NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new BufferGeometry();\n      }\n\n      var order = parseInt(geoNode.Order);\n\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n\n      for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n\n      var startKnot, endKnot;\n\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n\n        for (let i = 0; i < degree; ++i) {\n          controlPoints.push(controlPoints[i]);\n        }\n      }\n\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var vertices = curve.getPoints(controlPoints.length * 7);\n      var positions = new Float32Array(vertices.length * 3);\n      vertices.forEach(function (vertex, i) {\n        vertex.toArray(positions, i * 3);\n      });\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new BufferAttribute(positions, 3));\n      return geometry;\n    }\n  }; // parse animation data from FBXTree\n\n  function AnimationParser() {}\n\n  AnimationParser.prototype = {\n    constructor: AnimationParser,\n    // take raw animation clips and turn them into three.js animation clips\n    parse: function () {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n\n      if (rawClips !== undefined) {\n        for (let key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n\n      return animationClips;\n    },\n    parseClips: function () {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n    parseAnimationCurveNodes: function () {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n\n      for (let nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n\n      return curveNodesMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n    parseAnimationCurves: function (curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (let nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    },\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n    parseAnimationLayers: function (curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n\n      for (let nodeID in rawLayers) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var modelID = connections.get(geoID).parents[0].ID;\n                  var rawModel = fbxTree.Objects.Model[modelID];\n                  var node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      }\n\n      return layersMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n    parseAnimStacks: function (layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n\n      for (let nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n\n      return rawClips;\n    },\n    addClip: function (rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    },\n    generateTracks: function (rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n\n      return tracks;\n    },\n    generateVectorTrack: function (modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n    },\n    generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n\n      for (let i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n\n      return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    },\n    generateMorphTrack: function (rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    },\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n    getTimesForAllAxes: function (curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }); // and remove duplicates\n\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n\n        for (let i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n\n        times = times.slice(0, targetIndex);\n      }\n\n      return times;\n    },\n    getKeyframeTrackValues: function (times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    },\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n    interpolateRotations: function (curve) {\n      for (let i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }; // parse an FBX file in ASCII format\n\n  function TextParser() {}\n\n  TextParser.prototype = {\n    constructor: TextParser,\n    getPrevNode: function () {\n      return this.nodeStack[this.currentIndent - 2];\n    },\n    getCurrentNode: function () {\n      return this.nodeStack[this.currentIndent - 1];\n    },\n    getCurrentProp: function () {\n      return this.currentProp;\n    },\n    pushStack: function (node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    },\n    popStack: function () {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    },\n    setCurrentProp: function (val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    },\n    parse: function (text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    },\n    parseNodeBegin: function (line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    },\n    parseNodeAttr: function (attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = '',\n          type = '';\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    },\n    parseNodeProperty: function (line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    },\n    parseNodePropertyContinued: function (line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    },\n    // parse \"Property70\"\n    parseNodeSpecialProperty: function (line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }; // Parse an FBX file in Binary format\n\n  function BinaryParser() {}\n\n  BinaryParser.prototype = {\n    constructor: BinaryParser,\n    parse: function (buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n\n      var allNodes = new FBXTree();\n\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n\n      return allNodes;\n    },\n    // Check if reader has reached the end of content.\n    endOfContent: function (reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    },\n    // recursively parse nodes until the end of the file is reached\n    parseNode: function (reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (let i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    },\n    parseSubNode: function (name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    },\n    parseProperty: function (reader) {\n      var type = reader.getString(1);\n\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n\n        case 'D':\n          return reader.getFloat64();\n\n        case 'F':\n          return reader.getFloat32();\n\n        case 'I':\n          return reader.getInt32();\n\n        case 'L':\n          return reader.getInt64();\n\n        case 'R':\n          var length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case 'S':\n          var length = reader.getUint32();\n          return reader.getString(length);\n\n        case 'Y':\n          return reader.getInt16();\n\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(data.buffer);\n\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  };\n\n  function BinaryReader(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  BinaryReader.prototype = {\n    constructor: BinaryReader,\n    getOffset: function () {\n      return this.offset;\n    },\n    size: function () {\n      return this.dv.buffer.byteLength;\n    },\n    skip: function (length) {\n      this.offset += length;\n    },\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n    getBoolean: function () {\n      return (this.getUint8() & 1) === 1;\n    },\n    getBooleanArray: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    },\n    getUint8: function () {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getInt16: function () {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getInt32: function () {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getInt32Array: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    },\n    getUint32: function () {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n    getInt64: function () {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n\n      if (high & 0x80000000) {\n        high = ~high & 0xffffffff;\n        low = ~low & 0xffffffff;\n        if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n        low = low + 1 & 0xffffffff;\n        return -(high * 0x100000000 + low);\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getInt64Array: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    },\n    // Note: see getInt64() comment\n    getUint64: function () {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getFloat32: function () {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getFloat32Array: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    },\n    getFloat64: function () {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    },\n    getFloat64Array: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    },\n    getArrayBuffer: function (size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    },\n    getString: function (size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }; // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n\n  function FBXTree() {}\n\n  FBXTree.prototype = {\n    constructor: FBXTree,\n    add: function (key, val) {\n      this[key] = val;\n    }\n  }; // ************** UTILITY FUNCTIONS **************\n\n  function isFbxFormatBinary(buffer) {\n    var CORRECT = 'Kaydara FBX Binary  \\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n\n  function isFbxFormatASCII(text) {\n    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    var cursor = 0;\n\n    function read(offset) {\n      var result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n\n    for (let i = 0; i < CORRECT.length; ++i) {\n      var num = read(1);\n\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getFbxVersion(text) {\n    var versionRegExp = /FBXVersion: (\\d+)/;\n    var match = text.match(versionRegExp);\n\n    if (match) {\n      var version = parseInt(match[1]);\n      return version;\n    }\n\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  } // Converts FBX ticks into real time seconds.\n\n\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  }\n\n  var dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    var index;\n\n    switch (infoObject.mappingType) {\n      case 'ByPolygonVertex':\n        index = polygonVertexIndex;\n        break;\n\n      case 'ByPolygon':\n        index = polygonIndex;\n        break;\n\n      case 'ByVertice':\n        index = vertexIndex;\n        break;\n\n      case 'AllSame':\n        index = infoObject.indices[0];\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n    }\n\n    if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n    var from = index * infoObject.dataSize;\n    var to = from + infoObject.dataSize;\n    return slice(dataArray, infoObject.buffer, from, to);\n  }\n\n  var tempEuler = new Euler();\n  var tempVec = new Vector3(); // generate transformation from FBX transform data\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n  // ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\n  function generateTransform(transformData) {\n    var lTranslationM = new Matrix4();\n    var lPreRotationM = new Matrix4();\n    var lRotationM = new Matrix4();\n    var lPostRotationM = new Matrix4();\n    var lScalingM = new Matrix4();\n    var lScalingPivotM = new Matrix4();\n    var lScalingOffsetM = new Matrix4();\n    var lRotationOffsetM = new Matrix4();\n    var lRotationPivotM = new Matrix4();\n    var lParentGX = new Matrix4();\n    var lParentLX = new Matrix4();\n    var lGlobalT = new Matrix4();\n    var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n    if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n    if (transformData.preRotation) {\n      var array = transformData.preRotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.rotation) {\n      var array = transformData.rotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.postRotation) {\n      var array = transformData.postRotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n      lPostRotationM.invert();\n    }\n\n    if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n    if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n    if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n    if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n    if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n    if (transformData.parentMatrixWorld) {\n      lParentLX.copy(transformData.parentMatrix);\n      lParentGX.copy(transformData.parentMatrixWorld);\n    }\n\n    var lLRM = new Matrix4().copy(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n    var lParentGRM = new Matrix4();\n    lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n    var lParentTM = new Matrix4();\n    lParentTM.copyPosition(lParentGX);\n    var lParentGSM = new Matrix4();\n    var lParentGRSM = new Matrix4().copy(lParentTM).invert().multiply(lParentGX);\n    lParentGSM.copy(lParentGRM).invert().multiply(lParentGRSM);\n    var lLSM = lScalingM;\n    var lGlobalRS = new Matrix4();\n\n    if (inheritType === 0) {\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n    } else if (inheritType === 1) {\n      lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n    } else {\n      var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n      var lParentLSM_inv = new Matrix4().copy(lParentLSM).invert();\n      var lParentGSM_noLocal = new Matrix4().copy(lParentGSM).multiply(lParentLSM_inv);\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n    }\n\n    var lRotationPivotM_inv = new Matrix4();\n    lRotationPivotM_inv.copy(lRotationPivotM).invert();\n    var lScalingPivotM_inv = new Matrix4();\n    lScalingPivotM_inv.copy(lScalingPivotM).invert(); // Calculate the local transform matrix\n\n    var lTransform = new Matrix4();\n    lTransform.copy(lTranslationM).multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n    var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n    var lGlobalTranslation = new Matrix4().copy(lParentGX).multiply(lLocalTWithAllPivotAndOffsetInfo);\n    lGlobalT.copyPosition(lGlobalTranslation);\n    lTransform = new Matrix4().copy(lGlobalT).multiply(lGlobalRS); // from global to local\n\n    lTransform.premultiply(lParentGX.invert());\n    return lTransform;\n  } // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\n  function getEulerOrder(order) {\n    order = order || 0;\n    var enums = ['ZYX', // -> XYZ extrinsic\n    'YZX', // -> XZY extrinsic\n    'XZY', // -> YZX extrinsic\n    'ZXY', // -> YXZ extrinsic\n    'YXZ', // -> ZXY extrinsic\n    'XYZ' // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n    ];\n\n    if (order === 6) {\n      console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n      return enums[0];\n    }\n\n    return enums[order];\n  } // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n\n\n  function parseNumberArray(value) {\n    var array = value.split(',').map(function (val) {\n      return parseFloat(val);\n    });\n    return array;\n  }\n\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n  }\n\n  function append(a, b) {\n    for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n\n  function slice(a, b, from, to) {\n    for (let i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n\n    return a;\n  } // inject array a2 into array a1 at index\n\n\n  function inject(a1, index, a2) {\n    return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n  }\n\n  return FBXLoader;\n}();\n\nexport { FBXLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}