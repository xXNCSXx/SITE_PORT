{"ast":null,"code":"import { ShaderMaterial, NormalBlending, FrontSide, NoColors, LessEqualDepth } from 'three';\nimport { NodeBuilder } from '../core/NodeBuilder.js';\nimport { ColorNode } from '../inputs/ColorNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nimport { RawNode } from './nodes/RawNode.js';\nfunction NodeMaterial(vertex, fragment) {\n  ShaderMaterial.call(this);\n  this.vertex = vertex || new RawNode(new PositionNode(PositionNode.PROJECTION));\n  this.fragment = fragment || new RawNode(new ColorNode(0xff0000));\n  this.updaters = [];\n}\nNodeMaterial.prototype = Object.create(ShaderMaterial.prototype);\nNodeMaterial.prototype.constructor = NodeMaterial;\nNodeMaterial.prototype.type = 'NodeMaterial';\nNodeMaterial.prototype.isNodeMaterial = true;\nObject.defineProperties(NodeMaterial.prototype, {\n  properties: {\n    get: function () {\n      return this.fragment.properties;\n    }\n  },\n  needsUpdate: {\n    set: function (value) {\n      if (value === true) this.version++;\n      this.needsCompile = value;\n    },\n    get: function () {\n      return this.needsCompile;\n    }\n  }\n});\nNodeMaterial.prototype.onBeforeCompile = function (shader, renderer) {\n  this.build({\n    renderer: renderer\n  });\n  shader.defines = this.defines;\n  shader.uniforms = this.uniforms;\n  shader.vertexShader = this.vertexShader;\n  shader.fragmentShader = this.fragmentShader;\n  shader.extensionDerivatives = this.extensions.derivatives === true;\n  shader.extensionFragDepth = this.extensions.fragDepth === true;\n  shader.extensionDrawBuffers = this.extensions.drawBuffers === true;\n  shader.extensionShaderTextureLOD = this.extensions.shaderTextureLOD === true;\n};\nNodeMaterial.prototype.customProgramCacheKey = function () {\n  var hash = this.getHash();\n  return hash;\n};\nNodeMaterial.prototype.getHash = function () {\n  var hash = '{';\n  hash += '\"vertex\":' + this.vertex.getHash() + ',';\n  hash += '\"fragment\":' + this.fragment.getHash();\n  hash += '}';\n  return hash;\n};\nNodeMaterial.prototype.updateFrame = function (frame) {\n  for (let i = 0; i < this.updaters.length; ++i) {\n    frame.updateNode(this.updaters[i]);\n  }\n};\nNodeMaterial.prototype.build = function (params) {\n  params = params || {};\n  var builder = params.builder || new NodeBuilder();\n  builder.setMaterial(this, params.renderer);\n  builder.build(this.vertex, this.fragment);\n  this.vertexShader = builder.getCode('vertex');\n  this.fragmentShader = builder.getCode('fragment');\n  this.defines = builder.defines;\n  this.uniforms = builder.uniforms;\n  this.extensions = builder.extensions;\n  this.updaters = builder.updaters;\n  this.fog = builder.requires.fog;\n  this.lights = builder.requires.lights;\n  this.transparent = builder.requires.transparent || this.blending > NormalBlending;\n  return this;\n};\nNodeMaterial.prototype.copy = function (source) {\n  var uuid = this.uuid;\n  for (let name in source) {\n    this[name] = source[name];\n  }\n  this.uuid = uuid;\n  if (source.userData !== undefined) {\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n  }\n  return this;\n};\nNodeMaterial.prototype.toJSON = function (meta) {\n  var isRootObject = meta === undefined || typeof meta === 'string';\n  if (isRootObject) {\n    meta = {\n      nodes: {}\n    };\n  }\n  if (meta && !meta.materials) meta.materials = {};\n  if (!meta.materials[this.uuid]) {\n    var data = {};\n    data.uuid = this.uuid;\n    data.type = this.type;\n    meta.materials[data.uuid] = data;\n    if (this.name !== '') data.name = this.name;\n    if (this.size !== undefined) data.size = this.size;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== NormalBlending) data.blending = this.blending;\n    if (this.flatShading === true) data.flatShading = this.flatShading;\n    if (this.side !== FrontSide) data.side = this.side;\n    if (this.vertexColors !== NoColors) data.vertexColors = this.vertexColors;\n    if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;\n    if (this.depthTest === false) data.depthTest = this.depthTest;\n    if (this.depthWrite === false) data.depthWrite = this.depthWrite;\n    if (this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.wireframe === true) data.wireframe = this.wireframe;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n    if (this.morphTargets === true) data.morphTargets = true;\n    if (this.skinning === true) data.skinning = true;\n    if (this.visible === false) data.visible = false;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n    data.fog = this.fog;\n    data.lights = this.lights;\n    data.vertex = this.vertex.toJSON(meta).uuid;\n    data.fragment = this.fragment.toJSON(meta).uuid;\n  }\n  meta.material = this.uuid;\n  return meta;\n};\nexport { NodeMaterial };","map":{"version":3,"names":["ShaderMaterial","NormalBlending","FrontSide","NoColors","LessEqualDepth","NodeBuilder","ColorNode","PositionNode","RawNode","NodeMaterial","vertex","fragment","call","PROJECTION","updaters","prototype","Object","create","constructor","type","isNodeMaterial","defineProperties","properties","get","needsUpdate","set","value","version","needsCompile","onBeforeCompile","shader","renderer","build","defines","uniforms","vertexShader","fragmentShader","extensionDerivatives","extensions","derivatives","extensionFragDepth","fragDepth","extensionDrawBuffers","drawBuffers","extensionShaderTextureLOD","shaderTextureLOD","customProgramCacheKey","hash","getHash","updateFrame","frame","i","length","updateNode","params","builder","setMaterial","getCode","fog","requires","lights","transparent","blending","copy","source","uuid","name","userData","undefined","JSON","parse","stringify","toJSON","meta","isRootObject","nodes","materials","data","size","sizeAttenuation","flatShading","side","vertexColors","depthFunc","depthTest","depthWrite","linewidth","dashSize","gapSize","scale","dithering","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","alphaTest","premultipliedAlpha","morphTargets","skinning","visible","material"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/nodes/materials/NodeMaterial.js"],"sourcesContent":["import { ShaderMaterial, NormalBlending, FrontSide, NoColors, LessEqualDepth } from 'three';\nimport { NodeBuilder } from '../core/NodeBuilder.js';\nimport { ColorNode } from '../inputs/ColorNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nimport { RawNode } from './nodes/RawNode.js';\n\nfunction NodeMaterial(vertex, fragment) {\n  ShaderMaterial.call(this);\n  this.vertex = vertex || new RawNode(new PositionNode(PositionNode.PROJECTION));\n  this.fragment = fragment || new RawNode(new ColorNode(0xff0000));\n  this.updaters = [];\n}\n\nNodeMaterial.prototype = Object.create(ShaderMaterial.prototype);\nNodeMaterial.prototype.constructor = NodeMaterial;\nNodeMaterial.prototype.type = 'NodeMaterial';\nNodeMaterial.prototype.isNodeMaterial = true;\nObject.defineProperties(NodeMaterial.prototype, {\n  properties: {\n    get: function () {\n      return this.fragment.properties;\n    }\n  },\n  needsUpdate: {\n    set: function (value) {\n      if (value === true) this.version++;\n      this.needsCompile = value;\n    },\n    get: function () {\n      return this.needsCompile;\n    }\n  }\n});\n\nNodeMaterial.prototype.onBeforeCompile = function (shader, renderer) {\n  this.build({\n    renderer: renderer\n  });\n  shader.defines = this.defines;\n  shader.uniforms = this.uniforms;\n  shader.vertexShader = this.vertexShader;\n  shader.fragmentShader = this.fragmentShader;\n  shader.extensionDerivatives = this.extensions.derivatives === true;\n  shader.extensionFragDepth = this.extensions.fragDepth === true;\n  shader.extensionDrawBuffers = this.extensions.drawBuffers === true;\n  shader.extensionShaderTextureLOD = this.extensions.shaderTextureLOD === true;\n};\n\nNodeMaterial.prototype.customProgramCacheKey = function () {\n  var hash = this.getHash();\n  return hash;\n};\n\nNodeMaterial.prototype.getHash = function () {\n  var hash = '{';\n  hash += '\"vertex\":' + this.vertex.getHash() + ',';\n  hash += '\"fragment\":' + this.fragment.getHash();\n  hash += '}';\n  return hash;\n};\n\nNodeMaterial.prototype.updateFrame = function (frame) {\n  for (let i = 0; i < this.updaters.length; ++i) {\n    frame.updateNode(this.updaters[i]);\n  }\n};\n\nNodeMaterial.prototype.build = function (params) {\n  params = params || {};\n  var builder = params.builder || new NodeBuilder();\n  builder.setMaterial(this, params.renderer);\n  builder.build(this.vertex, this.fragment);\n  this.vertexShader = builder.getCode('vertex');\n  this.fragmentShader = builder.getCode('fragment');\n  this.defines = builder.defines;\n  this.uniforms = builder.uniforms;\n  this.extensions = builder.extensions;\n  this.updaters = builder.updaters;\n  this.fog = builder.requires.fog;\n  this.lights = builder.requires.lights;\n  this.transparent = builder.requires.transparent || this.blending > NormalBlending;\n  return this;\n};\n\nNodeMaterial.prototype.copy = function (source) {\n  var uuid = this.uuid;\n\n  for (let name in source) {\n    this[name] = source[name];\n  }\n\n  this.uuid = uuid;\n\n  if (source.userData !== undefined) {\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n  }\n\n  return this;\n};\n\nNodeMaterial.prototype.toJSON = function (meta) {\n  var isRootObject = meta === undefined || typeof meta === 'string';\n\n  if (isRootObject) {\n    meta = {\n      nodes: {}\n    };\n  }\n\n  if (meta && !meta.materials) meta.materials = {};\n\n  if (!meta.materials[this.uuid]) {\n    var data = {};\n    data.uuid = this.uuid;\n    data.type = this.type;\n    meta.materials[data.uuid] = data;\n    if (this.name !== '') data.name = this.name;\n    if (this.size !== undefined) data.size = this.size;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== NormalBlending) data.blending = this.blending;\n    if (this.flatShading === true) data.flatShading = this.flatShading;\n    if (this.side !== FrontSide) data.side = this.side;\n    if (this.vertexColors !== NoColors) data.vertexColors = this.vertexColors;\n    if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;\n    if (this.depthTest === false) data.depthTest = this.depthTest;\n    if (this.depthWrite === false) data.depthWrite = this.depthWrite;\n    if (this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.wireframe === true) data.wireframe = this.wireframe;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n    if (this.morphTargets === true) data.morphTargets = true;\n    if (this.skinning === true) data.skinning = true;\n    if (this.visible === false) data.visible = false;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n    data.fog = this.fog;\n    data.lights = this.lights;\n    data.vertex = this.vertex.toJSON(meta).uuid;\n    data.fragment = this.fragment.toJSON(meta).uuid;\n  }\n\n  meta.material = this.uuid;\n  return meta;\n};\n\nexport { NodeMaterial };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}