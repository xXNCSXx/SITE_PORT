{"ast":null,"code":"import { EarlyExitException, isRecognitionException, NoViableAltException } from \"../../exceptions_public\";\nimport { cloneArr, has } from \"../../../utils/utils\";\nimport { getLookaheadPathsForOptionalProd, getLookaheadPathsForOr } from \"../../grammar/lookahead\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar ErrorHandler = /** @class */function () {\n  function ErrorHandler() {}\n  ErrorHandler.prototype.initErrorHandler = function (config) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\") ? config.errorMessageProvider : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  };\n  ErrorHandler.prototype.SAVE_ERROR = function (error) {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: cloneArr(this.RULE_OCCURRENCE_STACK)\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\");\n    }\n  };\n  Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n    get: function () {\n      return cloneArr(this._errors);\n    },\n    set: function (newErrors) {\n      this._errors = newErrors;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // TODO: consider caching the error message computed information\n  ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    var lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n    var insideProdPaths = lookAheadPathsPerAlternative[0];\n    var actualTokens = [];\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    var msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    });\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  };\n  // TODO: consider caching the error message computed information\n  ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    var lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n    var actualTokens = [];\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    var previousToken = this.LA(0);\n    var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    });\n    throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken));\n  };\n  return ErrorHandler;\n}();\nexport { ErrorHandler };","map":{"version":3,"names":["EarlyExitException","isRecognitionException","NoViableAltException","cloneArr","has","getLookaheadPathsForOptionalProd","getLookaheadPathsForOr","DEFAULT_PARSER_CONFIG","ErrorHandler","prototype","initErrorHandler","config","_errors","errorMessageProvider","SAVE_ERROR","error","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","push","Error","Object","defineProperty","get","set","newErrors","raiseEarlyExitException","occurrence","prodType","userDefinedErrMsg","ruleName","getCurrRuleFullName","ruleGrammar","getGAstProductions","lookAheadPathsPerAlternative","maxLookahead","insideProdPaths","actualTokens","i","LA","msg","buildEarlyExitMessage","expectedIterationPaths","actual","previous","customUserDescription","raiseNoAltException","errMsgTypes","previousToken","errMsg","buildNoViableAltMessage","expectedPathsPerAlt"],"sources":["../../../../../src/parse/parser/traits/error_handler.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}