{"ast":null,"code":"import { isUndefined } from \"../utils/utils\";\nexport function classNameFromInstance(instance) {\n  return functionName(instance.constructor);\n}\nvar NAME = \"name\";\n/**\n * Utility to obtain Function names.\n * Note that there should not be an assumptions on the result of this function.\n * E.g: When running from minified source code the result may be auto generated.\n */\nexport function functionName(func) {\n  // Engines that support Function.prototype.name OR the nth (n>1) time after\n  // the name has been computed in the following else block.\n  var existingNameProp = func.name;\n  /* istanbul ignore else - too many hacks for IE/old versions of node.js here*/\n  if (existingNameProp) {\n    return existingNameProp;\n  } else {\n    return \"anonymous\";\n  }\n}\n/**\n * @returns {boolean} - has the property been successfully defined\n */\nexport function defineNameProp(obj, nameValue) {\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);\n  /* istanbul ignore else -> will only run in old versions of node.js */\n  if (isUndefined(namePropDescriptor) || namePropDescriptor.configurable) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue\n    });\n    return true;\n  }\n  /* istanbul ignore next -> will only run in old versions of node.js */\n  return false;\n}","map":{"version":3,"sources":["../../../src/lang/lang_extensions.ts"],"names":[],"mappings":"AACA,SAAS,WAAW,QAAQ,gBAAgB;AAE5C,OAAM,SAAU,qBAAqB,CAAC,QAAa,EAAA;EACjD,OAAO,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC;AAC3C;AAEA,IAAM,IAAI,GAAG,MAAM;AAEnB;;;;AAIG;AACH,OAAM,SAAU,YAAY,CAAC,IAAe,EAAA;EAC1C;EACA;EACA,IAAI,gBAAgB,GAAS,IAAK,CAAC,IAAI;EACvC;EACA,IAAI,gBAAgB,EAAE;IACpB,OAAO,gBAAgB;GACxB,MAAM;IACL,OAAO,WAAW;EACnB;AACH;AAEA;;AAEG;AACH,OAAM,SAAU,cAAc,CAAC,GAAG,EAAE,SAAS,EAAA;EAC3C,IAAI,kBAAkB,GAAG,MAAM,CAAC,wBAAwB,CAAC,GAAG,EAAE,IAAI,CAAC;EACnE;EACA,IAAI,WAAW,CAAC,kBAAkB,CAAC,IAAI,kBAAkB,CAAC,YAAY,EAAE;IACtE,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE;MAC/B,UAAU,EAAE,KAAK;MACjB,YAAY,EAAE,IAAI;MAClB,QAAQ,EAAE,KAAK;MACf,KAAK,EAAE;KACR,CAAC;IAEF,OAAO,IAAI;EACZ;EACD;EACA,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["import { isUndefined } from \"../utils/utils\";\nexport function classNameFromInstance(instance) {\n    return functionName(instance.constructor);\n}\nvar NAME = \"name\";\n/**\n * Utility to obtain Function names.\n * Note that there should not be an assumptions on the result of this function.\n * E.g: When running from minified source code the result may be auto generated.\n */\nexport function functionName(func) {\n    // Engines that support Function.prototype.name OR the nth (n>1) time after\n    // the name has been computed in the following else block.\n    var existingNameProp = func.name;\n    /* istanbul ignore else - too many hacks for IE/old versions of node.js here*/\n    if (existingNameProp) {\n        return existingNameProp;\n    }\n    else {\n        return \"anonymous\";\n    }\n}\n/**\n * @returns {boolean} - has the property been successfully defined\n */\nexport function defineNameProp(obj, nameValue) {\n    var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);\n    /* istanbul ignore else -> will only run in old versions of node.js */\n    if (isUndefined(namePropDescriptor) || namePropDescriptor.configurable) {\n        Object.defineProperty(obj, NAME, {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: nameValue\n        });\n        return true;\n    }\n    /* istanbul ignore next -> will only run in old versions of node.js */\n    return false;\n}\n//# sourceMappingURL=lang_extensions.js.map"]},"metadata":{},"sourceType":"module"}