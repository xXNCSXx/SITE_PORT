{"ast":null,"code":"import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nvar BasisTextureLoader = function (manager) {\n  Loader.call(this, manager);\n  this.transcoderPath = '';\n  this.transcoderBinary = null;\n  this.transcoderPending = null;\n  this.workerLimit = 4;\n  this.workerPool = [];\n  this.workerNextTaskID = 1;\n  this.workerSourceURL = '';\n  this.workerConfig = null;\n};\nBasisTextureLoader.taskCache = new WeakMap();\nBasisTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: BasisTextureLoader,\n  setTranscoderPath: function (path) {\n    this.transcoderPath = path;\n    return this;\n  },\n  setWorkerLimit: function (workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  },\n  detectSupport: function (renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  },\n  load: function (url, onLoad, onProgress, onError) {\n    var loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    var texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (BasisTextureLoader.taskCache.has(buffer)) {\n        var cachedTask = BasisTextureLoader.taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  },\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n  parseInternalAsync: function (options) {\n    var {\n      levels\n    } = options;\n    var buffers = new Set();\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n    return this._createTexture(Array.from(buffers), {\n      ...options,\n      lowLevel: true\n    });\n  },\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n  _createTexture: function (buffers, config) {\n    var worker;\n    var taskID;\n    var taskConfig = config || {};\n    var taskCost = 0;\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n    var texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      var {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    BasisTextureLoader.taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n    return texturePending;\n  },\n  _initTranscoder: function () {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      var jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      var jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      var binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      var binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        var fn = BasisTextureLoader.BasisWorker.toString();\n        var body = ['/* constants */', 'var _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'var _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'var _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n    return this.transcoderPending;\n  },\n  _allocateWorker: function (taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        var worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n        worker.onmessage = function (e) {\n          var message = e.data;\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n              break;\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      var worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  },\n  dispose: function () {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n});\n/* CONSTANTS */\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    var message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            var {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            var buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n  function transcodeLowLevel(taskConfig) {\n    var {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    var {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    var mipmaps = [];\n    if (basisFormat === BasisFormat.ETC1S) {\n      var transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      var {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n      try {\n        var ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          var level = taskConfig.levels[i];\n          var imageDesc = taskConfig.globalData.imageDescs[i];\n          var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          var dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        var level = taskConfig.levels[i];\n        var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        var dst = new Uint8Array(dstByteLength);\n        var ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n  function transcode(buffer) {\n    var basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    var basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = basisFile.getImageWidth(0, 0);\n    var height = basisFile.getImageHeight(0, 0);\n    var levels = basisFile.getNumLevels(0);\n    var hasAlpha = basisFile.getHasAlpha();\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n    var {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n    var mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      var mipWidth = basisFile.getImageWidth(0, mip);\n      var mipHeight = basisFile.getImageHeight(0, mip);\n      var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      var status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n  var FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      var paddedWidth = width + 3 & ~3;\n      var paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\nexport { BasisTextureLoader };","map":{"version":3,"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","BasisTextureLoader","manager","call","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","taskCache","WeakMap","prototype","Object","assign","create","constructor","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","load","url","onLoad","onProgress","onError","loader","setResponseType","setWithCredentials","withCredentials","texture","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","parseInternalAsync","options","levels","buffers","Set","i","length","add","data","Array","from","lowLevel","config","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","_initTranscoder","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","onmessage","e","console","error","push","sort","a","b","dispose","terminate","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","hasAlpha","transcodeLowLevel","transcode","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","transcoderFormat","engineFormat","getTranscoderFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","globalData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max","value"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format } from 'three';\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\n\nvar BasisTextureLoader = function (manager) {\n  Loader.call(this, manager);\n  this.transcoderPath = '';\n  this.transcoderBinary = null;\n  this.transcoderPending = null;\n  this.workerLimit = 4;\n  this.workerPool = [];\n  this.workerNextTaskID = 1;\n  this.workerSourceURL = '';\n  this.workerConfig = null;\n};\n\nBasisTextureLoader.taskCache = new WeakMap();\nBasisTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: BasisTextureLoader,\n  setTranscoderPath: function (path) {\n    this.transcoderPath = path;\n    return this;\n  },\n  setWorkerLimit: function (workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  },\n  detectSupport: function (renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    return this;\n  },\n  load: function (url, onLoad, onProgress, onError) {\n    var loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    var texture = new CompressedTexture();\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (BasisTextureLoader.taskCache.has(buffer)) {\n        var cachedTask = BasisTextureLoader.taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture([buffer]).then(function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }).catch(onError);\n    }, onProgress, onError);\n    return texture;\n  },\n\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n  parseInternalAsync: function (options) {\n    var {\n      levels\n    } = options;\n    var buffers = new Set();\n\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n\n    return this._createTexture(Array.from(buffers), { ...options,\n      lowLevel: true\n    });\n  },\n\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n  _createTexture: function (buffers, config) {\n    var worker;\n    var taskID;\n    var taskConfig = config || {};\n    var taskCost = 0;\n\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n\n    var texturePending = this._allocateWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'transcode',\n          id: taskID,\n          buffers: buffers,\n          taskConfig: taskConfig\n        }, buffers);\n      });\n    }).then(message => {\n      var {\n        mipmaps,\n        width,\n        height,\n        format\n      } = message;\n      var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    }); // Cache the task result.\n\n    BasisTextureLoader.taskCache.set(buffers[0], {\n      promise: texturePending\n    });\n    return texturePending;\n  },\n  _initTranscoder: function () {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      var jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      var jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n      }); // Load transcoder WASM binary.\n\n      var binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      var binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        var fn = BasisTextureLoader.BasisWorker.toString();\n        var body = ['/* constants */', 'var _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'var _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'var _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n      });\n    }\n\n    return this.transcoderPending;\n  },\n  _allocateWorker: function (taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        var worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n\n        worker.onmessage = function (e) {\n          var message = e.data;\n\n          switch (message.type) {\n            case 'transcode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      var worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  },\n  dispose: function () {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n});\n/* CONSTANTS */\n\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function (e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            var {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            var buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    var {\n      basisFormat,\n      width,\n      height,\n      hasAlpha\n    } = taskConfig;\n    var {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    var mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      var transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      var {\n        endpointCount,\n        endpointsData,\n        selectorCount,\n        selectorsData,\n        tablesData\n      } = taskConfig.globalData;\n\n      try {\n        var ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          var level = taskConfig.levels[i];\n          var imageDesc = taskConfig.globalData.imageDescs[i];\n          var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          var dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        var level = taskConfig.levels[i];\n        var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        var dst = new Uint8Array(dstByteLength);\n        var ok = BasisModule.transcodeUASTCImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, 0, level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + level.index + '.');\n        mipmaps.push({\n          data: dst,\n          width: level.width,\n          height: level.height\n        });\n      }\n    }\n\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    var basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    var basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = basisFile.getImageWidth(0, 0);\n    var height = basisFile.getImageHeight(0, 0);\n    var levels = basisFile.getNumLevels(0);\n    var hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    var {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    var mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      var mipWidth = basisFile.getImageWidth(0, mip);\n      var mipHeight = basisFile.getImageHeight(0, mip);\n      var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      var status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  var FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      var paddedWidth = width + 3 & ~3;\n      var paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n\nexport { BasisTextureLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}