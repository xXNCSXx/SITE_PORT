{"ast":null,"code":"const t = new Uint8Array([0]),\n  e = [171, 75, 84, 88, 32, 50, 48, 187, 13, 10, 26, 10];\nvar n, i, s, a, r, o, l, f;\n!function (t) {\n  t[t.NONE = 0] = \"NONE\", t[t.BASISLZ = 1] = \"BASISLZ\", t[t.ZSTD = 2] = \"ZSTD\", t[t.ZLIB = 3] = \"ZLIB\";\n}(n || (n = {})), function (t) {\n  t[t.BASICFORMAT = 0] = \"BASICFORMAT\";\n}(i || (i = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.ETC1S = 163] = \"ETC1S\", t[t.UASTC = 166] = \"UASTC\";\n}(s || (s = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.SRGB = 1] = \"SRGB\";\n}(a || (a = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.LINEAR = 1] = \"LINEAR\", t[t.SRGB = 2] = \"SRGB\", t[t.ITU = 3] = \"ITU\", t[t.NTSC = 4] = \"NTSC\", t[t.SLOG = 5] = \"SLOG\", t[t.SLOG2 = 6] = \"SLOG2\";\n}(r || (r = {})), function (t) {\n  t[t.ALPHA_STRAIGHT = 0] = \"ALPHA_STRAIGHT\", t[t.ALPHA_PREMULTIPLIED = 1] = \"ALPHA_PREMULTIPLIED\";\n}(o || (o = {})), function (t) {\n  t[t.RGB = 0] = \"RGB\", t[t.RRR = 3] = \"RRR\", t[t.GGG = 4] = \"GGG\", t[t.AAA = 15] = \"AAA\";\n}(l || (l = {})), function (t) {\n  t[t.RGB = 0] = \"RGB\", t[t.RGBA = 3] = \"RGBA\", t[t.RRR = 4] = \"RRR\", t[t.RRRG = 5] = \"RRRG\";\n}(f || (f = {}));\nclass U {\n  constructor() {\n    this.vkFormat = 0, this.typeSize = 1, this.pixelWidth = 0, this.pixelHeight = 0, this.pixelDepth = 0, this.layerCount = 0, this.faceCount = 1, this.supercompressionScheme = n.NONE, this.levels = [], this.dataFormatDescriptor = [{\n      vendorId: 0,\n      descriptorType: i.BASICFORMAT,\n      versionNumber: 2,\n      descriptorBlockSize: 40,\n      colorModel: s.UNSPECIFIED,\n      colorPrimaries: a.SRGB,\n      transferFunction: a.SRGB,\n      flags: o.ALPHA_STRAIGHT,\n      texelBlockDimension: {\n        x: 4,\n        y: 4,\n        z: 1,\n        w: 1\n      },\n      bytesPlane: [],\n      samples: []\n    }], this.keyValue = {}, this.globalData = null;\n  }\n}\nclass c {\n  constructor(t, e, n, i) {\n    this._dataView = new DataView(t.buffer, t.byteOffset + e, n), this._littleEndian = i, this._offset = 0;\n  }\n  _nextUint8() {\n    const t = this._dataView.getUint8(this._offset);\n    return this._offset += 1, t;\n  }\n  _nextUint16() {\n    const t = this._dataView.getUint16(this._offset, this._littleEndian);\n    return this._offset += 2, t;\n  }\n  _nextUint32() {\n    const t = this._dataView.getUint32(this._offset, this._littleEndian);\n    return this._offset += 4, t;\n  }\n  _nextUint64() {\n    const t = this._dataView.getUint32(this._offset, this._littleEndian) + 2 ** 32 * this._dataView.getUint32(this._offset + 4, this._littleEndian);\n    return this._offset += 8, t;\n  }\n  _skip(t) {\n    return this._offset += t, this;\n  }\n  _scan(t, e = 0) {\n    const n = this._offset;\n    let i = 0;\n    for (; this._dataView.getUint8(this._offset) !== e && i < t;) i++, this._offset++;\n    return i < t && this._offset++, new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + n, i);\n  }\n}\nfunction h(t) {\n  return \"undefined\" != typeof TextEncoder ? new TextEncoder().encode(t) : Buffer.from(t);\n}\nfunction _(t) {\n  return \"undefined\" != typeof TextDecoder ? new TextDecoder().decode(t) : Buffer.from(t).toString(\"utf8\");\n}\nfunction g(t) {\n  let e = 0;\n  for (const n of t) e += n.byteLength;\n  const n = new Uint8Array(e);\n  let i = 0;\n  for (const e of t) n.set(new Uint8Array(e), i), i += e.byteLength;\n  return n;\n}\nfunction p(t) {\n  const n = new Uint8Array(t.buffer, t.byteOffset, e.length);\n  if (n[0] !== e[0] || n[1] !== e[1] || n[2] !== e[2] || n[3] !== e[3] || n[4] !== e[4] || n[5] !== e[5] || n[6] !== e[6] || n[7] !== e[7] || n[8] !== e[8] || n[9] !== e[9] || n[10] !== e[10] || n[11] !== e[11]) throw new Error(\"Missing KTX 2.0 identifier.\");\n  const i = new U(),\n    s = 17 * Uint32Array.BYTES_PER_ELEMENT,\n    a = new c(t, e.length, s, !0);\n  i.vkFormat = a._nextUint32(), i.typeSize = a._nextUint32(), i.pixelWidth = a._nextUint32(), i.pixelHeight = a._nextUint32(), i.pixelDepth = a._nextUint32(), i.layerCount = a._nextUint32(), i.faceCount = a._nextUint32();\n  const r = a._nextUint32();\n  i.supercompressionScheme = a._nextUint32();\n  const o = a._nextUint32(),\n    l = a._nextUint32(),\n    f = a._nextUint32(),\n    h = a._nextUint32(),\n    g = a._nextUint64(),\n    p = a._nextUint64(),\n    x = new c(t, e.length + s, 3 * r * 8, !0);\n  for (let e = 0; e < r; e++) i.levels.push({\n    levelData: new Uint8Array(t.buffer, t.byteOffset + x._nextUint64(), x._nextUint64()),\n    uncompressedByteLength: x._nextUint64()\n  });\n  const u = new c(t, o, l, !0),\n    y = {\n      vendorId: u._skip(4)._nextUint16(),\n      descriptorType: u._nextUint16(),\n      versionNumber: u._nextUint16(),\n      descriptorBlockSize: u._nextUint16(),\n      colorModel: u._nextUint8(),\n      colorPrimaries: u._nextUint8(),\n      transferFunction: u._nextUint8(),\n      flags: u._nextUint8(),\n      texelBlockDimension: {\n        x: u._nextUint8() + 1,\n        y: u._nextUint8() + 1,\n        z: u._nextUint8() + 1,\n        w: u._nextUint8() + 1\n      },\n      bytesPlane: [u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8()],\n      samples: []\n    },\n    D = (y.descriptorBlockSize / 4 - 6) / 4;\n  for (let t = 0; t < D; t++) y.samples[t] = {\n    bitOffset: u._nextUint16(),\n    bitLength: u._nextUint8(),\n    channelID: u._nextUint8(),\n    samplePosition: [u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8()],\n    sampleLower: u._nextUint32(),\n    sampleUpper: u._nextUint32()\n  };\n  i.dataFormatDescriptor.length = 0, i.dataFormatDescriptor.push(y);\n  const b = new c(t, f, h, !0);\n  for (; b._offset < h;) {\n    const t = b._nextUint32(),\n      e = b._scan(t),\n      n = _(e),\n      s = b._scan(t - e.byteLength);\n    i.keyValue[n] = n.match(/^ktx/i) ? _(s) : s, b._offset % 4 && b._skip(4 - b._offset % 4);\n  }\n  if (p <= 0) return i;\n  const d = new c(t, g, p, !0),\n    B = d._nextUint16(),\n    w = d._nextUint16(),\n    A = d._nextUint32(),\n    S = d._nextUint32(),\n    m = d._nextUint32(),\n    L = d._nextUint32(),\n    I = [];\n  for (let t = 0; t < r; t++) I.push({\n    imageFlags: d._nextUint32(),\n    rgbSliceByteOffset: d._nextUint32(),\n    rgbSliceByteLength: d._nextUint32(),\n    alphaSliceByteOffset: d._nextUint32(),\n    alphaSliceByteLength: d._nextUint32()\n  });\n  const R = g + d._offset,\n    E = R + A,\n    T = E + S,\n    O = T + m,\n    P = new Uint8Array(t.buffer, t.byteOffset + R, A),\n    C = new Uint8Array(t.buffer, t.byteOffset + E, S),\n    F = new Uint8Array(t.buffer, t.byteOffset + T, m),\n    G = new Uint8Array(t.buffer, t.byteOffset + O, L);\n  return i.globalData = {\n    endpointCount: B,\n    selectorCount: w,\n    imageDescs: I,\n    endpointsData: P,\n    selectorsData: C,\n    tablesData: F,\n    extendedData: G\n  }, i;\n}\nfunction x() {\n  return (x = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n      for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nconst u = {\n  keepWriter: !1\n};\nfunction y(n, s = {}) {\n  s = x({}, u, s);\n  let a = new ArrayBuffer(0);\n  if (n.globalData) {\n    const t = new ArrayBuffer(20 + 5 * n.globalData.imageDescs.length * 4),\n      e = new DataView(t);\n    e.setUint16(0, n.globalData.endpointCount, !0), e.setUint16(2, n.globalData.selectorCount, !0), e.setUint32(4, n.globalData.endpointsData.byteLength, !0), e.setUint32(8, n.globalData.selectorsData.byteLength, !0), e.setUint32(12, n.globalData.tablesData.byteLength, !0), e.setUint32(16, n.globalData.extendedData.byteLength, !0);\n    for (let t = 0; t < n.globalData.imageDescs.length; t++) {\n      const i = n.globalData.imageDescs[t];\n      e.setUint32(20 + 5 * t * 4 + 0, i.imageFlags, !0), e.setUint32(20 + 5 * t * 4 + 4, i.rgbSliceByteOffset, !0), e.setUint32(20 + 5 * t * 4 + 8, i.rgbSliceByteLength, !0), e.setUint32(20 + 5 * t * 4 + 12, i.alphaSliceByteOffset, !0), e.setUint32(20 + 5 * t * 4 + 16, i.alphaSliceByteLength, !0);\n    }\n    a = g([t, n.globalData.endpointsData, n.globalData.selectorsData, n.globalData.tablesData, n.globalData.extendedData]);\n  }\n  const r = [];\n  let o = n.keyValue;\n  s.keepWriter || (o = x({}, n.keyValue, {\n    KTXwriter: \"KTX-Parse v0.0.5\"\n  }));\n  for (const e in o) {\n    const n = o[e],\n      i = h(e),\n      s = \"string\" == typeof n ? h(n) : n,\n      a = i.byteLength + 1 + s.byteLength + 1,\n      l = a % 4 ? 4 - a % 4 : 0;\n    r.push(g([new Uint32Array([a]), i, t, s, t, new Uint8Array(l).fill(0)]));\n  }\n  const l = g(r),\n    f = new ArrayBuffer(44),\n    U = new DataView(f);\n  if (1 !== n.dataFormatDescriptor.length || n.dataFormatDescriptor[0].descriptorType !== i.BASICFORMAT) throw new Error(\"Only BASICFORMAT Data Format Descriptor output supported.\");\n  const c = n.dataFormatDescriptor[0];\n  U.setUint32(0, 44, !0), U.setUint16(4, c.vendorId, !0), U.setUint16(6, c.descriptorType, !0), U.setUint16(8, c.versionNumber, !0), U.setUint16(10, c.descriptorBlockSize, !0), U.setUint8(12, c.colorModel), U.setUint8(13, c.colorPrimaries), U.setUint8(14, c.transferFunction), U.setUint8(15, c.flags), U.setUint8(16, c.texelBlockDimension.x - 1), U.setUint8(17, c.texelBlockDimension.y - 1), U.setUint8(18, c.texelBlockDimension.z - 1), U.setUint8(19, c.texelBlockDimension.w - 1);\n  for (let t = 0; t < 8; t++) U.setUint8(20 + t, c.bytesPlane[t]);\n  for (let t = 0; t < c.samples.length; t++) {\n    const e = c.samples[t],\n      n = 28 + 16 * t;\n    U.setUint16(n + 0, e.bitOffset, !0), U.setUint8(n + 2, e.bitLength), U.setUint8(n + 3, e.channelID), U.setUint8(n + 4, e.samplePosition[0]), U.setUint8(n + 5, e.samplePosition[1]), U.setUint8(n + 6, e.samplePosition[2]), U.setUint8(n + 7, e.samplePosition[3]), U.setUint32(n + 8, e.sampleLower, !0), U.setUint32(n + 12, e.sampleUpper, !0);\n  }\n  const _ = e.length + 68 + 3 * n.levels.length * 8,\n    p = _ + f.byteLength;\n  let y = p + l.byteLength;\n  y % 8 && (y += 8 - y % 8);\n  const D = [],\n    b = new DataView(new ArrayBuffer(3 * n.levels.length * 8));\n  let d = y + a.byteLength;\n  for (let t = 0; t < n.levels.length; t++) {\n    const e = n.levels[t];\n    D.push(e.levelData), b.setBigUint64(24 * t + 0, BigInt(d), !0), b.setBigUint64(24 * t + 8, BigInt(e.levelData.byteLength), !0), b.setBigUint64(24 * t + 16, BigInt(e.uncompressedByteLength), !0), d += e.levelData.byteLength;\n  }\n  const B = new ArrayBuffer(68),\n    w = new DataView(B);\n  return w.setUint32(0, n.vkFormat, !0), w.setUint32(4, n.typeSize, !0), w.setUint32(8, n.pixelWidth, !0), w.setUint32(12, n.pixelHeight, !0), w.setUint32(16, n.pixelDepth, !0), w.setUint32(20, n.layerCount, !0), w.setUint32(24, n.faceCount, !0), w.setUint32(28, n.levels.length, !0), w.setUint32(32, n.supercompressionScheme, !0), w.setUint32(36, _, !0), w.setUint32(40, f.byteLength, !0), w.setUint32(44, p, !0), w.setUint32(48, l.byteLength, !0), w.setBigUint64(52, BigInt(y), !0), w.setBigUint64(60, BigInt(a.byteLength), !0), new Uint8Array(g([new Uint8Array(e).buffer, B, b.buffer, f, l, new ArrayBuffer(y - (p + l.byteLength)), a, ...D]));\n}\nexport { U as KTX2Container, p as read, y as write };","map":{"version":3,"names":["t","Uint8Array","e","n","i","s","a","r","o","l","f","NONE","BASISLZ","ZSTD","ZLIB","BASICFORMAT","UNSPECIFIED","ETC1S","UASTC","SRGB","LINEAR","ITU","NTSC","SLOG","SLOG2","ALPHA_STRAIGHT","ALPHA_PREMULTIPLIED","RGB","RRR","GGG","AAA","RGBA","RRRG","U","constructor","vkFormat","typeSize","pixelWidth","pixelHeight","pixelDepth","layerCount","faceCount","supercompressionScheme","levels","dataFormatDescriptor","vendorId","descriptorType","versionNumber","descriptorBlockSize","colorModel","colorPrimaries","transferFunction","flags","texelBlockDimension","x","y","z","w","bytesPlane","samples","keyValue","globalData","c","_dataView","DataView","buffer","byteOffset","_littleEndian","_offset","_nextUint8","getUint8","_nextUint16","getUint16","_nextUint32","getUint32","_nextUint64","_skip","_scan","h","TextEncoder","encode","Buffer","from","_","TextDecoder","decode","toString","g","byteLength","set","p","length","Error","Uint32Array","BYTES_PER_ELEMENT","push","levelData","uncompressedByteLength","u","D","bitOffset","bitLength","channelID","samplePosition","sampleLower","sampleUpper","b","match","d","B","A","S","m","L","I","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","R","E","T","O","P","C","F","G","endpointCount","selectorCount","imageDescs","endpointsData","selectorsData","tablesData","extendedData","Object","assign","arguments","prototype","hasOwnProperty","call","apply","keepWriter","ArrayBuffer","setUint16","setUint32","KTXwriter","fill","setUint8","setBigUint64","BigInt","KTX2Container","read","write"],"sources":["../src/constants.ts","../src/container.ts","../src/buffer-reader.ts","../src/util.ts","../src/read.ts","../src/write.ts"],"sourcesContent":["///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\nexport const KTX_WRITER = `KTX-Parse v${PACKAGE_VERSION}`;\n\nexport const NUL = new Uint8Array([0x00]);\n\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KTX2_ID = [\n\t// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t0xAB, 0x4B, 0x54, 0x58, 0x20, 0x32, 0x30, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n];\n\nexport const HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\nexport enum KTX2SupercompressionScheme {\n\tNONE = 0,\n\tBASISLZ = 1,\n\tZSTD = 2,\n\tZLIB = 3,\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport enum KTX2DataFormatType {\n    BASICFORMAT = 0x00,\n};\n\nexport const KHR_DF_VENDORID_KHRONOS = 0;\n\nexport const KHR_DF_VERSION = 2;\n\nexport const KHR_DF_BLOCKSIZE = 40;\n\nexport const VK_FORMAT_UNDEFINED = 0;\n\nexport enum KTX2DataFormatModel {\n    UNSPECIFIED = 0,\n\tETC1S = 163,\n\tUASTC = 166,\n};\n\nexport enum KTX2DataFormatPrimaries {\n    UNSPECIFIED = 0,\n    SRGB = 1,\n};\n\nexport enum KTX2DataFormatTransfer {\n    UNSPECIFIED = 0,\n    LINEAR = 1,\n    SRGB = 2,\n    ITU = 3,\n    NTSC = 4,\n    SLOG = 5,\n    SLOG2 = 6,\n};\n\nexport enum KTX2DataFormatFlags {\n    ALPHA_STRAIGHT = 0,\n    ALPHA_PREMULTIPLIED = 1,\n};\n\nexport enum KTX2DataFormatChannelETC1S {\n    RGB = 0,\n    RRR = 3,\n    GGG = 4,\n    AAA = 15,\n};\n\nexport enum KTX2DataFormatChannelUASTC {\n    RGB = 0,\n    RGBA = 3,\n    RRR = 4,\n    RRRG = 5,\n};\n","import { KHR_DF_BLOCKSIZE, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, KTX2DataFormatFlags, KTX2DataFormatModel, KTX2DataFormatPrimaries, KTX2DataFormatType, KTX2SupercompressionScheme, VK_FORMAT_UNDEFINED } from './constants';\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nexport class KTX2Container {\n\t/**\n\t * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n\t * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n\t */\n\tpublic vkFormat = VK_FORMAT_UNDEFINED;\n\n\t/**\n\t * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n\t * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n\t */\n\tpublic typeSize: number = 1;\n\n\t/** Width of the texture image for level 0, in pixels. */\n\tpublic pixelWidth: number = 0;\n\n\t/** Height of the texture image for level 0, in pixels. */\n\tpublic pixelHeight: number = 0;\n\n\t/** Depth of the texture image for level 0, in pixels (3D textures only). */\n\tpublic pixelDepth: number = 0;\n\n\t/** Number of array elements (array textures only). */\n\tpublic layerCount: number = 0;\n\n\t/**\n\t * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n\t * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n\t * order.\n\t */\n\tpublic faceCount: number = 1;\n\n\t/** Indicates which supercompression scheme has been applied to mip level images, if any. */\n\tpublic supercompressionScheme = KTX2SupercompressionScheme.NONE;\n\n\t/** Mip levels, ordered largest (original) to smallest (~1px). */\n\tpublic levels: KTX2Level[] = [];\n\n\t/** Data Format Descriptor. */\n\tpublic dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat[] = [{\n\t\tvendorId: KHR_DF_VENDORID_KHRONOS,\n\t\tdescriptorType: KTX2DataFormatType.BASICFORMAT,\n\t\tversionNumber: KHR_DF_VERSION,\n\t\tdescriptorBlockSize: KHR_DF_BLOCKSIZE,\n\t\tcolorModel: KTX2DataFormatModel.UNSPECIFIED,\n\t\tcolorPrimaries: KTX2DataFormatPrimaries.SRGB,\n\t\ttransferFunction: KTX2DataFormatPrimaries.SRGB,\n\t\tflags: KTX2DataFormatFlags.ALPHA_STRAIGHT,\n\t\ttexelBlockDimension: {x: 4, y: 4, z: 1, w: 1},\n\t\tbytesPlane: [],\n\t\tsamples: [],\n\t}];\n\n\t/** Key/Value Data. */\n\tpublic keyValue: {[key: string]: string | Uint8Array} = {};\n\n\t/** Supercompression Global Data. */\n\tpublic globalData: KTX2GlobalDataBasisLZ | null = null;\n}\n\n\n///////////////////////////////////////////////////\n// Mip Levels.\n///////////////////////////////////////////////////\n\nexport interface KTX2Level {\n\t/** Compressed data of the mip level. */\n\tlevelData: Uint8Array;\n\n\t/**\n\t * Size of the mip level after reflation from supercompression, if applicable. When\n\t * `supercompressionType` is BASISLZ, `uncompressedByteLength` must be 0. When\n\t * `supercompressionType` is `NONE`, `uncompressedByteLength` must match the `levelData` byte\n\t * length.\n\t *\n\t * _**NOTICE:** this implies that for formats such as UASTC, `uncompressedByteLength` may\n\t * indicate size after ZSTD reflation (and of transcoded ASTC data), but does _not_ indicate\n\t * size of decoded RGBA32 pixels._\n\t */\n\tuncompressedByteLength: number;\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport interface KTX2DataFormatDescriptorBasicFormat {\n\tvendorId: number;\n\tdescriptorType: number;\n\tversionNumber: number;\n\tdescriptorBlockSize: number;\n\tcolorModel: number;\n\tcolorPrimaries: number;\n\ttransferFunction: number;\n\tflags: number;\n\ttexelBlockDimension: KTX2BasicFormatTexelBlockDimensions;\n\tbytesPlane: number[];\n\tsamples: KTX2BasicFormatSample[],\n};\n\nexport interface KTX2BasicFormatTexelBlockDimensions {\n\tx: number;\n\ty: number;\n\tz: number;\n\tw: number;\n};\n\nexport interface KTX2BasicFormatSample {\n\tbitOffset: number;\n\tbitLength: number;\n\tchannelID: number;\n\tsamplePosition: number[];\n\tsampleLower: number;\n\tsampleUpper: number;\n};\n\n\n///////////////////////////////////////////////////\n// Supercompression Global Data.\n///////////////////////////////////////////////////\n\nexport interface KTX2GlobalDataBasisLZ {\n\tendpointCount: number;\n\tselectorCount: number;\n\timageDescs: KTX2GlobalDataBasisLZImageDesc[];\n\tendpointsData: Uint8Array;\n\tselectorsData: Uint8Array;\n\ttablesData: Uint8Array;\n\textendedData: Uint8Array;\n};\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n\timageFlags: number;\n\trgbSliceByteOffset: number;\n\trgbSliceByteLength: number;\n\talphaSliceByteOffset: number;\n\talphaSliceByteLength: number;\n};\n","export class BufferReader {\n\tprivate _dataView: DataView;\n\tprivate _littleEndian: boolean;\n\tpublic _offset: number;\n\n\tconstructor(data: Uint8Array, byteOffset: number, byteLength: number, littleEndian: boolean) {\n\t\tthis._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n\t\tthis._littleEndian = littleEndian;\n\t\tthis._offset = 0;\n\t}\n\n\t_nextUint8() {\n\t\tconst value = this._dataView.getUint8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn value;\n\t}\n\n\t_nextUint16() {\n\t\tconst value = this._dataView.getUint16(this._offset, this._littleEndian);\n\t\tthis._offset += 2;\n\t\treturn value;\n\t}\n\n\t_nextUint32() {\n\t\tconst value = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint64() {\n\t\tconst left = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tconst right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\t\t// TODO(cleanup): Just test this...\n\t\t// const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\t\tconst value = left + (2 ** 32 * right);\n\t\tthis._offset += 8;\n\t\treturn value;\n\t}\n\n\t_skip(bytes: number) {\n\t\tthis._offset += bytes;\n\t\treturn this;\n\t}\n\n\t_scan(maxByteLength: number, term: number = 0x00): Uint8Array {\n\t\tconst byteOffset = this._offset;\n\t\tlet byteLength = 0;\n\t\twhile (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n\t\t\tbyteLength++;\n\t\t\tthis._offset++;\n\t\t}\n\n\t\tif (byteLength < maxByteLength) this._offset++;\n\n\t\treturn new Uint8Array(\n\t\t\tthis._dataView.buffer,\n\t\t\tthis._dataView.byteOffset + byteOffset,\n\t\t\tbyteLength\n\t\t);\n\t}\n}\n","\n/** Encodes text to an ArrayBuffer. */\nexport function encodeText(text: string): Uint8Array {\n\tif (typeof TextEncoder !== 'undefined') {\n\t\treturn new TextEncoder().encode(text);\n\t}\n\treturn Buffer.from(text);\n}\n\n/** Decodes an ArrayBuffer to text. */\nexport function decodeText(buffer: Uint8Array): string {\n\tif (typeof TextDecoder !== 'undefined') {\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\treturn Buffer.from(buffer).toString('utf8');\n}\n\n/** Concatenates N ArrayBuffers. */\nexport function concat (buffers: (ArrayBuffer | Uint8Array)[]): Uint8Array {\n\tlet totalByteLength = 0;\n\tfor (const buffer of buffers) {\n\t\ttotalByteLength += buffer.byteLength;\n\t}\n\n\tconst result = new Uint8Array(totalByteLength);\n\tlet byteOffset = 0;\n\n\tfor (const buffer of buffers) {\n\t\tresult.set(new Uint8Array(buffer), byteOffset);\n\t\tbyteOffset += buffer.byteLength;\n\t}\n\n\treturn result;\n}","import { BufferReader } from './buffer-reader';\nimport { KTX2_ID } from './constants';\nimport { KTX2Container, KTX2DataFormatDescriptorBasicFormat } from './container';\nimport { decodeText } from './util';\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nexport function read(data: Uint8Array): KTX2Container {\n\n\t///////////////////////////////////////////////////\n\t// KTX 2.0 Identifier.\n\t///////////////////////////////////////////////////\n\n\tconst id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\tif (id[0] !== KTX2_ID[0] || // '´'\n\t\tid[1] !== KTX2_ID[1] || // 'K'\n\t\tid[2] !== KTX2_ID[2] || // 'T'\n\t\tid[3] !== KTX2_ID[3] || // 'X'\n\t\tid[4] !== KTX2_ID[4] || // ' '\n\t\tid[5] !== KTX2_ID[5] || // '2'\n\t\tid[6] !== KTX2_ID[6] || // '0'\n\t\tid[7] !== KTX2_ID[7] || // 'ª'\n\t\tid[8] !== KTX2_ID[8] || // '\\r'\n\t\tid[9] !== KTX2_ID[9] || // '\\n'\n\t\tid[10] !== KTX2_ID[10] || // '\\x1A'\n\t\tid[11] !== KTX2_ID[11] // '\\n'\n\t) {\n\t\tthrow new Error('Missing KTX 2.0 identifier.');\n\t}\n\n\tconst container = new KTX2Container();\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n\tconst headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n\n\tcontainer.vkFormat = headerReader._nextUint32();\n\tcontainer.typeSize = headerReader._nextUint32();\n\tcontainer.pixelWidth = headerReader._nextUint32();\n\tcontainer.pixelHeight = headerReader._nextUint32();\n\tcontainer.pixelDepth = headerReader._nextUint32();\n\tcontainer.layerCount = headerReader._nextUint32();\n\tcontainer.faceCount = headerReader._nextUint32();\n\n\tconst levelCount = headerReader._nextUint32();\n\n\tcontainer.supercompressionScheme = headerReader._nextUint32();\n\n\tconst dfdByteOffset = headerReader._nextUint32();\n\tconst dfdByteLength = headerReader._nextUint32();\n\tconst kvdByteOffset = headerReader._nextUint32();\n\tconst kvdByteLength = headerReader._nextUint32();\n\tconst sgdByteOffset = headerReader._nextUint64();\n\tconst sgdByteLength = headerReader._nextUint64();\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelByteLength = levelCount * 3 * 8;\n\tconst levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\tcontainer.levels.push({\n\t\t\tlevelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n\t\t\tuncompressedByteLength: levelReader._nextUint64(),\n\t\t});\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n\n\tconst dfd: KTX2DataFormatDescriptorBasicFormat = {\n\t\tvendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n\t\tdescriptorType: dfdReader._nextUint16(),\n\t\tversionNumber: dfdReader._nextUint16(),\n\t\tdescriptorBlockSize: dfdReader._nextUint16(),\n\t\tcolorModel: dfdReader._nextUint8(),\n\t\tcolorPrimaries: dfdReader._nextUint8(),\n\t\ttransferFunction: dfdReader._nextUint8(),\n\t\tflags: dfdReader._nextUint8(),\n\t\ttexelBlockDimension: {\n\t\t\tx: dfdReader._nextUint8() + 1,\n\t\t\ty: dfdReader._nextUint8() + 1,\n\t\t\tz: dfdReader._nextUint8() + 1,\n\t\t\tw: dfdReader._nextUint8() + 1,\n\t\t},\n\t\tbytesPlane: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tsamples: [],\n\t};\n\n\tconst sampleStart = 6;\n\tconst sampleWords = 4;\n\tconst numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n\tfor (let i = 0; i < numSamples; i ++) {\n\t\tdfd.samples[ i ] = {\n\t\t\tbitOffset: dfdReader._nextUint16(),\n\t\t\tbitLength: dfdReader._nextUint8(),\n\t\t\tchannelID: dfdReader._nextUint8(),\n\t\t\tsamplePosition: [\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t],\n\t\t\tsampleLower: dfdReader._nextUint32(),\n\t\t\tsampleUpper: dfdReader._nextUint32(),\n\t\t};\n\t}\n\n\tcontainer.dataFormatDescriptor.length = 0;\n\tcontainer.dataFormatDescriptor.push(dfd);\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n\twhile (kvdReader._offset < kvdByteLength) {\n\t\tconst keyValueByteLength = kvdReader._nextUint32();\n\t\tconst keyData = kvdReader._scan(keyValueByteLength);\n\t\tconst key = decodeText(keyData);\n\n\t\tconst valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n\t\tcontainer.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData;\n\n\t\t// 4-byte alignment.\n\t\tif (kvdReader._offset % 4) kvdReader._skip(4 - (kvdReader._offset % 4));\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tif (sgdByteLength <= 0) return container;\n\n\tconst sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n\tconst endpointCount = sgdReader._nextUint16();\n\tconst selectorCount = sgdReader._nextUint16();\n\tconst endpointsByteLength = sgdReader._nextUint32();\n\tconst selectorsByteLength = sgdReader._nextUint32();\n\tconst tablesByteLength = sgdReader._nextUint32();\n\tconst extendedByteLength = sgdReader._nextUint32();\n\n\tconst imageDescs = [];\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\timageDescs.push({\n\t\t\timageFlags: sgdReader._nextUint32(),\n\t\t\trgbSliceByteOffset: sgdReader._nextUint32(),\n\t\t\trgbSliceByteLength: sgdReader._nextUint32(),\n\t\t\talphaSliceByteOffset: sgdReader._nextUint32(),\n\t\t\talphaSliceByteLength: sgdReader._nextUint32(),\n\t\t});\n\t}\n\n\tconst endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n\tconst selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n\tconst tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n\tconst extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n\tconst endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n\tconst selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n\tconst tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n\tconst extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n\n\tcontainer.globalData = {\n\t\tendpointCount,\n\t\tselectorCount,\n\t\timageDescs,\n\t\tendpointsData,\n\t\tselectorsData,\n\t\ttablesData,\n\t\textendedData,\n\t};\n\n\treturn container;\n}\n","import { HEADER_BYTE_LENGTH, KTX2DataFormatType, KTX2_ID, KTX_WRITER, NUL } from './constants';\nimport { KTX2Container } from './container';\nimport { concat, encodeText } from './util';\n\ninterface WriteOptions {keepWriter?: boolean};\nconst DEFAULT_OPTIONS: WriteOptions = {keepWriter: false};\n\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nexport function write(container: KTX2Container, options: WriteOptions = {}): Uint8Array {\n\toptions = {...DEFAULT_OPTIONS, ...options};\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tlet sgdBuffer = new ArrayBuffer(0);\n\tif (container.globalData) {\n\t\tconst sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n\t\tconst sgdHeaderView = new DataView(sgdHeaderBuffer);\n\t\tsgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n\t\tsgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n\t\tsgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n\t\tsgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n\t\tfor (let i = 0; i < container.globalData.imageDescs.length; i++) {\n\t\t\tconst imageDesc = container.globalData.imageDescs[i];\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n\t\t}\n\n\t\tsgdBuffer = concat([\n\t\t\tsgdHeaderBuffer,\n\t\t\tcontainer.globalData.endpointsData,\n\t\t\tcontainer.globalData.selectorsData,\n\t\t\tcontainer.globalData.tablesData,\n\t\t\tcontainer.globalData.extendedData,\n\t\t]);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst keyValueData: Uint8Array[] = [];\n\tlet keyValue = container.keyValue;\n\n\tif (!options.keepWriter) {\n\t\tkeyValue = {...container.keyValue, 'KTXwriter': KTX_WRITER};\n\t}\n\n\tfor (const key in keyValue) {\n\t\tconst value = keyValue[key];\n\t\tconst keyData = encodeText(key);\n\t\tconst valueData = typeof value === 'string' ? encodeText(value) : value;\n\t\tconst kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n\t\tconst kvPadding = kvByteLength % 4 ? (4 - (kvByteLength % 4)) : 0; // align(4)\n\t\tkeyValueData.push(concat([\n\t\t\tnew Uint32Array([kvByteLength]),\n\t\t\tkeyData,\n\t\t\tNUL,\n\t\t\tvalueData,\n\t\t\tNUL,\n\t\t\tnew Uint8Array(kvPadding).fill(0x00), // align(4)\n\t\t]));\n\t}\n\n\tconst kvdBuffer = concat(keyValueData);\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdBuffer = new ArrayBuffer(44);\n\tconst dfdView = new DataView(dfdBuffer);\n\n\tif (container.dataFormatDescriptor.length !== 1\n\t\t\t|| container.dataFormatDescriptor[0].descriptorType !== KTX2DataFormatType.BASICFORMAT) {\n\t\tthrow new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n\t}\n\n\tconst dfd = container.dataFormatDescriptor[0];\n\n\tdfdView.setUint32(0, 44, true);\n\tdfdView.setUint16(4, dfd.vendorId, true);\n\tdfdView.setUint16(6, dfd.descriptorType, true);\n\tdfdView.setUint16(8, dfd.versionNumber, true);\n\tdfdView.setUint16(10, dfd.descriptorBlockSize, true);\n\n\tdfdView.setUint8(12, dfd.colorModel);\n\tdfdView.setUint8(13, dfd.colorPrimaries);\n\tdfdView.setUint8(14, dfd.transferFunction);\n\tdfdView.setUint8(15, dfd.flags);\n\n\tdfdView.setUint8(16, dfd.texelBlockDimension.x - 1);\n\tdfdView.setUint8(17, dfd.texelBlockDimension.y - 1);\n\tdfdView.setUint8(18, dfd.texelBlockDimension.z - 1);\n\tdfdView.setUint8(19, dfd.texelBlockDimension.w - 1);\n\n\tfor (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n\tfor (let i = 0; i < dfd.samples.length; i++) {\n\t\tconst sample = dfd.samples[i];\n\t\tconst sampleByteOffset = 28 + i * 16;\n\n\t\tdfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n\t\tdfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n\t\tdfdView.setUint8(sampleByteOffset + 3, sample.channelID);\n\n\t\tdfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n\t\tdfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n\t\tdfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n\t\tdfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n\t\tdfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\tdfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data alignment.\n\t///////////////////////////////////////////////////\n\n\tconst dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n\tconst kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n\tlet sgdByteOffset = kvdByteOffset + kvdBuffer.byteLength;\n\tif (sgdByteOffset % 8) sgdByteOffset += 8 - (sgdByteOffset % 8); // align(8)\n\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelData: Uint8Array[] = [];\n\tconst levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n\n\tlet levelDataByteOffset = sgdByteOffset + sgdBuffer.byteLength;\n\tfor (let i = 0; i < container.levels.length; i++) {\n\t\tconst level = container.levels[i];\n\t\tlevelData.push(level.levelData);\n\t\tlevelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffset), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n\t\tlevelDataByteOffset += level.levelData.byteLength;\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n\tconst headerView = new DataView(headerBuffer);\n\theaderView.setUint32(0, container.vkFormat, true);\n\theaderView.setUint32(4, container.typeSize, true);\n\theaderView.setUint32(8, container.pixelWidth, true);\n\theaderView.setUint32(12, container.pixelHeight, true);\n\theaderView.setUint32(16, container.pixelDepth, true);\n\theaderView.setUint32(20, container.layerCount, true);\n\theaderView.setUint32(24, container.faceCount, true);\n\theaderView.setUint32(28, container.levels.length, true);\n\theaderView.setUint32(32, container.supercompressionScheme, true);\n\n\theaderView.setUint32(36, dfdByteOffset, true);\n\theaderView.setUint32(40, dfdBuffer.byteLength, true);\n\theaderView.setUint32(44, kvdByteOffset, true);\n\theaderView.setUint32(48, kvdBuffer.byteLength, true);\n\theaderView.setBigUint64(52, BigInt(sgdByteOffset), true);\n\theaderView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n\n\n\t///////////////////////////////////////////////////\n\t// Compose.\n\t///////////////////////////////////////////////////\n\n\treturn new Uint8Array(concat([\n\t\tnew Uint8Array(KTX2_ID).buffer,\n\t\theaderBuffer,\n\t\tlevelIndex.buffer,\n\t\tdfdBuffer,\n\t\tkvdBuffer,\n\t\tnew ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)), // align(8)\n\t\tsgdBuffer,\n\t\t...levelData,\n\t]));\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}