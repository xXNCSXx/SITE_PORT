{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nvar vertexDict = ['color', 'color2'],\n  fragmentDict = ['vColor', 'vColor2'];\nfunction ColorsNode(index) {\n  TempNode.call(this, 'v4', {\n    shared: false\n  });\n  this.index = index || 0;\n}\nColorsNode.prototype = Object.create(TempNode.prototype);\nColorsNode.prototype.constructor = ColorsNode;\nColorsNode.prototype.nodeType = 'Colors';\nColorsNode.prototype.generate = function (builder, output) {\n  builder.requires.color[this.index] = true;\n  var result = builder.isShader('vertex') ? vertexDict[this.index] : fragmentDict[this.index];\n  return builder.format(result, this.getType(builder), output);\n};\nColorsNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.index = source.index;\n  return this;\n};\nColorsNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.index = this.index;\n  }\n  return data;\n};\nexport { ColorsNode };","map":{"version":3,"names":["TempNode","vertexDict","fragmentDict","ColorsNode","index","call","shared","prototype","Object","create","constructor","nodeType","generate","builder","output","requires","color","result","isShader","format","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/nodes/accessors/ColorsNode.js"],"sourcesContent":["import { TempNode } from '../core/TempNode.js';\n\nvar vertexDict = ['color', 'color2'],\n    fragmentDict = ['vColor', 'vColor2'];\n\nfunction ColorsNode(index) {\n  TempNode.call(this, 'v4', {\n    shared: false\n  });\n  this.index = index || 0;\n}\n\nColorsNode.prototype = Object.create(TempNode.prototype);\nColorsNode.prototype.constructor = ColorsNode;\nColorsNode.prototype.nodeType = 'Colors';\n\nColorsNode.prototype.generate = function (builder, output) {\n  builder.requires.color[this.index] = true;\n  var result = builder.isShader('vertex') ? vertexDict[this.index] : fragmentDict[this.index];\n  return builder.format(result, this.getType(builder), output);\n};\n\nColorsNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.index = source.index;\n  return this;\n};\n\nColorsNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.index = this.index;\n  }\n\n  return data;\n};\n\nexport { ColorsNode };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,qBAAqB;AAE9C,IAAIC,UAAU,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;EAChCC,YAAY,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC;AAExC,SAASC,UAAUA,CAACC,KAAK,EAAE;EACzBJ,QAAQ,CAACK,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE;IACxBC,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACF,KAAK,GAAGA,KAAK,IAAI,CAAC;AACzB;AAEAD,UAAU,CAACI,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACT,QAAQ,CAACO,SAAS,CAAC;AACxDJ,UAAU,CAACI,SAAS,CAACG,WAAW,GAAGP,UAAU;AAC7CA,UAAU,CAACI,SAAS,CAACI,QAAQ,GAAG,QAAQ;AAExCR,UAAU,CAACI,SAAS,CAACK,QAAQ,GAAG,UAAUC,OAAO,EAAEC,MAAM,EAAE;EACzDD,OAAO,CAACE,QAAQ,CAACC,KAAK,CAAC,IAAI,CAACZ,KAAK,CAAC,GAAG,IAAI;EACzC,IAAIa,MAAM,GAAGJ,OAAO,CAACK,QAAQ,CAAC,QAAQ,CAAC,GAAGjB,UAAU,CAAC,IAAI,CAACG,KAAK,CAAC,GAAGF,YAAY,CAAC,IAAI,CAACE,KAAK,CAAC;EAC3F,OAAOS,OAAO,CAACM,MAAM,CAACF,MAAM,EAAE,IAAI,CAACG,OAAO,CAACP,OAAO,CAAC,EAAEC,MAAM,CAAC;AAC9D,CAAC;AAEDX,UAAU,CAACI,SAAS,CAACc,IAAI,GAAG,UAAUC,MAAM,EAAE;EAC5CtB,QAAQ,CAACO,SAAS,CAACc,IAAI,CAAChB,IAAI,CAAC,IAAI,EAAEiB,MAAM,CAAC;EAC1C,IAAI,CAAClB,KAAK,GAAGkB,MAAM,CAAClB,KAAK;EACzB,OAAO,IAAI;AACb,CAAC;AAEDD,UAAU,CAACI,SAAS,CAACgB,MAAM,GAAG,UAAUC,IAAI,EAAE;EAC5C,IAAIC,IAAI,GAAG,IAAI,CAACC,WAAW,CAACF,IAAI,CAAC;EAEjC,IAAI,CAACC,IAAI,EAAE;IACTA,IAAI,GAAG,IAAI,CAACE,cAAc,CAACH,IAAI,CAAC;IAChCC,IAAI,CAACrB,KAAK,GAAG,IAAI,CAACA,KAAK;EACzB;EAEA,OAAOqB,IAAI;AACb,CAAC;AAED,SAAStB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}