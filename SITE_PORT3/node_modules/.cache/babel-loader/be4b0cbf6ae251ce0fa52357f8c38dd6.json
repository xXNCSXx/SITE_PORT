{"ast":null,"code":"import { createTokenInstance, EOF } from \"../../../scan/tokens_public\";\nimport { cloneArr, contains, dropRight, find, flatten, has, isEmpty, map } from \"../../../utils/utils\";\nimport { MismatchedTokenException } from \"../../exceptions_public\";\nimport { IN } from \"../../constants\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\nexport var EOF_FOLLOW_KEY = {};\nexport var IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nexport function InRuleRecoveryException(message) {\n  this.name = IN_RULE_RECOVERY_EXCEPTION;\n  this.message = message;\n}\nInRuleRecoveryException.prototype = Error.prototype;\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nvar Recoverable = /** @class */function () {\n  function Recoverable() {}\n  Recoverable.prototype.initRecoverable = function (config) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n    this.recoveryEnabled = has(config, \"recoveryEnabled\") ? config.recoveryEnabled : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  };\n  Recoverable.prototype.getTokenToInsert = function (tokType) {\n    var tokToInsert = createTokenInstance(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  };\n  Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {\n    return true;\n  };\n  Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n    var _this = this;\n    // TODO: can the resyncTokenType be cached?\n    var reSyncTokType = this.findReSyncTokenType();\n    var savedLexerState = this.exportLexerState();\n    var resyncedTokens = [];\n    var passedResyncPoint = false;\n    var nextTokenWithoutResync = this.LA(1);\n    var currToken = this.LA(1);\n    var generateErrorMessage = function () {\n      var previousToken = _this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      var msg = _this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: _this.getCurrRuleFullName()\n      });\n      var error = new MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0));\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      _this.SAVE_ERROR(error);\n    };\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  };\n  Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n    // arguments to try and perform resync into the next iteration of the many are missing\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n      return false;\n    }\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n      return false;\n    }\n    return true;\n  };\n  // Error Recovery functionality\n  Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {\n    var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    var follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  };\n  Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      var tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      var nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  };\n  Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {\n    return this.canRecoverWithSingleTokenInsertion(expectedToken, follows) || this.canRecoverWithSingleTokenDeletion(expectedToken);\n  };\n  Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {\n    var _this = this;\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n    var mismatchedTok = this.LA(1);\n    var isMisMatchedTokInFollows = find(follows, function (possibleFollowsTokType) {\n      return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n    }) !== undefined;\n    return isMisMatchedTokInFollows;\n  };\n  Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {\n    var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n    return isNextTokenWhatIsExpected;\n  };\n  Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {\n    var followKey = this.getCurrFollowKey();\n    var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return contains(currentRuleReSyncSet, tokenTypeIdx);\n  };\n  Recoverable.prototype.findReSyncTokenType = function () {\n    var allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    var nextToken = this.LA(1);\n    var k = 2;\n    while (true) {\n      var nextTokenType = nextToken.tokenType;\n      if (contains(allPossibleReSyncTokTypes, nextTokenType)) {\n        return nextTokenType;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  };\n  Recoverable.prototype.getCurrFollowKey = function () {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    var currRuleShortName = this.getLastExplicitRuleShortName();\n    var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    var prevRuleShortName = this.getPreviousExplicitRuleShortName();\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName)\n    };\n  };\n  Recoverable.prototype.buildFullFollowKeyStack = function () {\n    var _this = this;\n    var explicitRuleStack = this.RULE_STACK;\n    var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return map(explicitRuleStack, function (ruleName, idx) {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: _this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n      };\n    });\n  };\n  Recoverable.prototype.flattenFollowSet = function () {\n    var _this = this;\n    var followStack = map(this.buildFullFollowKeyStack(), function (currKey) {\n      return _this.getFollowSetFromFollowKey(currKey);\n    });\n    return flatten(followStack);\n  };\n  Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n    var followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n    return this.resyncFollows[followName];\n  };\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  };\n  Recoverable.prototype.reSyncTo = function (tokType) {\n    var resyncedTokens = [];\n    var nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  };\n  Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  };\n  Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {\n    var pathRuleStack = this.getHumanReadableRuleStack();\n    var pathOccurrenceStack = cloneArr(this.RULE_OCCURRENCE_STACK);\n    var grammarPath = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule\n    };\n    return grammarPath;\n  };\n  Recoverable.prototype.getHumanReadableRuleStack = function () {\n    var _this = this;\n    return map(this.RULE_STACK, function (currShortName) {\n      return _this.shortRuleNameToFullName(currShortName);\n    });\n  };\n  return Recoverable;\n}();\nexport { Recoverable };\nexport function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n  var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  var firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    var currRuleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[currRuleName];\n    var walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n  var expectTokAfterLastMatch = firstAfterRepInfo.token;\n  var nextTokIdx = firstAfterRepInfo.occurrence;\n  var isEndOfRule = firstAfterRepInfo.isEndOfRule;\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === undefined) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n  if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n  }\n}","map":{"version":3,"names":["createTokenInstance","EOF","cloneArr","contains","dropRight","find","flatten","has","isEmpty","map","MismatchedTokenException","IN","DEFAULT_PARSER_CONFIG","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","message","name","prototype","Error","Recoverable","initRecoverable","config","firstAfterRepMap","resyncFollows","recoveryEnabled","attemptInRepetitionRecovery","getTokenToInsert","tokType","tokToInsert","NaN","isInsertedInRecovery","canTokenTypeBeInsertedInRecovery","tryInRepetitionRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","_this","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","resyncedTokens","passedResyncPoint","nextTokenWithoutResync","LA","currToken","generateErrorMessage","previousToken","msg","errorMessageProvider","buildMismatchTokenMessage","expected","actual","previous","ruleName","getCurrRuleFullName","error","SAVE_ERROR","tokenMatcher","call","apply","SKIP_TOKEN","addToResyncTokens","importLexerState","shouldInRepetitionRecoveryBeTried","expectTokAfterLastMatch","nextTokIdx","notStuck","undefined","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","follows","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","isMisMatchedTokInFollows","possibleFollowsTokType","isNextTokenWhatIsExpected","isInCurrentRuleReSyncSet","tokenTypeIdx","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","nextToken","k","nextTokenType","tokenType","RULE_STACK","length","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","idx","followStack","currKey","followName","token","resyncTokens","push","reSyncTo","prodFunc","args","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","pathRuleStack","getHumanReadableRuleStack","pathOccurrenceStack","ruleStack","occurrenceStack","lastTok","lastTokOccurrence","currShortName","key","getKeyForAutomaticLookahead","firstAfterRepInfo","currRuleName","ruleGrammar","getGAstProductions","walker","startWalking","occurrence","isEndOfRule"],"sources":["../../../../../src/parse/parser/traits/recoverable.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}