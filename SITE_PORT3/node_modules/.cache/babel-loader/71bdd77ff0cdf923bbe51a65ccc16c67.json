{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { BufferGeometry } from 'three';\nimport { TessellateModifier } from 'three-stdlib';\nfunction useTessellation(passes = 3, maxEdgeLength) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new TessellateModifier(parseInt(maxEdgeLength), passes);\n    }\n  }, [maxEdgeLength, passes]);\n  useEffect(() => {\n    modifier.current.maxEdgeLength = maxEdgeLength;\n  }, [maxEdgeLength]);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new BufferGeometry();\n      geometry = original.current.clone();\n      geometry = modifier.current.modify(geometry);\n      ref.current.geometry = geometry;\n    }\n  }, [maxEdgeLength, passes]);\n  return ref;\n}\nexport { useTessellation };","map":{"version":3,"names":["useRef","useEffect","BufferGeometry","TessellateModifier","useTessellation","passes","maxEdgeLength","ref","original","modifier","current","geometry","clone","parseInt","modify"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/@react-three/drei/core/useTessellation.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { BufferGeometry } from 'three';\nimport { TessellateModifier } from 'three-stdlib';\n\nfunction useTessellation(passes = 3, maxEdgeLength) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new TessellateModifier(parseInt(maxEdgeLength), passes);\n    }\n  }, [maxEdgeLength, passes]);\n  useEffect(() => {\n    modifier.current.maxEdgeLength = maxEdgeLength;\n  }, [maxEdgeLength]);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new BufferGeometry();\n      geometry = original.current.clone();\n      geometry = modifier.current.modify(geometry);\n      ref.current.geometry = geometry;\n    }\n  }, [maxEdgeLength, passes]);\n  return ref;\n}\n\nexport { useTessellation };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,kBAAkB,QAAQ,cAAc;AAEjD,SAASC,eAAeA,CAACC,MAAM,GAAG,CAAC,EAAEC,aAAa,EAAE;EAClD,MAAMC,GAAG,GAAGP,MAAM,CAAC,CAAC;EACpB,MAAMQ,QAAQ,GAAGR,MAAM,CAAC,CAAC;EACzB,MAAMS,QAAQ,GAAGT,MAAM,CAAC,CAAC;EACzBC,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,QAAQ,CAACE,OAAO,EAAE;MACrBF,QAAQ,CAACE,OAAO,GAAGH,GAAG,CAACG,OAAO,CAACC,QAAQ,CAACC,KAAK,CAAC,CAAC;MAC/CH,QAAQ,CAACC,OAAO,GAAG,IAAIP,kBAAkB,CAACU,QAAQ,CAACP,aAAa,CAAC,EAAED,MAAM,CAAC;IAC5E;EACF,CAAC,EAAE,CAACC,aAAa,EAAED,MAAM,CAAC,CAAC;EAC3BJ,SAAS,CAAC,MAAM;IACdQ,QAAQ,CAACC,OAAO,CAACJ,aAAa,GAAGA,aAAa;EAChD,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EACnBL,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,CAACE,OAAO,IAAIH,GAAG,CAACG,OAAO,EAAE;MACnC,IAAIC,QAAQ,GAAG,IAAIT,cAAc,CAAC,CAAC;MACnCS,QAAQ,GAAGH,QAAQ,CAACE,OAAO,CAACE,KAAK,CAAC,CAAC;MACnCD,QAAQ,GAAGF,QAAQ,CAACC,OAAO,CAACI,MAAM,CAACH,QAAQ,CAAC;MAC5CJ,GAAG,CAACG,OAAO,CAACC,QAAQ,GAAGA,QAAQ;IACjC;EACF,CAAC,EAAE,CAACL,aAAa,EAAED,MAAM,CAAC,CAAC;EAC3B,OAAOE,GAAG;AACZ;AAEA,SAASH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}