{"ast":null,"code":"import { UniformsUtils, UniformsLib } from 'three';\nimport { Node } from '../../core/Node.js';\nimport { ExpressionNode } from '../../core/ExpressionNode.js';\nimport { ColorNode } from '../../inputs/ColorNode.js';\nimport { FloatNode } from '../../inputs/FloatNode.js';\nimport { SpecularMIPLevelNode } from '../../utils/SpecularMIPLevelNode.js';\nfunction StandardNode() {\n  Node.call(this);\n  this.color = new ColorNode(0xffffff);\n  this.roughness = new FloatNode(1);\n  this.metalness = new FloatNode(0);\n}\nStandardNode.prototype = Object.create(Node.prototype);\nStandardNode.prototype.constructor = StandardNode;\nStandardNode.prototype.nodeType = 'Standard';\nStandardNode.prototype.build = function (builder) {\n  var code;\n  builder.define('STANDARD');\n  var useClearcoat = this.clearcoat || this.clearcoatRoughness || this.clearCoatNormal;\n  if (useClearcoat) {\n    builder.define('CLEARCOAT');\n  }\n  builder.requires.lights = true;\n  builder.extensions.derivatives = true;\n  builder.extensions.shaderTextureLOD = true;\n  if (builder.isShader('vertex')) {\n    var position = this.position ? this.position.analyzeAndFlow(builder, 'v3', {\n      cache: 'position'\n    }) : undefined;\n    builder.mergeUniform(UniformsUtils.merge([UniformsLib.fog, UniformsLib.lights]));\n    if (UniformsLib.LTC_1) {\n      // add ltc data textures to material uniforms\n      builder.uniforms.ltc_1 = {\n        value: undefined\n      };\n      builder.uniforms.ltc_2 = {\n        value: undefined\n      };\n    }\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif',\n    //\"#include <encodings_pars_fragment>\", // encoding functions\n    '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <shadowmap_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>'].join('\\n'));\n    var output = ['#include <beginnormal_vertex>', '#include <morphnormal_vertex>', '#include <skinbase_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', '#ifndef FLAT_SHADED',\n    // Normal computed with derivatives when FLAT_SHADED\n    '\tvNormal = normalize( transformedNormal );', '#endif', '#include <begin_vertex>'];\n    if (position) {\n      output.push(position.code, position.result ? 'transformed = ' + position.result + ';' : '');\n    }\n    output.push('#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <fog_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', '\tvViewPosition = - mvPosition.xyz;', '#include <worldpos_vertex>', '#include <shadowmap_vertex>');\n    code = output.join('\\n');\n  } else {\n    var specularRoughness = new ExpressionNode('material.specularRoughness', 'f');\n    var clearcoatRoughness = new ExpressionNode('material.clearcoatRoughness', 'f');\n    var contextEnvironment = {\n      roughness: specularRoughness,\n      bias: new SpecularMIPLevelNode(specularRoughness),\n      viewNormal: new ExpressionNode('normal', 'v3'),\n      worldNormal: new ExpressionNode('inverseTransformDirection( geometry.normal, viewMatrix )', 'v3'),\n      gamma: true\n    };\n    var contextGammaOnly = {\n      gamma: true\n    };\n    var contextClearcoatEnvironment = {\n      roughness: clearcoatRoughness,\n      bias: new SpecularMIPLevelNode(clearcoatRoughness),\n      viewNormal: new ExpressionNode('clearcoatNormal', 'v3'),\n      worldNormal: new ExpressionNode('inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )', 'v3'),\n      gamma: true\n    }; // analyze all nodes to reuse generate codes\n\n    if (this.mask) this.mask.analyze(builder);\n    this.color.analyze(builder, {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    this.roughness.analyze(builder);\n    this.metalness.analyze(builder);\n    if (this.alpha) this.alpha.analyze(builder);\n    if (this.normal) this.normal.analyze(builder);\n    if (this.clearcoat) this.clearcoat.analyze(builder);\n    if (this.clearcoatRoughness) this.clearcoatRoughness.analyze(builder);\n    if (this.clearcoatNormal) this.clearcoatNormal.analyze(builder);\n    if (this.reflectivity) this.reflectivity.analyze(builder);\n    if (this.light) this.light.analyze(builder, {\n      cache: 'light'\n    });\n    if (this.ao) this.ao.analyze(builder);\n    if (this.ambient) this.ambient.analyze(builder);\n    if (this.shadow) this.shadow.analyze(builder);\n    if (this.emissive) this.emissive.analyze(builder, {\n      slot: 'emissive'\n    });\n    if (this.environment) {\n      // isolate environment from others inputs ( see TextureNode, CubeTextureNode )\n      // environment.analyze will detect if there is a need of calculate irradiance\n      this.environment.analyze(builder, {\n        cache: 'radiance',\n        context: contextEnvironment,\n        slot: 'radiance'\n      });\n      if (builder.requires.irradiance) {\n        this.environment.analyze(builder, {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n    if (this.sheen) this.sheen.analyze(builder); // build code\n\n    var mask = this.mask ? this.mask.flow(builder, 'b') : undefined;\n    var color = this.color.flow(builder, 'c', {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    var roughness = this.roughness.flow(builder, 'f');\n    var metalness = this.metalness.flow(builder, 'f');\n    var alpha = this.alpha ? this.alpha.flow(builder, 'f') : undefined;\n    var normal = this.normal ? this.normal.flow(builder, 'v3') : undefined;\n    var clearcoat = this.clearcoat ? this.clearcoat.flow(builder, 'f') : undefined;\n    var clearcoatRoughness = this.clearcoatRoughness ? this.clearcoatRoughness.flow(builder, 'f') : undefined;\n    var clearcoatNormal = this.clearcoatNormal ? this.clearcoatNormal.flow(builder, 'v3') : undefined;\n    var reflectivity = this.reflectivity ? this.reflectivity.flow(builder, 'f') : undefined;\n    var light = this.light ? this.light.flow(builder, 'v3', {\n      cache: 'light'\n    }) : undefined;\n    var ao = this.ao ? this.ao.flow(builder, 'f') : undefined;\n    var ambient = this.ambient ? this.ambient.flow(builder, 'c') : undefined;\n    var shadow = this.shadow ? this.shadow.flow(builder, 'c') : undefined;\n    var emissive = this.emissive ? this.emissive.flow(builder, 'c', {\n      slot: 'emissive'\n    }) : undefined;\n    var environment;\n    if (this.environment) {\n      environment = {\n        radiance: this.environment.flow(builder, 'c', {\n          cache: 'radiance',\n          context: contextEnvironment,\n          slot: 'radiance'\n        })\n      };\n      if (builder.requires.irradiance) {\n        environment.irradiance = this.environment.flow(builder, 'c', {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n    var clearcoatEnv = useClearcoat && environment ? this.environment.flow(builder, 'c', {\n      cache: 'clearcoat',\n      context: contextClearcoatEnvironment,\n      slot: 'environment'\n    }) : undefined;\n    var sheen = this.sheen ? this.sheen.flow(builder, 'c') : undefined;\n    builder.requires.transparent = alpha !== undefined;\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', '#include <dithering_pars_fragment>', '#include <fog_pars_fragment>', '#include <bsdfs>', '#include <lights_pars_begin>', '#include <lights_physical_pars_fragment>', '#include <shadowmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>'].join('\\n'));\n    var output = ['#include <clipping_planes_fragment>',\n    // add before: prevent undeclared normal\n    '\t#include <normal_fragment_begin>', '\t#include <clearcoat_normal_fragment_begin>',\n    // add before: prevent undeclared material\n    '\tPhysicalMaterial material;', '\tmaterial.diffuseColor = vec3( 1.0 );'];\n    if (mask) {\n      output.push(mask.code, 'if ( ! ' + mask.result + ' ) discard;');\n    }\n    output.push(color.code, '\tvec3 diffuseColor = ' + color.result + ';', '\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );', '#include <logdepthbuf_fragment>', roughness.code, '\tfloat roughnessFactor = ' + roughness.result + ';', metalness.code, '\tfloat metalnessFactor = ' + metalness.result + ';');\n    if (alpha) {\n      output.push(alpha.code, '#ifdef ALPHATEST', '\tif ( ' + alpha.result + ' <= ALPHATEST ) discard;', '#endif');\n    }\n    if (normal) {\n      output.push(normal.code, 'normal = ' + normal.result + ';');\n    }\n    if (clearcoatNormal) {\n      output.push(clearcoatNormal.code, 'clearcoatNormal = ' + clearcoatNormal.result + ';');\n    } // anti-aliasing code by @elalish\n\n    output.push('vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );', 'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );'); // optimization for now\n\n    output.push('material.diffuseColor = ' + (light ? 'vec3( 1.0 )' : 'diffuseColor * ( 1.0 - metalnessFactor )') + ';', 'material.specularRoughness = max( roughnessFactor, 0.0525 );', 'material.specularRoughness += geometryRoughness;', 'material.specularRoughness = min( material.specularRoughness, 1.0 );', 'material.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );');\n    if (clearcoat) {\n      output.push(clearcoat.code, 'material.clearcoat = saturate( ' + clearcoat.result + ' );' // Burley clearcoat model\n      );\n    } else if (useClearcoat) {\n      output.push('material.clearcoat = 0.0;');\n    }\n    if (clearcoatRoughness) {\n      output.push(clearcoatRoughness.code, 'material.clearcoatRoughness = max( ' + clearcoatRoughness.result + ', 0.0525 );', 'material.clearcoatRoughness += geometryRoughness;', 'material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );');\n    } else if (useClearcoat) {\n      output.push('material.clearcoatRoughness = 0.0;');\n    }\n    if (sheen) {\n      output.push('material.sheenColor = ' + sheen.result + ';');\n    }\n    if (reflectivity) {\n      output.push(reflectivity.code, 'material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( ' + reflectivity.result + ' ) ), diffuseColor, metalnessFactor );');\n    } else {\n      output.push('material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );');\n    }\n    output.push('#include <lights_fragment_begin>');\n    if (light) {\n      output.push(light.code, 'reflectedLight.directDiffuse = ' + light.result + ';'); // apply color\n\n      output.push('diffuseColor *= 1.0 - metalnessFactor;', 'reflectedLight.directDiffuse *= diffuseColor;', 'reflectedLight.indirectDiffuse *= diffuseColor;');\n    }\n    if (ao) {\n      output.push(ao.code, 'reflectedLight.indirectDiffuse *= ' + ao.result + ';', 'float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );', 'reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ' + ao.result + ', material.specularRoughness );');\n    }\n    if (ambient) {\n      output.push(ambient.code, 'reflectedLight.indirectDiffuse += ' + ambient.result + ';');\n    }\n    if (shadow) {\n      output.push(shadow.code, 'reflectedLight.directDiffuse *= ' + shadow.result + ';', 'reflectedLight.directSpecular *= ' + shadow.result + ';');\n    }\n    if (emissive) {\n      output.push(emissive.code, 'reflectedLight.directDiffuse += ' + emissive.result + ';');\n    }\n    if (environment) {\n      output.push(environment.radiance.code);\n      if (builder.requires.irradiance) {\n        output.push(environment.irradiance.code);\n      }\n      if (clearcoatEnv) {\n        output.push(clearcoatEnv.code, 'clearcoatRadiance += ' + clearcoatEnv.result + ';');\n      }\n      output.push('radiance += ' + environment.radiance.result + ';');\n      if (builder.requires.irradiance) {\n        output.push('iblIrradiance += PI * ' + environment.irradiance.result + ';');\n      }\n    }\n    output.push('#include <lights_fragment_end>');\n    output.push('vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;');\n    if (alpha) {\n      output.push('gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );');\n    } else {\n      output.push('gl_FragColor = vec4( outgoingLight, 1.0 );');\n    }\n    output.push('#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', '#include <premultiplied_alpha_fragment>', '#include <dithering_fragment>');\n    code = output.join('\\n');\n  }\n  return code;\n};\nStandardNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source); // vertex\n\n  if (source.position) this.position = source.position; // fragment\n\n  this.color = source.color;\n  this.roughness = source.roughness;\n  this.metalness = source.metalness;\n  if (source.mask) this.mask = source.mask;\n  if (source.alpha) this.alpha = source.alpha;\n  if (source.normal) this.normal = source.normal;\n  if (source.clearcoat) this.clearcoat = source.clearcoat;\n  if (source.clearcoatRoughness) this.clearcoatRoughness = source.clearcoatRoughness;\n  if (source.clearcoatNormal) this.clearcoatNormal = source.clearcoatNormal;\n  if (source.reflectivity) this.reflectivity = source.reflectivity;\n  if (source.light) this.light = source.light;\n  if (source.shadow) this.shadow = source.shadow;\n  if (source.ao) this.ao = source.ao;\n  if (source.emissive) this.emissive = source.emissive;\n  if (source.ambient) this.ambient = source.ambient;\n  if (source.environment) this.environment = source.environment;\n  if (source.sheen) this.sheen = source.sheen;\n  return this;\n};\nStandardNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n  if (!data) {\n    data = this.createJSONNode(meta); // vertex\n\n    if (this.position) data.position = this.position.toJSON(meta).uuid; // fragment\n\n    data.color = this.color.toJSON(meta).uuid;\n    data.roughness = this.roughness.toJSON(meta).uuid;\n    data.metalness = this.metalness.toJSON(meta).uuid;\n    if (this.mask) data.mask = this.mask.toJSON(meta).uuid;\n    if (this.alpha) data.alpha = this.alpha.toJSON(meta).uuid;\n    if (this.normal) data.normal = this.normal.toJSON(meta).uuid;\n    if (this.clearcoat) data.clearcoat = this.clearcoat.toJSON(meta).uuid;\n    if (this.clearcoatRoughness) data.clearcoatRoughness = this.clearcoatRoughness.toJSON(meta).uuid;\n    if (this.clearcoatNormal) data.clearcoatNormal = this.clearcoatNormal.toJSON(meta).uuid;\n    if (this.reflectivity) data.reflectivity = this.reflectivity.toJSON(meta).uuid;\n    if (this.light) data.light = this.light.toJSON(meta).uuid;\n    if (this.shadow) data.shadow = this.shadow.toJSON(meta).uuid;\n    if (this.ao) data.ao = this.ao.toJSON(meta).uuid;\n    if (this.emissive) data.emissive = this.emissive.toJSON(meta).uuid;\n    if (this.ambient) data.ambient = this.ambient.toJSON(meta).uuid;\n    if (this.environment) data.environment = this.environment.toJSON(meta).uuid;\n    if (this.sheen) data.sheen = this.sheen.toJSON(meta).uuid;\n  }\n  return data;\n};\nexport { StandardNode };","map":{"version":3,"names":["UniformsUtils","UniformsLib","Node","ExpressionNode","ColorNode","FloatNode","SpecularMIPLevelNode","StandardNode","call","color","roughness","metalness","prototype","Object","create","constructor","nodeType","build","builder","code","define","useClearcoat","clearcoat","clearcoatRoughness","clearCoatNormal","requires","lights","extensions","derivatives","shaderTextureLOD","isShader","position","analyzeAndFlow","cache","undefined","mergeUniform","merge","fog","LTC_1","uniforms","ltc_1","value","ltc_2","addParsCode","join","output","push","result","specularRoughness","contextEnvironment","bias","viewNormal","worldNormal","gamma","contextGammaOnly","contextClearcoatEnvironment","mask","analyze","slot","context","alpha","normal","clearcoatNormal","reflectivity","light","ao","ambient","shadow","emissive","environment","irradiance","sheen","flow","radiance","clearcoatEnv","transparent","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/nodes/materials/nodes/StandardNode.js"],"sourcesContent":["import { UniformsUtils, UniformsLib } from 'three';\nimport { Node } from '../../core/Node.js';\nimport { ExpressionNode } from '../../core/ExpressionNode.js';\nimport { ColorNode } from '../../inputs/ColorNode.js';\nimport { FloatNode } from '../../inputs/FloatNode.js';\nimport { SpecularMIPLevelNode } from '../../utils/SpecularMIPLevelNode.js';\n\nfunction StandardNode() {\n  Node.call(this);\n  this.color = new ColorNode(0xffffff);\n  this.roughness = new FloatNode(1);\n  this.metalness = new FloatNode(0);\n}\n\nStandardNode.prototype = Object.create(Node.prototype);\nStandardNode.prototype.constructor = StandardNode;\nStandardNode.prototype.nodeType = 'Standard';\n\nStandardNode.prototype.build = function (builder) {\n  var code;\n  builder.define('STANDARD');\n  var useClearcoat = this.clearcoat || this.clearcoatRoughness || this.clearCoatNormal;\n\n  if (useClearcoat) {\n    builder.define('CLEARCOAT');\n  }\n\n  builder.requires.lights = true;\n  builder.extensions.derivatives = true;\n  builder.extensions.shaderTextureLOD = true;\n\n  if (builder.isShader('vertex')) {\n    var position = this.position ? this.position.analyzeAndFlow(builder, 'v3', {\n      cache: 'position'\n    }) : undefined;\n    builder.mergeUniform(UniformsUtils.merge([UniformsLib.fog, UniformsLib.lights]));\n\n    if (UniformsLib.LTC_1) {\n      // add ltc data textures to material uniforms\n      builder.uniforms.ltc_1 = {\n        value: undefined\n      };\n      builder.uniforms.ltc_2 = {\n        value: undefined\n      };\n    }\n\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', //\"#include <encodings_pars_fragment>\", // encoding functions\n    '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <shadowmap_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>'].join('\\n'));\n    var output = ['#include <beginnormal_vertex>', '#include <morphnormal_vertex>', '#include <skinbase_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', '#ifndef FLAT_SHADED', // Normal computed with derivatives when FLAT_SHADED\n    '\tvNormal = normalize( transformedNormal );', '#endif', '#include <begin_vertex>'];\n\n    if (position) {\n      output.push(position.code, position.result ? 'transformed = ' + position.result + ';' : '');\n    }\n\n    output.push('#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <fog_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', '\tvViewPosition = - mvPosition.xyz;', '#include <worldpos_vertex>', '#include <shadowmap_vertex>');\n    code = output.join('\\n');\n  } else {\n    var specularRoughness = new ExpressionNode('material.specularRoughness', 'f');\n    var clearcoatRoughness = new ExpressionNode('material.clearcoatRoughness', 'f');\n    var contextEnvironment = {\n      roughness: specularRoughness,\n      bias: new SpecularMIPLevelNode(specularRoughness),\n      viewNormal: new ExpressionNode('normal', 'v3'),\n      worldNormal: new ExpressionNode('inverseTransformDirection( geometry.normal, viewMatrix )', 'v3'),\n      gamma: true\n    };\n    var contextGammaOnly = {\n      gamma: true\n    };\n    var contextClearcoatEnvironment = {\n      roughness: clearcoatRoughness,\n      bias: new SpecularMIPLevelNode(clearcoatRoughness),\n      viewNormal: new ExpressionNode('clearcoatNormal', 'v3'),\n      worldNormal: new ExpressionNode('inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )', 'v3'),\n      gamma: true\n    }; // analyze all nodes to reuse generate codes\n\n    if (this.mask) this.mask.analyze(builder);\n    this.color.analyze(builder, {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    this.roughness.analyze(builder);\n    this.metalness.analyze(builder);\n    if (this.alpha) this.alpha.analyze(builder);\n    if (this.normal) this.normal.analyze(builder);\n    if (this.clearcoat) this.clearcoat.analyze(builder);\n    if (this.clearcoatRoughness) this.clearcoatRoughness.analyze(builder);\n    if (this.clearcoatNormal) this.clearcoatNormal.analyze(builder);\n    if (this.reflectivity) this.reflectivity.analyze(builder);\n    if (this.light) this.light.analyze(builder, {\n      cache: 'light'\n    });\n    if (this.ao) this.ao.analyze(builder);\n    if (this.ambient) this.ambient.analyze(builder);\n    if (this.shadow) this.shadow.analyze(builder);\n    if (this.emissive) this.emissive.analyze(builder, {\n      slot: 'emissive'\n    });\n\n    if (this.environment) {\n      // isolate environment from others inputs ( see TextureNode, CubeTextureNode )\n      // environment.analyze will detect if there is a need of calculate irradiance\n      this.environment.analyze(builder, {\n        cache: 'radiance',\n        context: contextEnvironment,\n        slot: 'radiance'\n      });\n\n      if (builder.requires.irradiance) {\n        this.environment.analyze(builder, {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n\n    if (this.sheen) this.sheen.analyze(builder); // build code\n\n    var mask = this.mask ? this.mask.flow(builder, 'b') : undefined;\n    var color = this.color.flow(builder, 'c', {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    var roughness = this.roughness.flow(builder, 'f');\n    var metalness = this.metalness.flow(builder, 'f');\n    var alpha = this.alpha ? this.alpha.flow(builder, 'f') : undefined;\n    var normal = this.normal ? this.normal.flow(builder, 'v3') : undefined;\n    var clearcoat = this.clearcoat ? this.clearcoat.flow(builder, 'f') : undefined;\n    var clearcoatRoughness = this.clearcoatRoughness ? this.clearcoatRoughness.flow(builder, 'f') : undefined;\n    var clearcoatNormal = this.clearcoatNormal ? this.clearcoatNormal.flow(builder, 'v3') : undefined;\n    var reflectivity = this.reflectivity ? this.reflectivity.flow(builder, 'f') : undefined;\n    var light = this.light ? this.light.flow(builder, 'v3', {\n      cache: 'light'\n    }) : undefined;\n    var ao = this.ao ? this.ao.flow(builder, 'f') : undefined;\n    var ambient = this.ambient ? this.ambient.flow(builder, 'c') : undefined;\n    var shadow = this.shadow ? this.shadow.flow(builder, 'c') : undefined;\n    var emissive = this.emissive ? this.emissive.flow(builder, 'c', {\n      slot: 'emissive'\n    }) : undefined;\n    var environment;\n\n    if (this.environment) {\n      environment = {\n        radiance: this.environment.flow(builder, 'c', {\n          cache: 'radiance',\n          context: contextEnvironment,\n          slot: 'radiance'\n        })\n      };\n\n      if (builder.requires.irradiance) {\n        environment.irradiance = this.environment.flow(builder, 'c', {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n\n    var clearcoatEnv = useClearcoat && environment ? this.environment.flow(builder, 'c', {\n      cache: 'clearcoat',\n      context: contextClearcoatEnvironment,\n      slot: 'environment'\n    }) : undefined;\n    var sheen = this.sheen ? this.sheen.flow(builder, 'c') : undefined;\n    builder.requires.transparent = alpha !== undefined;\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', '#include <dithering_pars_fragment>', '#include <fog_pars_fragment>', '#include <bsdfs>', '#include <lights_pars_begin>', '#include <lights_physical_pars_fragment>', '#include <shadowmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>'].join('\\n'));\n    var output = ['#include <clipping_planes_fragment>', // add before: prevent undeclared normal\n    '\t#include <normal_fragment_begin>', '\t#include <clearcoat_normal_fragment_begin>', // add before: prevent undeclared material\n    '\tPhysicalMaterial material;', '\tmaterial.diffuseColor = vec3( 1.0 );'];\n\n    if (mask) {\n      output.push(mask.code, 'if ( ! ' + mask.result + ' ) discard;');\n    }\n\n    output.push(color.code, '\tvec3 diffuseColor = ' + color.result + ';', '\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );', '#include <logdepthbuf_fragment>', roughness.code, '\tfloat roughnessFactor = ' + roughness.result + ';', metalness.code, '\tfloat metalnessFactor = ' + metalness.result + ';');\n\n    if (alpha) {\n      output.push(alpha.code, '#ifdef ALPHATEST', '\tif ( ' + alpha.result + ' <= ALPHATEST ) discard;', '#endif');\n    }\n\n    if (normal) {\n      output.push(normal.code, 'normal = ' + normal.result + ';');\n    }\n\n    if (clearcoatNormal) {\n      output.push(clearcoatNormal.code, 'clearcoatNormal = ' + clearcoatNormal.result + ';');\n    } // anti-aliasing code by @elalish\n\n\n    output.push('vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );', 'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );'); // optimization for now\n\n    output.push('material.diffuseColor = ' + (light ? 'vec3( 1.0 )' : 'diffuseColor * ( 1.0 - metalnessFactor )') + ';', 'material.specularRoughness = max( roughnessFactor, 0.0525 );', 'material.specularRoughness += geometryRoughness;', 'material.specularRoughness = min( material.specularRoughness, 1.0 );', 'material.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );');\n\n    if (clearcoat) {\n      output.push(clearcoat.code, 'material.clearcoat = saturate( ' + clearcoat.result + ' );' // Burley clearcoat model\n      );\n    } else if (useClearcoat) {\n      output.push('material.clearcoat = 0.0;');\n    }\n\n    if (clearcoatRoughness) {\n      output.push(clearcoatRoughness.code, 'material.clearcoatRoughness = max( ' + clearcoatRoughness.result + ', 0.0525 );', 'material.clearcoatRoughness += geometryRoughness;', 'material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );');\n    } else if (useClearcoat) {\n      output.push('material.clearcoatRoughness = 0.0;');\n    }\n\n    if (sheen) {\n      output.push('material.sheenColor = ' + sheen.result + ';');\n    }\n\n    if (reflectivity) {\n      output.push(reflectivity.code, 'material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( ' + reflectivity.result + ' ) ), diffuseColor, metalnessFactor );');\n    } else {\n      output.push('material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );');\n    }\n\n    output.push('#include <lights_fragment_begin>');\n\n    if (light) {\n      output.push(light.code, 'reflectedLight.directDiffuse = ' + light.result + ';'); // apply color\n\n      output.push('diffuseColor *= 1.0 - metalnessFactor;', 'reflectedLight.directDiffuse *= diffuseColor;', 'reflectedLight.indirectDiffuse *= diffuseColor;');\n    }\n\n    if (ao) {\n      output.push(ao.code, 'reflectedLight.indirectDiffuse *= ' + ao.result + ';', 'float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );', 'reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ' + ao.result + ', material.specularRoughness );');\n    }\n\n    if (ambient) {\n      output.push(ambient.code, 'reflectedLight.indirectDiffuse += ' + ambient.result + ';');\n    }\n\n    if (shadow) {\n      output.push(shadow.code, 'reflectedLight.directDiffuse *= ' + shadow.result + ';', 'reflectedLight.directSpecular *= ' + shadow.result + ';');\n    }\n\n    if (emissive) {\n      output.push(emissive.code, 'reflectedLight.directDiffuse += ' + emissive.result + ';');\n    }\n\n    if (environment) {\n      output.push(environment.radiance.code);\n\n      if (builder.requires.irradiance) {\n        output.push(environment.irradiance.code);\n      }\n\n      if (clearcoatEnv) {\n        output.push(clearcoatEnv.code, 'clearcoatRadiance += ' + clearcoatEnv.result + ';');\n      }\n\n      output.push('radiance += ' + environment.radiance.result + ';');\n\n      if (builder.requires.irradiance) {\n        output.push('iblIrradiance += PI * ' + environment.irradiance.result + ';');\n      }\n    }\n\n    output.push('#include <lights_fragment_end>');\n    output.push('vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;');\n\n    if (alpha) {\n      output.push('gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );');\n    } else {\n      output.push('gl_FragColor = vec4( outgoingLight, 1.0 );');\n    }\n\n    output.push('#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', '#include <premultiplied_alpha_fragment>', '#include <dithering_fragment>');\n    code = output.join('\\n');\n  }\n\n  return code;\n};\n\nStandardNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source); // vertex\n\n  if (source.position) this.position = source.position; // fragment\n\n  this.color = source.color;\n  this.roughness = source.roughness;\n  this.metalness = source.metalness;\n  if (source.mask) this.mask = source.mask;\n  if (source.alpha) this.alpha = source.alpha;\n  if (source.normal) this.normal = source.normal;\n  if (source.clearcoat) this.clearcoat = source.clearcoat;\n  if (source.clearcoatRoughness) this.clearcoatRoughness = source.clearcoatRoughness;\n  if (source.clearcoatNormal) this.clearcoatNormal = source.clearcoatNormal;\n  if (source.reflectivity) this.reflectivity = source.reflectivity;\n  if (source.light) this.light = source.light;\n  if (source.shadow) this.shadow = source.shadow;\n  if (source.ao) this.ao = source.ao;\n  if (source.emissive) this.emissive = source.emissive;\n  if (source.ambient) this.ambient = source.ambient;\n  if (source.environment) this.environment = source.environment;\n  if (source.sheen) this.sheen = source.sheen;\n  return this;\n};\n\nStandardNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta); // vertex\n\n    if (this.position) data.position = this.position.toJSON(meta).uuid; // fragment\n\n    data.color = this.color.toJSON(meta).uuid;\n    data.roughness = this.roughness.toJSON(meta).uuid;\n    data.metalness = this.metalness.toJSON(meta).uuid;\n    if (this.mask) data.mask = this.mask.toJSON(meta).uuid;\n    if (this.alpha) data.alpha = this.alpha.toJSON(meta).uuid;\n    if (this.normal) data.normal = this.normal.toJSON(meta).uuid;\n    if (this.clearcoat) data.clearcoat = this.clearcoat.toJSON(meta).uuid;\n    if (this.clearcoatRoughness) data.clearcoatRoughness = this.clearcoatRoughness.toJSON(meta).uuid;\n    if (this.clearcoatNormal) data.clearcoatNormal = this.clearcoatNormal.toJSON(meta).uuid;\n    if (this.reflectivity) data.reflectivity = this.reflectivity.toJSON(meta).uuid;\n    if (this.light) data.light = this.light.toJSON(meta).uuid;\n    if (this.shadow) data.shadow = this.shadow.toJSON(meta).uuid;\n    if (this.ao) data.ao = this.ao.toJSON(meta).uuid;\n    if (this.emissive) data.emissive = this.emissive.toJSON(meta).uuid;\n    if (this.ambient) data.ambient = this.ambient.toJSON(meta).uuid;\n    if (this.environment) data.environment = this.environment.toJSON(meta).uuid;\n    if (this.sheen) data.sheen = this.sheen.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { StandardNode };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}