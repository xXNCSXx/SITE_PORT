{"ast":null,"code":"import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * More information about the AMF format: http://amf.wikispaces.com\n *\n * Usage:\n *\tvar loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nvar AMFLoader = function (manager) {\n  Loader.call(this, manager);\n};\nAMFLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: AMFLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    function loadDocument(data) {\n      var view = new DataView(data);\n      var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n      if (magic === 'PK') {\n        var zip = null;\n        var file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n        try {\n          zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n        for (let file in zip) {\n          if (file.toLowerCase().substr(-4) === '.amf') {\n            break;\n          }\n        }\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n      var fileText = LoaderUtils.decodeText(view);\n      var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n      return xmlData;\n    }\n    function loadDocumentScale(node) {\n      var scale = 1.0;\n      var unit = 'millimeter';\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n      var scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n    function loadMaterials(node) {\n      var matName = 'AMF Material';\n      var matId = node.attributes.id.textContent;\n      var color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      var loadedMaterial = null;\n      for (let i = 0; i < node.childNodes.length; i++) {\n        var matChildEl = node.childNodes[i];\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n    function loadColor(node) {\n      var color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      for (let i = 0; i < node.childNodes.length; i++) {\n        var matColor = node.childNodes[i];\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n      return color;\n    }\n    function loadMeshVolume(node) {\n      var volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      var currVolumeNode = node.firstElementChild;\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n      return volume;\n    }\n    function loadMeshVertices(node) {\n      var vertArray = [];\n      var normalArray = [];\n      var currVerticesNode = node.firstElementChild;\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          var vNode = currVerticesNode.firstElementChild;\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              var x = vNode.getElementsByTagName('x')[0].textContent;\n              var y = vNode.getElementsByTagName('y')[0].textContent;\n              var z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              var nx = vNode.getElementsByTagName('nx')[0].textContent;\n              var ny = vNode.getElementsByTagName('ny')[0].textContent;\n              var nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n            vNode = vNode.nextElementSibling;\n          }\n        }\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n    function loadObject(node) {\n      var objId = node.attributes.id.textContent;\n      var loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      var currColor = null;\n      var currObjNode = node.firstElementChild;\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          var currMeshNode = currObjNode.firstElementChild;\n          var mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              var loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n          loadedObject.meshes.push(mesh);\n        }\n        currObjNode = currObjNode.nextElementSibling;\n      }\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n    var xmlData = loadDocument(data);\n    var amfName = '';\n    var amfAuthor = '';\n    var amfScale = loadDocumentScale(xmlData);\n    var amfMaterials = {};\n    var amfObjects = {};\n    var childNodes = xmlData.documentElement.childNodes;\n    var i, j;\n    for (i = 0; i < childNodes.length; i++) {\n      var child = childNodes[i];\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        var loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        var loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n    var sceneObject = new Group();\n    var defaultMaterial = new MeshPhongMaterial({\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n    for (let id in amfObjects) {\n      var part = amfObjects[id];\n      var meshes = part.meshes;\n      var newObject = new Group();\n      newObject.name = part.name || '';\n      for (i = 0; i < meshes.length; i++) {\n        var objDefaultMaterial = defaultMaterial;\n        var mesh = meshes[i];\n        var vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        var normals = null;\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n        if (mesh.color) {\n          var color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n        var volumes = mesh.volumes;\n        for (j = 0; j < volumes.length; j++) {\n          var volume = volumes[j];\n          var newGeometry = new BufferGeometry();\n          var material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n      sceneObject.add(newObject);\n    }\n    return sceneObject;\n  }\n});\nexport { AMFLoader };","map":{"version":3,"names":["Loader","FileLoader","Group","MeshPhongMaterial","Float32BufferAttribute","Color","BufferGeometry","Mesh","LoaderUtils","unzipSync","AMFLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","loadDocument","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","substr","buffer","fileText","decodeText","xmlData","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","undefined","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","j","child","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/AMFLoader.js"],"sourcesContent":["import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * More information about the AMF format: http://amf.wikispaces.com\n *\n * Usage:\n *\tvar loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nvar AMFLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nAMFLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: AMFLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    function loadDocument(data) {\n      var view = new DataView(data);\n      var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n      if (magic === 'PK') {\n        var zip = null;\n        var file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n\n        try {\n          zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n\n        for (let file in zip) {\n          if (file.toLowerCase().substr(-4) === '.amf') {\n            break;\n          }\n        }\n\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n\n      var fileText = LoaderUtils.decodeText(view);\n      var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n\n      return xmlData;\n    }\n\n    function loadDocumentScale(node) {\n      var scale = 1.0;\n      var unit = 'millimeter';\n\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n\n      var scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n\n    function loadMaterials(node) {\n      var matName = 'AMF Material';\n      var matId = node.attributes.id.textContent;\n      var color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      var loadedMaterial = null;\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        var matChildEl = node.childNodes[i];\n\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n\n    function loadColor(node) {\n      var color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        var matColor = node.childNodes[i];\n\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n\n      return color;\n    }\n\n    function loadMeshVolume(node) {\n      var volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      var currVolumeNode = node.firstElementChild;\n\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n\n      return volume;\n    }\n\n    function loadMeshVertices(node) {\n      var vertArray = [];\n      var normalArray = [];\n      var currVerticesNode = node.firstElementChild;\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          var vNode = currVerticesNode.firstElementChild;\n\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              var x = vNode.getElementsByTagName('x')[0].textContent;\n              var y = vNode.getElementsByTagName('y')[0].textContent;\n              var z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              var nx = vNode.getElementsByTagName('nx')[0].textContent;\n              var ny = vNode.getElementsByTagName('ny')[0].textContent;\n              var nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n\n            vNode = vNode.nextElementSibling;\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n\n    function loadObject(node) {\n      var objId = node.attributes.id.textContent;\n      var loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      var currColor = null;\n      var currObjNode = node.firstElementChild;\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          var currMeshNode = currObjNode.firstElementChild;\n          var mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              var loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n\n          loadedObject.meshes.push(mesh);\n        }\n\n        currObjNode = currObjNode.nextElementSibling;\n      }\n\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n\n    var xmlData = loadDocument(data);\n    var amfName = '';\n    var amfAuthor = '';\n    var amfScale = loadDocumentScale(xmlData);\n    var amfMaterials = {};\n    var amfObjects = {};\n    var childNodes = xmlData.documentElement.childNodes;\n    var i, j;\n\n    for (i = 0; i < childNodes.length; i++) {\n      var child = childNodes[i];\n\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        var loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        var loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n\n    var sceneObject = new Group();\n    var defaultMaterial = new MeshPhongMaterial({\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n\n    for (let id in amfObjects) {\n      var part = amfObjects[id];\n      var meshes = part.meshes;\n      var newObject = new Group();\n      newObject.name = part.name || '';\n\n      for (i = 0; i < meshes.length; i++) {\n        var objDefaultMaterial = defaultMaterial;\n        var mesh = meshes[i];\n        var vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        var normals = null;\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n\n        if (mesh.color) {\n          var color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n\n        var volumes = mesh.volumes;\n\n        for (j = 0; j < volumes.length; j++) {\n          var volume = volumes[j];\n          var newGeometry = new BufferGeometry();\n          var material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n\n      sceneObject.add(newObject);\n    }\n\n    return sceneObject;\n  }\n});\n\nexport { AMFLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}