{"ast":null,"code":"/**  @author vergil Wang */\n\nimport * as THREE from 'three';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\nconst WaterShader = {\n  uniforms: {\n    byp: {\n      value: 0\n    },\n    tex: {\n      type: 't',\n      value: null\n    },\n    time: {\n      type: 'f',\n      value: 0.0\n    },\n    factor: {\n      type: 'f',\n      value: 0.0\n    },\n    resolution: {\n      type: 'v2',\n      value: null\n    }\n  },\n  vertexShader: `varying vec2 vUv;\n    void main(){  \n      vUv = uv; \n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * modelViewPosition;\n    }`,\n  fragmentShader: `\n  uniform int byp;\n    uniform float time;\n    uniform float factor;\n    uniform vec2 resolution;\n    uniform sampler2D tex;\n    varying vec2 vUv;\n    void main() { \n      if (byp<1) {\n        vec2 uv = vUv;\n        float frequency = 4.0;\n        float amplitude = 0.015 * factor;\n        float x = uv.y * frequency + time * .7; \n        float y = uv.x * frequency + time * .3;\n        uv.x += .5 * amplitude * cos(x);\n        uv.y += .5 * amplitude * sin(y);\n        vec4 rgba = texture2D(tex, uv);\n        gl_FragColor = rgba;\n      } else {\n        gl_FragColor = texture2D(tex, vUv);\n      }\n    }`\n};\nclass WaterPass extends Pass {\n  constructor(dt_size) {\n    super();\n    this.uniforms = THREE.UniformsUtils.clone(WaterShader.uniforms);\n    if (dt_size === undefined) dt_size = 64;\n    this.uniforms['resolution'].value = new THREE.Vector2(dt_size, dt_size);\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: WaterShader.vertexShader,\n      fragmentShader: WaterShader.fragmentShader\n    });\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.quad.frustumCulled = false; // Avoid getting clipped\n    this.scene.add(this.quad);\n    this.factor = 0;\n    this.time = 0;\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor);\n    this.uniforms['byp'].value = factor ? 0 : 1;\n    this.uniforms['tex'].value = readBuffer.texture;\n    this.uniforms['time'].value = this.time;\n    this.uniforms['factor'].value = this.factor;\n    this.time += 0.01;\n    this.quad.material = this.material;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  }\n}\nexport { WaterPass };","map":{"version":3,"names":["THREE","Pass","WaterShader","uniforms","byp","value","tex","type","time","factor","resolution","vertexShader","fragmentShader","WaterPass","constructor","dt_size","UniformsUtils","clone","undefined","Vector2","material","ShaderMaterial","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","Math","max","texture","renderToScreen","setRenderTarget","clear"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/src/components/shaders/WaterPass.js"],"sourcesContent":["/**  @author vergil Wang */\n\nimport * as THREE from 'three'\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass'\n\nconst WaterShader = {\n  uniforms: {\n    byp: { value: 0 },\n    tex: { type: 't', value: null },\n    time: { type: 'f', value: 0.0 },\n    factor: { type: 'f', value: 0.0 },\n    resolution: { type: 'v2', value: null },\n  },\n  vertexShader: `varying vec2 vUv;\n    void main(){  \n      vUv = uv; \n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * modelViewPosition;\n    }`,\n  fragmentShader: `\n  uniform int byp;\n    uniform float time;\n    uniform float factor;\n    uniform vec2 resolution;\n    uniform sampler2D tex;\n    varying vec2 vUv;\n    void main() { \n      if (byp<1) {\n        vec2 uv = vUv;\n        float frequency = 4.0;\n        float amplitude = 0.015 * factor;\n        float x = uv.y * frequency + time * .7; \n        float y = uv.x * frequency + time * .3;\n        uv.x += .5 * amplitude * cos(x);\n        uv.y += .5 * amplitude * sin(y);\n        vec4 rgba = texture2D(tex, uv);\n        gl_FragColor = rgba;\n      } else {\n        gl_FragColor = texture2D(tex, vUv);\n      }\n    }`,\n}\n\nclass WaterPass extends Pass {\n  constructor(dt_size) {\n    super()\n    this.uniforms = THREE.UniformsUtils.clone(WaterShader.uniforms)\n    if (dt_size === undefined) dt_size = 64\n    this.uniforms['resolution'].value = new THREE.Vector2(dt_size, dt_size)\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: WaterShader.vertexShader,\n      fragmentShader: WaterShader.fragmentShader,\n    })\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1)\n    this.scene = new THREE.Scene()\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null)\n    this.quad.frustumCulled = false // Avoid getting clipped\n    this.scene.add(this.quad)\n    this.factor = 0\n    this.time = 0\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor)\n    this.uniforms['byp'].value = factor ? 0 : 1\n    this.uniforms['tex'].value = readBuffer.texture\n    this.uniforms['time'].value = this.time\n    this.uniforms['factor'].value = this.factor\n    this.time += 0.01\n    this.quad.material = this.material\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      renderer.render(this.scene, this.camera)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      renderer.render(this.scene, this.camera)\n    }\n  }\n}\n\nexport { WaterPass }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}