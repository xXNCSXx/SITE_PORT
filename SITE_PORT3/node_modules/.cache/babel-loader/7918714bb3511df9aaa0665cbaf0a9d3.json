{"ast":null,"code":"import { has, timer } from \"../../../utils/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */function () {\n  function PerformanceTracer() {}\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if (has(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n    this.traceInitIndent = -1;\n  };\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n      var _a = timer(phaseImpl),\n        time = _a.time,\n        value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      var traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n  return PerformanceTracer;\n}();\nexport { PerformanceTracer };","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/perf_tracer.ts"],"names":[],"mappings":"AACA,SAAS,GAAG,EAAE,KAAK,QAAQ,sBAAsB;AAEjD,SAAS,qBAAqB,QAAQ,WAAW;AAEjD;;AAEG;AACH,IAAA,iBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,iBAAA,CAAA,EAAA,CA4CA;EAvCE,iBAAA,CAAA,SAAA,CAAA,qBAAqB,GAArB,UAAsB,MAAqB,EAAA;IACzC,IAAI,GAAG,CAAC,MAAM,EAAE,eAAe,CAAC,EAAE;MAChC,IAAM,iBAAiB,GAAG,MAAM,CAAC,aAAa;MAC9C,IAAM,aAAa,GAAG,OAAO,iBAAiB,KAAK,QAAQ;MAC3D,IAAI,CAAC,iBAAiB,GAAG,aAAa,GAC1B,iBAAiB,GACzB,QAAQ;MACZ,IAAI,CAAC,aAAa,GAAG,aAAa,GAC9B,iBAAiB,GAAG,CAAC,GACrB,iBAAiB;KACtB,MAAM;MACL,IAAI,CAAC,iBAAiB,GAAG,CAAC;MAC1B,IAAI,CAAC,aAAa,GAAG,qBAAqB,CAAC,aAAa;IACzD;IAED,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;EAC3B,CAAC;EAED,iBAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAmC,SAAiB,EAAE,SAAkB,EAAA;IACtE;IACA;IACA,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;MAC/B,IAAI,CAAC,eAAe,EAAE;MACtB,IAAM,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;MAC7D,IAAI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,EAAE;QACjD,OAAO,CAAC,GAAG,CAAI,MAAM,GAAA,OAAA,GAAQ,SAAS,GAAA,GAAG,CAAC;MAC3C;MACK,IAAA,EAAA,GAAkB,KAAK,CAAC,SAAS,CAAC;QAAhC,IAAI,GAAA,EAAA,CAAA,IAAA;QAAE,KAAK,GAAA,EAAA,CAAA,KAAqB;MACxC;MACA,IAAM,WAAW,GAAG,IAAI,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG;MAC1D,IAAI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,EAAE;QACjD,WAAW,CAAI,MAAM,GAAA,OAAA,GAAQ,SAAS,GAAA,UAAA,GAAW,IAAI,GAAA,IAAI,CAAC;MAC3D;MACD,IAAI,CAAC,eAAe,EAAE;MACtB,OAAO,KAAK;KACb,MAAM;MACL,OAAO,SAAS,CAAA,CAAE;IACnB;EACH,CAAC;EACH,OAAA,iBAAC;AAAD,CAAC,CAAA,CAAA","sourceRoot":"","sourcesContent":["import { has, timer } from \"../../../utils/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */ (function () {\n    function PerformanceTracer() {\n    }\n    PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n        if (has(config, \"traceInitPerf\")) {\n            var userTraceInitPerf = config.traceInitPerf;\n            var traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf;\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    };\n    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(indent + \"--> <\" + phaseDesc + \">\");\n            }\n            var _a = timer(phaseImpl), time = _a.time, value = _a.value;\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            var traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    };\n    return PerformanceTracer;\n}());\nexport { PerformanceTracer };\n//# sourceMappingURL=perf_tracer.js.map"]},"metadata":{},"sourceType":"module"}