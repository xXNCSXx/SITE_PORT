{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { BaseRegExpVisitor } from \"regexp-to-ast\";\nimport { Lexer, LexerDefinitionErrorType } from \"./lexer_public\";\nimport { compact, contains, defaults, difference, filter, find, first, flatten, forEach, has, indexOf, isArray, isEmpty, isFunction, isRegExp, isString, isUndefined, keys, map, mapValues, packArray, PRINT_ERROR, reduce, reject } from \"../utils/utils\";\nimport { canMatchCharCode, failedOptimizationPrefixMsg, getOptimizedStartCodesIndices } from \"./reg_exp\";\nimport { getRegExpAst } from \"./reg_exp_parser\";\nvar PATTERN = \"PATTERN\";\nexport var DEFAULT_MODE = \"defaultMode\";\nexport var MODES = \"modes\";\nexport var SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\nexport function analyzeTokenTypes(tokenTypes, options) {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false,\n    safeMode: false,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: function (msg, action) {\n      return action();\n    }\n  });\n  var tracer = options.tracer;\n  tracer(\"initCharCodeToOptimizedIndexMap\", function () {\n    initCharCodeToOptimizedIndexMap();\n  });\n  var onlyRelevantTypes;\n  tracer(\"Reject Lexer.NA\", function () {\n    onlyRelevantTypes = reject(tokenTypes, function (currType) {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n  var hasCustom = false;\n  var allTransformedPatterns;\n  tracer(\"Transform Patterns\", function () {\n    hasCustom = false;\n    allTransformedPatterns = map(onlyRelevantTypes, function (currType) {\n      var currPattern = currType[PATTERN];\n      /* istanbul ignore else */\n      if (isRegExp(currPattern)) {\n        var regExpSource = currPattern.source;\n        if (regExpSource.length === 1 &&\n        // only these regExp meta characters which can appear in a length one regExp\n        regExpSource !== \"^\" && regExpSource !== \"$\" && regExpSource !== \".\" && !currPattern.ignoreCase) {\n          return regExpSource;\n        } else if (regExpSource.length === 2 && regExpSource[0] === \"\\\\\" &&\n        // not a meta character\n        !contains([\"d\", \"D\", \"s\", \"S\", \"t\", \"r\", \"n\", \"t\", \"0\", \"c\", \"b\", \"B\", \"f\", \"v\", \"w\", \"W\"], regExpSource[1])) {\n          // escaped meta Characters: /\\+/ /\\[/\n          // or redundant escaping: /\\a/\n          // without the escaping \"\\\"\n          return regExpSource[1];\n        } else {\n          return options.useSticky ? addStickyFlag(currPattern) : addStartOfInput(currPattern);\n        }\n      } else if (isFunction(currPattern)) {\n        hasCustom = true;\n        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n        return {\n          exec: currPattern\n        };\n      } else if (has(currPattern, \"exec\")) {\n        hasCustom = true;\n        // ICustomPattern\n        return currPattern;\n      } else if (typeof currPattern === \"string\") {\n        if (currPattern.length === 1) {\n          return currPattern;\n        } else {\n          var escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n          var wrappedRegExp = new RegExp(escapedRegExpString);\n          return options.useSticky ? addStickyFlag(wrappedRegExp) : addStartOfInput(wrappedRegExp);\n        }\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  });\n  var patternIdxToType;\n  var patternIdxToGroup;\n  var patternIdxToLongerAltIdx;\n  var patternIdxToPushMode;\n  var patternIdxToPopMode;\n  tracer(\"misc mapping\", function () {\n    patternIdxToType = map(onlyRelevantTypes, function (currType) {\n      return currType.tokenTypeIdx;\n    });\n    patternIdxToGroup = map(onlyRelevantTypes, function (clazz) {\n      var groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n    patternIdxToLongerAltIdx = map(onlyRelevantTypes, function (clazz) {\n      var longerAltType = clazz.LONGER_ALT;\n      if (longerAltType) {\n        var longerAltIdx = indexOf(onlyRelevantTypes, longerAltType);\n        return longerAltIdx;\n      }\n    });\n    patternIdxToPushMode = map(onlyRelevantTypes, function (clazz) {\n      return clazz.PUSH_MODE;\n    });\n    patternIdxToPopMode = map(onlyRelevantTypes, function (clazz) {\n      return has(clazz, \"POP_MODE\");\n    });\n  });\n  var patternIdxToCanLineTerminator;\n  tracer(\"Line Terminator Handling\", function () {\n    var lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, function (tokType) {\n      return false;\n    });\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, function (tokType) {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return tokType.LINE_BREAKS;\n        } else {\n          if (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false) {\n            return canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n          }\n        }\n      });\n    }\n  });\n  var patternIdxToIsCustom;\n  var patternIdxToShort;\n  var emptyGroups;\n  var patternIdxToConfig;\n  tracer(\"Misc Mapping #2\", function () {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n    emptyGroups = reduce(onlyRelevantTypes, function (acc, clazz) {\n      var groupName = clazz.GROUP;\n      if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n        acc[groupName] = [];\n      }\n      return acc;\n    }, {});\n    patternIdxToConfig = map(allTransformedPatterns, function (x, idx) {\n      return {\n        pattern: allTransformedPatterns[idx],\n        longerAlt: patternIdxToLongerAltIdx[idx],\n        canLineTerminator: patternIdxToCanLineTerminator[idx],\n        isCustom: patternIdxToIsCustom[idx],\n        short: patternIdxToShort[idx],\n        group: patternIdxToGroup[idx],\n        push: patternIdxToPushMode[idx],\n        pop: patternIdxToPopMode[idx],\n        tokenTypeIdx: patternIdxToType[idx],\n        tokenType: onlyRelevantTypes[idx]\n      };\n    });\n  });\n  var canBeOptimized = true;\n  var charCodeToPatternIdxToConfig = [];\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", function () {\n      charCodeToPatternIdxToConfig = reduce(onlyRelevantTypes, function (result, currTokType, idx) {\n        if (typeof currTokType.PATTERN === \"string\") {\n          var charCode = currTokType.PATTERN.charCodeAt(0);\n          var optimizedIdx = charCodeToOptimizedIndex(charCode);\n          addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n        } else if (isArray(currTokType.START_CHARS_HINT)) {\n          var lastOptimizedIdx_1;\n          forEach(currTokType.START_CHARS_HINT, function (charOrInt) {\n            var charCode = typeof charOrInt === \"string\" ? charOrInt.charCodeAt(0) : charOrInt;\n            var currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n            // Avoid adding the config multiple times\n            /* istanbul ignore else */\n            // - Difficult to check this scenario effects as it is only a performance\n            //   optimization that does not change correctness\n            if (lastOptimizedIdx_1 !== currOptimizedIdx) {\n              lastOptimizedIdx_1 = currOptimizedIdx;\n              addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n            }\n          });\n        } else if (isRegExp(currTokType.PATTERN)) {\n          if (currTokType.PATTERN.unicode) {\n            canBeOptimized = false;\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\"\" + failedOptimizationPrefixMsg + (\"\\tUnable to analyze < \" + currTokType.PATTERN.toString() + \" > pattern.\\n\") + \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\");\n            }\n          } else {\n            var optimizedCodes = getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations);\n            /* istanbul ignore if */\n            // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n            // the first should be a different validation and the second cannot be tested.\n            if (isEmpty(optimizedCodes)) {\n              // we cannot understand what codes may start possible matches\n              // The optimization correctness requires knowing start codes for ALL patterns.\n              // Not actually sure this is an error, no debug message\n              canBeOptimized = false;\n            }\n            forEach(optimizedCodes, function (code) {\n              addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n            });\n          }\n        } else {\n          if (options.ensureOptimizations) {\n            PRINT_ERROR(\"\" + failedOptimizationPrefixMsg + (\"\\tTokenType: <\" + currTokType.name + \"> is using a custom token pattern without providing <start_chars_hint> parameter.\\n\") + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\");\n          }\n          canBeOptimized = false;\n        }\n        return result;\n      }, []);\n    });\n  }\n  tracer(\"ArrayPacking\", function () {\n    charCodeToPatternIdxToConfig = packArray(charCodeToPatternIdxToConfig);\n  });\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized\n  };\n}\nexport function validatePatterns(tokenTypes, validModesNames) {\n  var errors = [];\n  var missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n  var invalidResult = findInvalidPatterns(missingResult.valid);\n  var validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n  errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n  return errors;\n}\nfunction validateRegExpPattern(tokenTypes) {\n  var errors = [];\n  var withRegExpPatterns = filter(tokenTypes, function (currTokType) {\n    return isRegExp(currTokType[PATTERN]);\n  });\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n  return errors;\n}\nexport function findMissingPatterns(tokenTypes) {\n  var tokenTypesWithMissingPattern = filter(tokenTypes, function (currType) {\n    return !has(currType, PATTERN);\n  });\n  var errors = map(tokenTypesWithMissingPattern, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType]\n    };\n  });\n  var valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return {\n    errors: errors,\n    valid: valid\n  };\n}\nexport function findInvalidPatterns(tokenTypes) {\n  var tokenTypesWithInvalidPattern = filter(tokenTypes, function (currType) {\n    var pattern = currType[PATTERN];\n    return !isRegExp(pattern) && !isFunction(pattern) && !has(pattern, \"exec\") && !isString(pattern);\n  });\n  var errors = map(tokenTypesWithInvalidPattern, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' can only be a RegExp, a\" + \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType]\n    };\n  });\n  var valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return {\n    errors: errors,\n    valid: valid\n  };\n}\nvar end_of_input = /[^\\\\][\\$]/;\nexport function findEndOfInputAnchor(tokenTypes) {\n  var EndAnchorFinder = /** @class */function (_super) {\n    __extends(EndAnchorFinder, _super);\n    function EndAnchorFinder() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.found = false;\n      return _this;\n    }\n    EndAnchorFinder.prototype.visitEndAnchor = function (node) {\n      this.found = true;\n    };\n    return EndAnchorFinder;\n  }(BaseRegExpVisitor);\n  var invalidRegex = filter(tokenTypes, function (currType) {\n    var pattern = currType[PATTERN];\n    try {\n      var regexpAst = getRegExpAst(pattern);\n      var endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test(pattern.source);\n    }\n  });\n  var errors = map(invalidRegex, function (currType) {\n    return {\n      message: \"Unexpected RegExp Anchor Error:\\n\" + \"\\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" + \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" + \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\nexport function findEmptyMatchRegExps(tokenTypes) {\n  var matchesEmptyString = filter(tokenTypes, function (currType) {\n    var pattern = currType[PATTERN];\n    return pattern.test(\"\");\n  });\n  var errors = map(matchesEmptyString, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\nvar start_of_input = /[^\\\\[][\\^]|^\\^/;\nexport function findStartOfInputAnchor(tokenTypes) {\n  var StartAnchorFinder = /** @class */function (_super) {\n    __extends(StartAnchorFinder, _super);\n    function StartAnchorFinder() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.found = false;\n      return _this;\n    }\n    StartAnchorFinder.prototype.visitStartAnchor = function (node) {\n      this.found = true;\n    };\n    return StartAnchorFinder;\n  }(BaseRegExpVisitor);\n  var invalidRegex = filter(tokenTypes, function (currType) {\n    var pattern = currType[PATTERN];\n    try {\n      var regexpAst = getRegExpAst(pattern);\n      var startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n  var errors = map(invalidRegex, function (currType) {\n    return {\n      message: \"Unexpected RegExp Anchor Error:\\n\" + \"\\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" + \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" + \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\nexport function findUnsupportedFlags(tokenTypes) {\n  var invalidFlags = filter(tokenTypes, function (currType) {\n    var pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n  var errors = map(invalidFlags, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(tokenTypes) {\n  var found = [];\n  var identicalPatterns = map(tokenTypes, function (outerType) {\n    return reduce(tokenTypes, function (result, innerType) {\n      if (outerType.PATTERN.source === innerType.PATTERN.source && !contains(found, innerType) && innerType.PATTERN !== Lexer.NA) {\n        // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n        // in essence we are creating Equivalence classes on equality relation.\n        found.push(innerType);\n        result.push(innerType);\n        return result;\n      }\n      return result;\n    }, []);\n  });\n  identicalPatterns = compact(identicalPatterns);\n  var duplicatePatterns = filter(identicalPatterns, function (currIdenticalSet) {\n    return currIdenticalSet.length > 1;\n  });\n  var errors = map(duplicatePatterns, function (setOfIdentical) {\n    var tokenTypeNames = map(setOfIdentical, function (currType) {\n      return currType.name;\n    });\n    var dupPatternSrc = first(setOfIdentical).PATTERN;\n    return {\n      message: \"The same RegExp pattern ->\" + dupPatternSrc + \"<-\" + (\"has been used in all of the following Token Types: \" + tokenTypeNames.join(\", \") + \" <-\"),\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical\n    };\n  });\n  return errors;\n}\nexport function findInvalidGroupType(tokenTypes) {\n  var invalidTypes = filter(tokenTypes, function (clazz) {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    var group = clazz.GROUP;\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n  var errors = map(invalidTypes, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\nexport function findModesThatDoNotExist(tokenTypes, validModes) {\n  var invalidModes = filter(tokenTypes, function (clazz) {\n    return clazz.PUSH_MODE !== undefined && !contains(validModes, clazz.PUSH_MODE);\n  });\n  var errors = map(invalidModes, function (tokType) {\n    var msg = \"Token Type: ->\" + tokType.name + \"<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->\" + tokType.PUSH_MODE + \"<-\" + \"which does not exist\";\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType]\n    };\n  });\n  return errors;\n}\nexport function findUnreachablePatterns(tokenTypes) {\n  var errors = [];\n  var canBeTested = reduce(tokenTypes, function (result, tokType, idx) {\n    var pattern = tokType.PATTERN;\n    if (pattern === Lexer.NA) {\n      return result;\n    }\n    // a more comprehensive validation for all forms of regExps would require\n    // deeper regExp analysis capabilities\n    if (isString(pattern)) {\n      result.push({\n        str: pattern,\n        idx: idx,\n        tokenType: tokType\n      });\n    } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n      result.push({\n        str: pattern.source,\n        idx: idx,\n        tokenType: tokType\n      });\n    }\n    return result;\n  }, []);\n  forEach(tokenTypes, function (tokType, testIdx) {\n    forEach(canBeTested, function (_a) {\n      var str = _a.str,\n        idx = _a.idx,\n        tokenType = _a.tokenType;\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        var msg = \"Token: ->\" + tokenType.name + \"<- can never be matched.\\n\" + (\"Because it appears AFTER the Token Type ->\" + tokType.name + \"<-\") + \"in the lexer's definition.\\n\" + \"See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE\";\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType]\n        });\n      }\n    });\n  });\n  return errors;\n}\nfunction testTokenType(str, pattern) {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    var regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nfunction noMetaChar(regExp) {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  var metaChars = [\".\", \"\\\\\", \"[\", \"]\", \"|\", \"^\", \"$\", \"(\", \")\", \"?\", \"*\", \"+\", \"{\"];\n  return find(metaChars, function (char) {\n    return regExp.source.indexOf(char) !== -1;\n  }) === undefined;\n}\nexport function addStartOfInput(pattern) {\n  var flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(\"^(?:\" + pattern.source + \")\", flags);\n}\nexport function addStickyFlag(pattern) {\n  var flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(\"\" + pattern.source, flags);\n}\nexport function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n  var errors = [];\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message: \"A MultiMode Lexer cannot be initialized without a <\" + DEFAULT_MODE + \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message: \"A MultiMode Lexer cannot be initialized without a <\" + MODES + \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\n    });\n  }\n  if (has(lexerDefinition, MODES) && has(lexerDefinition, DEFAULT_MODE) && !has(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n    errors.push({\n      message: \"A MultiMode Lexer cannot be initialized with a \" + DEFAULT_MODE + \": <\" + lexerDefinition.defaultMode + \">\" + \"which does not exist\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\n    });\n  }\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, function (currModeValue, currModeName) {\n      forEach(currModeValue, function (currTokType, currIdx) {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message: \"A Lexer cannot be initialized using an undefined Token Type. Mode:\" + (\"<\" + currModeName + \"> at index: <\" + currIdx + \">\\n\"),\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\n          });\n        }\n      });\n    });\n  }\n  return errors;\n}\nexport function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n  var warnings = [];\n  var hasAnyLineBreak = false;\n  var allTokenTypes = compact(flatten(mapValues(lexerDefinition.modes, function (tokTypes) {\n    return tokTypes;\n  })));\n  var concreteTokenTypes = reject(allTokenTypes, function (currType) {\n    return currType[PATTERN] === Lexer.NA;\n  });\n  var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, function (tokType) {\n      var currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        var message = buildLineBreakIssueMessage(tokType, currIssue);\n        var warningDescriptor = {\n          message: message,\n          type: currIssue.issue,\n          tokenType: tokType\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message: \"Warning: No LINE_BREAKS Found.\\n\" + \"\\tThis Lexer has been defined to track line and column information,\\n\" + \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" + \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" + \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS\n    });\n  }\n  return warnings;\n}\nexport function cloneEmptyGroups(emptyGroups) {\n  var clonedResult = {};\n  var groupKeys = keys(emptyGroups);\n  forEach(groupKeys, function (currKey) {\n    var currGroupValue = emptyGroups[currKey];\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n  return clonedResult;\n}\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType) {\n  var pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexport function isShortPattern(pattern) {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport var LineTerminatorOptimizedTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    var len = text.length;\n    for (var i = this.lastIndex; i < len; i++) {\n      var c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n  lastIndex: 0\n};\nfunction checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: e.message\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return {\n        issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK\n      };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\nexport function buildLineBreakIssueMessage(tokType, details) {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return \"Warning: unable to identify line terminator usage in pattern.\\n\" + (\"\\tThe problem is in the <\" + tokType.name + \"> Token Type\\n\") + (\"\\t Root cause: \" + details.errMsg + \".\\n\") + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\";\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" + (\"\\tThe problem is in the <\" + tokType.name + \"> Token Type\\n\") + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\";\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nfunction getCharCodes(charsOrCodes) {\n  var charCodes = map(charsOrCodes, function (numOrString) {\n    if (isString(numOrString) && numOrString.length > 0) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n  return charCodes;\n}\nfunction addToMapOfArrays(map, key, value) {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\nexport var minOptimizationVal = 256;\n/**\n * We ae mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nexport function charCodeToOptimizedIndex(charCode) {\n  return charCode < minOptimizationVal ? charCode : charCodeToOptimizedIdxMap[charCode];\n}\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nvar charCodeToOptimizedIdxMap = [];\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (var i = 0; i < 65536; i++) {\n      /* tslint:disable */\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n      /* tslint:enable */\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/scan/lexer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseRegExpVisitor } from \"regexp-to-ast\";\nimport { Lexer, LexerDefinitionErrorType } from \"./lexer_public\";\nimport { compact, contains, defaults, difference, filter, find, first, flatten, forEach, has, indexOf, isArray, isEmpty, isFunction, isRegExp, isString, isUndefined, keys, map, mapValues, packArray, PRINT_ERROR, reduce, reject } from \"../utils/utils\";\nimport { canMatchCharCode, failedOptimizationPrefixMsg, getOptimizedStartCodesIndices } from \"./reg_exp\";\nimport { getRegExpAst } from \"./reg_exp_parser\";\nvar PATTERN = \"PATTERN\";\nexport var DEFAULT_MODE = \"defaultMode\";\nexport var MODES = \"modes\";\nexport var SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\nexport function disableSticky() {\n    SUPPORT_STICKY = false;\n}\nexport function enableSticky() {\n    SUPPORT_STICKY = true;\n}\nexport function analyzeTokenTypes(tokenTypes, options) {\n    options = defaults(options, {\n        useSticky: SUPPORT_STICKY,\n        debug: false,\n        safeMode: false,\n        positionTracking: \"full\",\n        lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n        tracer: function (msg, action) { return action(); }\n    });\n    var tracer = options.tracer;\n    tracer(\"initCharCodeToOptimizedIndexMap\", function () {\n        initCharCodeToOptimizedIndexMap();\n    });\n    var onlyRelevantTypes;\n    tracer(\"Reject Lexer.NA\", function () {\n        onlyRelevantTypes = reject(tokenTypes, function (currType) {\n            return currType[PATTERN] === Lexer.NA;\n        });\n    });\n    var hasCustom = false;\n    var allTransformedPatterns;\n    tracer(\"Transform Patterns\", function () {\n        hasCustom = false;\n        allTransformedPatterns = map(onlyRelevantTypes, function (currType) {\n            var currPattern = currType[PATTERN];\n            /* istanbul ignore else */\n            if (isRegExp(currPattern)) {\n                var regExpSource = currPattern.source;\n                if (regExpSource.length === 1 &&\n                    // only these regExp meta characters which can appear in a length one regExp\n                    regExpSource !== \"^\" &&\n                    regExpSource !== \"$\" &&\n                    regExpSource !== \".\" &&\n                    !currPattern.ignoreCase) {\n                    return regExpSource;\n                }\n                else if (regExpSource.length === 2 &&\n                    regExpSource[0] === \"\\\\\" &&\n                    // not a meta character\n                    !contains([\n                        \"d\",\n                        \"D\",\n                        \"s\",\n                        \"S\",\n                        \"t\",\n                        \"r\",\n                        \"n\",\n                        \"t\",\n                        \"0\",\n                        \"c\",\n                        \"b\",\n                        \"B\",\n                        \"f\",\n                        \"v\",\n                        \"w\",\n                        \"W\"\n                    ], regExpSource[1])) {\n                    // escaped meta Characters: /\\+/ /\\[/\n                    // or redundant escaping: /\\a/\n                    // without the escaping \"\\\"\n                    return regExpSource[1];\n                }\n                else {\n                    return options.useSticky\n                        ? addStickyFlag(currPattern)\n                        : addStartOfInput(currPattern);\n                }\n            }\n            else if (isFunction(currPattern)) {\n                hasCustom = true;\n                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n                return { exec: currPattern };\n            }\n            else if (has(currPattern, \"exec\")) {\n                hasCustom = true;\n                // ICustomPattern\n                return currPattern;\n            }\n            else if (typeof currPattern === \"string\") {\n                if (currPattern.length === 1) {\n                    return currPattern;\n                }\n                else {\n                    var escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n                    var wrappedRegExp = new RegExp(escapedRegExpString);\n                    return options.useSticky\n                        ? addStickyFlag(wrappedRegExp)\n                        : addStartOfInput(wrappedRegExp);\n                }\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    });\n    var patternIdxToType;\n    var patternIdxToGroup;\n    var patternIdxToLongerAltIdx;\n    var patternIdxToPushMode;\n    var patternIdxToPopMode;\n    tracer(\"misc mapping\", function () {\n        patternIdxToType = map(onlyRelevantTypes, function (currType) { return currType.tokenTypeIdx; });\n        patternIdxToGroup = map(onlyRelevantTypes, function (clazz) {\n            var groupName = clazz.GROUP;\n            /* istanbul ignore next */\n            if (groupName === Lexer.SKIPPED) {\n                return undefined;\n            }\n            else if (isString(groupName)) {\n                return groupName;\n            }\n            else if (isUndefined(groupName)) {\n                return false;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n        patternIdxToLongerAltIdx = map(onlyRelevantTypes, function (clazz) {\n            var longerAltType = clazz.LONGER_ALT;\n            if (longerAltType) {\n                var longerAltIdx = indexOf(onlyRelevantTypes, longerAltType);\n                return longerAltIdx;\n            }\n        });\n        patternIdxToPushMode = map(onlyRelevantTypes, function (clazz) { return clazz.PUSH_MODE; });\n        patternIdxToPopMode = map(onlyRelevantTypes, function (clazz) {\n            return has(clazz, \"POP_MODE\");\n        });\n    });\n    var patternIdxToCanLineTerminator;\n    tracer(\"Line Terminator Handling\", function () {\n        var lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n        patternIdxToCanLineTerminator = map(onlyRelevantTypes, function (tokType) { return false; });\n        if (options.positionTracking !== \"onlyOffset\") {\n            patternIdxToCanLineTerminator = map(onlyRelevantTypes, function (tokType) {\n                if (has(tokType, \"LINE_BREAKS\")) {\n                    return tokType.LINE_BREAKS;\n                }\n                else {\n                    if (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false) {\n                        return canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n                    }\n                }\n            });\n        }\n    });\n    var patternIdxToIsCustom;\n    var patternIdxToShort;\n    var emptyGroups;\n    var patternIdxToConfig;\n    tracer(\"Misc Mapping #2\", function () {\n        patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n        patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n        emptyGroups = reduce(onlyRelevantTypes, function (acc, clazz) {\n            var groupName = clazz.GROUP;\n            if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n                acc[groupName] = [];\n            }\n            return acc;\n        }, {});\n        patternIdxToConfig = map(allTransformedPatterns, function (x, idx) {\n            return {\n                pattern: allTransformedPatterns[idx],\n                longerAlt: patternIdxToLongerAltIdx[idx],\n                canLineTerminator: patternIdxToCanLineTerminator[idx],\n                isCustom: patternIdxToIsCustom[idx],\n                short: patternIdxToShort[idx],\n                group: patternIdxToGroup[idx],\n                push: patternIdxToPushMode[idx],\n                pop: patternIdxToPopMode[idx],\n                tokenTypeIdx: patternIdxToType[idx],\n                tokenType: onlyRelevantTypes[idx]\n            };\n        });\n    });\n    var canBeOptimized = true;\n    var charCodeToPatternIdxToConfig = [];\n    if (!options.safeMode) {\n        tracer(\"First Char Optimization\", function () {\n            charCodeToPatternIdxToConfig = reduce(onlyRelevantTypes, function (result, currTokType, idx) {\n                if (typeof currTokType.PATTERN === \"string\") {\n                    var charCode = currTokType.PATTERN.charCodeAt(0);\n                    var optimizedIdx = charCodeToOptimizedIndex(charCode);\n                    addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n                }\n                else if (isArray(currTokType.START_CHARS_HINT)) {\n                    var lastOptimizedIdx_1;\n                    forEach(currTokType.START_CHARS_HINT, function (charOrInt) {\n                        var charCode = typeof charOrInt === \"string\"\n                            ? charOrInt.charCodeAt(0)\n                            : charOrInt;\n                        var currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n                        // Avoid adding the config multiple times\n                        /* istanbul ignore else */\n                        // - Difficult to check this scenario effects as it is only a performance\n                        //   optimization that does not change correctness\n                        if (lastOptimizedIdx_1 !== currOptimizedIdx) {\n                            lastOptimizedIdx_1 = currOptimizedIdx;\n                            addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n                        }\n                    });\n                }\n                else if (isRegExp(currTokType.PATTERN)) {\n                    if (currTokType.PATTERN.unicode) {\n                        canBeOptimized = false;\n                        if (options.ensureOptimizations) {\n                            PRINT_ERROR(\"\" + failedOptimizationPrefixMsg +\n                                (\"\\tUnable to analyze < \" + currTokType.PATTERN.toString() + \" > pattern.\\n\") +\n                                \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                                \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\");\n                        }\n                    }\n                    else {\n                        var optimizedCodes = getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations);\n                        /* istanbul ignore if */\n                        // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n                        // the first should be a different validation and the second cannot be tested.\n                        if (isEmpty(optimizedCodes)) {\n                            // we cannot understand what codes may start possible matches\n                            // The optimization correctness requires knowing start codes for ALL patterns.\n                            // Not actually sure this is an error, no debug message\n                            canBeOptimized = false;\n                        }\n                        forEach(optimizedCodes, function (code) {\n                            addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n                        });\n                    }\n                }\n                else {\n                    if (options.ensureOptimizations) {\n                        PRINT_ERROR(\"\" + failedOptimizationPrefixMsg +\n                            (\"\\tTokenType: <\" + currTokType.name + \"> is using a custom token pattern without providing <start_chars_hint> parameter.\\n\") +\n                            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\");\n                    }\n                    canBeOptimized = false;\n                }\n                return result;\n            }, []);\n        });\n    }\n    tracer(\"ArrayPacking\", function () {\n        charCodeToPatternIdxToConfig = packArray(charCodeToPatternIdxToConfig);\n    });\n    return {\n        emptyGroups: emptyGroups,\n        patternIdxToConfig: patternIdxToConfig,\n        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n        hasCustom: hasCustom,\n        canBeOptimized: canBeOptimized\n    };\n}\nexport function validatePatterns(tokenTypes, validModesNames) {\n    var errors = [];\n    var missingResult = findMissingPatterns(tokenTypes);\n    errors = errors.concat(missingResult.errors);\n    var invalidResult = findInvalidPatterns(missingResult.valid);\n    var validTokenTypes = invalidResult.valid;\n    errors = errors.concat(invalidResult.errors);\n    errors = errors.concat(validateRegExpPattern(validTokenTypes));\n    errors = errors.concat(findInvalidGroupType(validTokenTypes));\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n    return errors;\n}\nfunction validateRegExpPattern(tokenTypes) {\n    var errors = [];\n    var withRegExpPatterns = filter(tokenTypes, function (currTokType) {\n        return isRegExp(currTokType[PATTERN]);\n    });\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n    return errors;\n}\nexport function findMissingPatterns(tokenTypes) {\n    var tokenTypesWithMissingPattern = filter(tokenTypes, function (currType) {\n        return !has(currType, PATTERN);\n    });\n    var errors = map(tokenTypesWithMissingPattern, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- missing static 'PATTERN' property\",\n            type: LexerDefinitionErrorType.MISSING_PATTERN,\n            tokenTypes: [currType]\n        };\n    });\n    var valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n    return { errors: errors, valid: valid };\n}\nexport function findInvalidPatterns(tokenTypes) {\n    var tokenTypesWithInvalidPattern = filter(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        return (!isRegExp(pattern) &&\n            !isFunction(pattern) &&\n            !has(pattern, \"exec\") &&\n            !isString(pattern));\n    });\n    var errors = map(tokenTypesWithInvalidPattern, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' can only be a RegExp, a\" +\n                \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n            type: LexerDefinitionErrorType.INVALID_PATTERN,\n            tokenTypes: [currType]\n        };\n    });\n    var valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n    return { errors: errors, valid: valid };\n}\nvar end_of_input = /[^\\\\][\\$]/;\nexport function findEndOfInputAnchor(tokenTypes) {\n    var EndAnchorFinder = /** @class */ (function (_super) {\n        __extends(EndAnchorFinder, _super);\n        function EndAnchorFinder() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.found = false;\n            return _this;\n        }\n        EndAnchorFinder.prototype.visitEndAnchor = function (node) {\n            this.found = true;\n        };\n        return EndAnchorFinder;\n    }(BaseRegExpVisitor));\n    var invalidRegex = filter(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        try {\n            var regexpAst = getRegExpAst(pattern);\n            var endAnchorVisitor = new EndAnchorFinder();\n            endAnchorVisitor.visit(regexpAst);\n            return endAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return end_of_input.test(pattern.source);\n        }\n    });\n    var errors = map(invalidRegex, function (currType) {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n                \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\nexport function findEmptyMatchRegExps(tokenTypes) {\n    var matchesEmptyString = filter(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        return pattern.test(\"\");\n    });\n    var errors = map(matchesEmptyString, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' must not match an empty string\",\n            type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\nvar start_of_input = /[^\\\\[][\\^]|^\\^/;\nexport function findStartOfInputAnchor(tokenTypes) {\n    var StartAnchorFinder = /** @class */ (function (_super) {\n        __extends(StartAnchorFinder, _super);\n        function StartAnchorFinder() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.found = false;\n            return _this;\n        }\n        StartAnchorFinder.prototype.visitStartAnchor = function (node) {\n            this.found = true;\n        };\n        return StartAnchorFinder;\n    }(BaseRegExpVisitor));\n    var invalidRegex = filter(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        try {\n            var regexpAst = getRegExpAst(pattern);\n            var startAnchorVisitor = new StartAnchorFinder();\n            startAnchorVisitor.visit(regexpAst);\n            return startAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return start_of_input.test(pattern.source);\n        }\n    });\n    var errors = map(invalidRegex, function (currType) {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n                \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\nexport function findUnsupportedFlags(tokenTypes) {\n    var invalidFlags = filter(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n    });\n    var errors = map(invalidFlags, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n            type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(tokenTypes) {\n    var found = [];\n    var identicalPatterns = map(tokenTypes, function (outerType) {\n        return reduce(tokenTypes, function (result, innerType) {\n            if (outerType.PATTERN.source === innerType.PATTERN.source &&\n                !contains(found, innerType) &&\n                innerType.PATTERN !== Lexer.NA) {\n                // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n                // in essence we are creating Equivalence classes on equality relation.\n                found.push(innerType);\n                result.push(innerType);\n                return result;\n            }\n            return result;\n        }, []);\n    });\n    identicalPatterns = compact(identicalPatterns);\n    var duplicatePatterns = filter(identicalPatterns, function (currIdenticalSet) {\n        return currIdenticalSet.length > 1;\n    });\n    var errors = map(duplicatePatterns, function (setOfIdentical) {\n        var tokenTypeNames = map(setOfIdentical, function (currType) {\n            return currType.name;\n        });\n        var dupPatternSrc = first(setOfIdentical).PATTERN;\n        return {\n            message: \"The same RegExp pattern ->\" + dupPatternSrc + \"<-\" +\n                (\"has been used in all of the following Token Types: \" + tokenTypeNames.join(\", \") + \" <-\"),\n            type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n            tokenTypes: setOfIdentical\n        };\n    });\n    return errors;\n}\nexport function findInvalidGroupType(tokenTypes) {\n    var invalidTypes = filter(tokenTypes, function (clazz) {\n        if (!has(clazz, \"GROUP\")) {\n            return false;\n        }\n        var group = clazz.GROUP;\n        return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n    });\n    var errors = map(invalidTypes, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n            type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\nexport function findModesThatDoNotExist(tokenTypes, validModes) {\n    var invalidModes = filter(tokenTypes, function (clazz) {\n        return (clazz.PUSH_MODE !== undefined && !contains(validModes, clazz.PUSH_MODE));\n    });\n    var errors = map(invalidModes, function (tokType) {\n        var msg = \"Token Type: ->\" + tokType.name + \"<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->\" + tokType.PUSH_MODE + \"<-\" +\n            \"which does not exist\";\n        return {\n            message: msg,\n            type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n            tokenTypes: [tokType]\n        };\n    });\n    return errors;\n}\nexport function findUnreachablePatterns(tokenTypes) {\n    var errors = [];\n    var canBeTested = reduce(tokenTypes, function (result, tokType, idx) {\n        var pattern = tokType.PATTERN;\n        if (pattern === Lexer.NA) {\n            return result;\n        }\n        // a more comprehensive validation for all forms of regExps would require\n        // deeper regExp analysis capabilities\n        if (isString(pattern)) {\n            result.push({ str: pattern, idx: idx, tokenType: tokType });\n        }\n        else if (isRegExp(pattern) && noMetaChar(pattern)) {\n            result.push({ str: pattern.source, idx: idx, tokenType: tokType });\n        }\n        return result;\n    }, []);\n    forEach(tokenTypes, function (tokType, testIdx) {\n        forEach(canBeTested, function (_a) {\n            var str = _a.str, idx = _a.idx, tokenType = _a.tokenType;\n            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n                var msg = \"Token: ->\" + tokenType.name + \"<- can never be matched.\\n\" +\n                    (\"Because it appears AFTER the Token Type ->\" + tokType.name + \"<-\") +\n                    \"in the lexer's definition.\\n\" +\n                    \"See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE\";\n                errors.push({\n                    message: msg,\n                    type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n                    tokenTypes: [tokType, tokenType]\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction testTokenType(str, pattern) {\n    /* istanbul ignore else */\n    if (isRegExp(pattern)) {\n        var regExpArray = pattern.exec(str);\n        return regExpArray !== null && regExpArray.index === 0;\n    }\n    else if (isFunction(pattern)) {\n        // maintain the API of custom patterns\n        return pattern(str, 0, [], {});\n    }\n    else if (has(pattern, \"exec\")) {\n        // maintain the API of custom patterns\n        return pattern.exec(str, 0, [], {});\n    }\n    else if (typeof pattern === \"string\") {\n        return pattern === str;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction noMetaChar(regExp) {\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n    var metaChars = [\n        \".\",\n        \"\\\\\",\n        \"[\",\n        \"]\",\n        \"|\",\n        \"^\",\n        \"$\",\n        \"(\",\n        \")\",\n        \"?\",\n        \"*\",\n        \"+\",\n        \"{\"\n    ];\n    return (find(metaChars, function (char) { return regExp.source.indexOf(char) !== -1; }) === undefined);\n}\nexport function addStartOfInput(pattern) {\n    var flags = pattern.ignoreCase ? \"i\" : \"\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(\"^(?:\" + pattern.source + \")\", flags);\n}\nexport function addStickyFlag(pattern) {\n    var flags = pattern.ignoreCase ? \"iy\" : \"y\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(\"\" + pattern.source, flags);\n}\nexport function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    var errors = [];\n    // some run time checks to help the end users.\n    if (!has(lexerDefinition, DEFAULT_MODE)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                DEFAULT_MODE +\n                \"> property in its definition\\n\",\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\n        });\n    }\n    if (!has(lexerDefinition, MODES)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                MODES +\n                \"> property in its definition\\n\",\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\n        });\n    }\n    if (has(lexerDefinition, MODES) &&\n        has(lexerDefinition, DEFAULT_MODE) &&\n        !has(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized with a \" + DEFAULT_MODE + \": <\" + lexerDefinition.defaultMode + \">\" +\n                \"which does not exist\\n\",\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\n        });\n    }\n    if (has(lexerDefinition, MODES)) {\n        forEach(lexerDefinition.modes, function (currModeValue, currModeName) {\n            forEach(currModeValue, function (currTokType, currIdx) {\n                if (isUndefined(currTokType)) {\n                    errors.push({\n                        message: \"A Lexer cannot be initialized using an undefined Token Type. Mode:\" +\n                            (\"<\" + currModeName + \"> at index: <\" + currIdx + \">\\n\"),\n                        type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\n                    });\n                }\n            });\n        });\n    }\n    return errors;\n}\nexport function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    var warnings = [];\n    var hasAnyLineBreak = false;\n    var allTokenTypes = compact(flatten(mapValues(lexerDefinition.modes, function (tokTypes) { return tokTypes; })));\n    var concreteTokenTypes = reject(allTokenTypes, function (currType) { return currType[PATTERN] === Lexer.NA; });\n    var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n    if (trackLines) {\n        forEach(concreteTokenTypes, function (tokType) {\n            var currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n            if (currIssue !== false) {\n                var message = buildLineBreakIssueMessage(tokType, currIssue);\n                var warningDescriptor = {\n                    message: message,\n                    type: currIssue.issue,\n                    tokenType: tokType\n                };\n                warnings.push(warningDescriptor);\n            }\n            else {\n                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n                if (has(tokType, \"LINE_BREAKS\")) {\n                    if (tokType.LINE_BREAKS === true) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n                else {\n                    if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n            }\n        });\n    }\n    if (trackLines && !hasAnyLineBreak) {\n        warnings.push({\n            message: \"Warning: No LINE_BREAKS Found.\\n\" +\n                \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n                \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n                \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS\n        });\n    }\n    return warnings;\n}\nexport function cloneEmptyGroups(emptyGroups) {\n    var clonedResult = {};\n    var groupKeys = keys(emptyGroups);\n    forEach(groupKeys, function (currKey) {\n        var currGroupValue = emptyGroups[currKey];\n        /* istanbul ignore else */\n        if (isArray(currGroupValue)) {\n            clonedResult[currKey] = [];\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    });\n    return clonedResult;\n}\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType) {\n    var pattern = tokenType.PATTERN;\n    /* istanbul ignore else */\n    if (isRegExp(pattern)) {\n        return false;\n    }\n    else if (isFunction(pattern)) {\n        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n        return true;\n    }\n    else if (has(pattern, \"exec\")) {\n        // ICustomPattern\n        return true;\n    }\n    else if (isString(pattern)) {\n        return false;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function isShortPattern(pattern) {\n    if (isString(pattern) && pattern.length === 1) {\n        return pattern.charCodeAt(0);\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport var LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n        var len = text.length;\n        for (var i = this.lastIndex; i < len; i++) {\n            var c = text.charCodeAt(i);\n            if (c === 10) {\n                this.lastIndex = i + 1;\n                return true;\n            }\n            else if (c === 13) {\n                if (text.charCodeAt(i + 1) === 10) {\n                    this.lastIndex = i + 2;\n                }\n                else {\n                    this.lastIndex = i + 1;\n                }\n                return true;\n            }\n        }\n        return false;\n    },\n    lastIndex: 0\n};\nfunction checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if (has(tokType, \"LINE_BREAKS\")) {\n        // if the user explicitly declared the line_breaks option we will respect their choice\n        // and assume it is correct.\n        return false;\n    }\n    else {\n        /* istanbul ignore else */\n        if (isRegExp(tokType.PATTERN)) {\n            try {\n                canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n            }\n            catch (e) {\n                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n                return {\n                    issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n                    errMsg: e.message\n                };\n            }\n            return false;\n        }\n        else if (isString(tokType.PATTERN)) {\n            // string literal patterns can always be analyzed to detect line terminator usage\n            return false;\n        }\n        else if (isCustomPattern(tokType)) {\n            // custom token types\n            return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n}\nexport function buildLineBreakIssueMessage(tokType, details) {\n    /* istanbul ignore else */\n    if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n        return (\"Warning: unable to identify line terminator usage in pattern.\\n\" +\n            (\"\\tThe problem is in the <\" + tokType.name + \"> Token Type\\n\") +\n            (\"\\t Root cause: \" + details.errMsg + \".\\n\") +\n            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\");\n    }\n    else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n        return (\"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n            (\"\\tThe problem is in the <\" + tokType.name + \"> Token Type\\n\") +\n            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\");\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction getCharCodes(charsOrCodes) {\n    var charCodes = map(charsOrCodes, function (numOrString) {\n        if (isString(numOrString) && numOrString.length > 0) {\n            return numOrString.charCodeAt(0);\n        }\n        else {\n            return numOrString;\n        }\n    });\n    return charCodes;\n}\nfunction addToMapOfArrays(map, key, value) {\n    if (map[key] === undefined) {\n        map[key] = [value];\n    }\n    else {\n        map[key].push(value);\n    }\n}\nexport var minOptimizationVal = 256;\n/**\n * We ae mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nexport function charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal\n        ? charCode\n        : charCodeToOptimizedIdxMap[charCode];\n}\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nvar charCodeToOptimizedIdxMap = [];\nfunction initCharCodeToOptimizedIndexMap() {\n    if (isEmpty(charCodeToOptimizedIdxMap)) {\n        charCodeToOptimizedIdxMap = new Array(65536);\n        for (var i = 0; i < 65536; i++) {\n            /* tslint:disable */\n            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n            /* tslint:enable */\n        }\n    }\n}\n//# sourceMappingURL=lexer.js.map"]},"metadata":{},"sourceType":"module"}