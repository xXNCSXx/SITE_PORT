{"ast":null,"code":"import { uniq, map, flatten } from \"../../utils/utils\";\nimport { NonTerminal, Terminal } from \"./gast/gast_public\";\nimport { isBranchingProd, isOptionalProd, isSequenceProd } from \"./gast/gast\";\nexport function first(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first(prod.referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexport function firstForSequence(prod) {\n  var firstSet = [];\n  var seq = prod.definition;\n  var nextSubProdIdx = 0;\n  var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  var currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  var isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n  return uniq(firstSet);\n}\nexport function firstForBranching(prod) {\n  var allAlternativesFirsts = map(prod.definition, function (innerProd) {\n    return first(innerProd);\n  });\n  return uniq(flatten(allAlternativesFirsts));\n}\nexport function firstForTerminal(terminal) {\n  return [terminal.terminalType];\n}","map":{"version":3,"sources":["../../../../src/parse/grammar/first.ts"],"names":[],"mappings":"AAAA,SAAS,IAAI,EAAE,GAAG,EAAE,OAAO,QAAQ,mBAAmB;AACtD,SAA6B,WAAW,EAAE,QAAQ,QAAQ,oBAAoB;AAC9E,SAAS,eAAe,EAAE,cAAc,EAAE,cAAc,QAAQ,aAAa;AAG7E,OAAM,SAAU,KAAK,CAAC,IAAiB,EAAA;EACrC;EACA,IAAI,IAAI,YAAY,WAAW,EAAE;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAO,KAAK,CAAe,IAAK,CAAC,cAAc,CAAC;GACjD,MAAM,IAAI,IAAI,YAAY,QAAQ,EAAE;IACnC,OAAO,gBAAgB,CAAW,IAAI,CAAC;GACxC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE;IAC/B,OAAO,gBAAgB,CAAqB,IAAI,CAAC;GAClD,MAAM,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE;IAChC,OAAO,iBAAiB,CAAqB,IAAI,CAAC;GACnD,MAAM;IACL,MAAM,KAAK,CAAC,sBAAsB,CAAC;EACpC;AACH;AAEA,OAAM,SAAU,gBAAgB,CAAC,IAAwB,EAAA;EACvD,IAAI,QAAQ,GAAgB,EAAE;EAC9B,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU;EACzB,IAAI,cAAc,GAAG,CAAC;EACtB,IAAI,sBAAsB,GAAG,GAAG,CAAC,MAAM,GAAG,cAAc;EACxD,IAAI,WAAW;EACf;EACA,IAAI,uBAAuB,GAAG,IAAI;EAClC;EACA,OAAO,sBAAsB,IAAI,uBAAuB,EAAE;IACxD,WAAW,GAAG,GAAG,CAAC,cAAc,CAAC;IACjC,uBAAuB,GAAG,cAAc,CAAC,WAAW,CAAC;IACrD,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC9C,cAAc,GAAG,cAAc,GAAG,CAAC;IACnC,sBAAsB,GAAG,GAAG,CAAC,MAAM,GAAG,cAAc;EACrD;EAED,OAAO,IAAI,CAAC,QAAQ,CAAC;AACvB;AAEA,OAAM,SAAU,iBAAiB,CAAC,IAAwB,EAAA;EACxD,IAAI,qBAAqB,GAAkB,GAAG,CAC5C,IAAI,CAAC,UAAU,EACf,UAAC,SAAS,EAAA;IACR,OAAO,KAAK,CAAC,SAAS,CAAC;EACzB,CAAC,CACF;EACD,OAAO,IAAI,CAAC,OAAO,CAAY,qBAAqB,CAAC,CAAC;AACxD;AAEA,OAAM,SAAU,gBAAgB,CAAC,QAAkB,EAAA;EACjD,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;AAChC","sourceRoot":"","sourcesContent":["import { uniq, map, flatten } from \"../../utils/utils\";\nimport { NonTerminal, Terminal } from \"./gast/gast_public\";\nimport { isBranchingProd, isOptionalProd, isSequenceProd } from \"./gast/gast\";\nexport function first(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n        // this could in theory cause infinite loops if\n        // (1) prod A refs prod B.\n        // (2) prod B refs prod A\n        // (3) AB can match the empty set\n        // in other words a cycle where everything is optional so the first will keep\n        // looking ahead for the next optional part and will never exit\n        // currently there is no safeguard for this unique edge case because\n        // (1) not sure a grammar in which this can happen is useful for anything (productive)\n        return first(prod.referencedRule);\n    }\n    else if (prod instanceof Terminal) {\n        return firstForTerminal(prod);\n    }\n    else if (isSequenceProd(prod)) {\n        return firstForSequence(prod);\n    }\n    else if (isBranchingProd(prod)) {\n        return firstForBranching(prod);\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function firstForSequence(prod) {\n    var firstSet = [];\n    var seq = prod.definition;\n    var nextSubProdIdx = 0;\n    var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    var currSubProd;\n    // so we enter the loop at least once (if the definition is not empty\n    var isLastInnerProdOptional = true;\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n        currSubProd = seq[nextSubProdIdx];\n        isLastInnerProdOptional = isOptionalProd(currSubProd);\n        firstSet = firstSet.concat(first(currSubProd));\n        nextSubProdIdx = nextSubProdIdx + 1;\n        hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return uniq(firstSet);\n}\nexport function firstForBranching(prod) {\n    var allAlternativesFirsts = map(prod.definition, function (innerProd) {\n        return first(innerProd);\n    });\n    return uniq(flatten(allAlternativesFirsts));\n}\nexport function firstForTerminal(terminal) {\n    return [terminal.terminalType];\n}\n//# sourceMappingURL=first.js.map"]},"metadata":{},"sourceType":"module"}