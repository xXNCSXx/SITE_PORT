{"ast":null,"code":"import { Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4, BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute } from 'three';\nvar Lensflare = function () {\n  Mesh.call(this, Lensflare.Geometry, new MeshBasicMaterial({\n    opacity: 0,\n    transparent: true\n  }));\n  this.type = 'Lensflare';\n  this.frustumCulled = false;\n  this.renderOrder = Infinity; //\n\n  var positionScreen = new Vector3();\n  var positionView = new Vector3(); // textures\n\n  var tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  tempMap.minFilter = NearestFilter;\n  tempMap.magFilter = NearestFilter;\n  tempMap.wrapS = ClampToEdgeWrapping;\n  tempMap.wrapT = ClampToEdgeWrapping;\n  var occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  occlusionMap.minFilter = NearestFilter;\n  occlusionMap.magFilter = NearestFilter;\n  occlusionMap.wrapS = ClampToEdgeWrapping;\n  occlusionMap.wrapT = ClampToEdgeWrapping; // material\n\n  var geometry = Lensflare.Geometry;\n  var material1a = new RawShaderMaterial({\n    uniforms: {\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'void main() {', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'void main() {', '\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );', '}'].join('\\n'),\n    depthTest: true,\n    depthWrite: false,\n    transparent: false\n  });\n  var material1b = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: tempMap\n      },\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'void main() {', '\tvUV = uv;', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'varying vec2 vUV;', 'void main() {', '\tgl_FragColor = texture2D( map, vUV );', '}'].join('\\n'),\n    depthTest: false,\n    depthWrite: false,\n    transparent: false\n  }); // the following object is used for occlusionMap generation\n\n  var mesh1 = new Mesh(geometry, material1a); //\n\n  var elements = [];\n  var shader = LensflareElement.Shader;\n  var material2 = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: null\n      },\n      occlusionMap: {\n        value: occlusionMap\n      },\n      color: {\n        value: new Color(0xffffff)\n      },\n      scale: {\n        value: new Vector2()\n      },\n      screenPosition: {\n        value: new Vector3()\n      }\n    },\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  var mesh2 = new Mesh(geometry, material2);\n  this.addElement = function (element) {\n    elements.push(element);\n  }; //\n\n  var scale = new Vector2();\n  var screenPositionPixels = new Vector2();\n  var validArea = new Box2();\n  var viewport = new Vector4();\n  this.onBeforeRender = function (renderer, scene, camera) {\n    renderer.getCurrentViewport(viewport);\n    var invAspect = viewport.w / viewport.z;\n    var halfViewportWidth = viewport.z / 2.0;\n    var halfViewportHeight = viewport.w / 2.0;\n    var size = 16 / viewport.w;\n    scale.set(size * invAspect, size);\n    validArea.min.set(viewport.x, viewport.y);\n    validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16)); // calculate position in screen space\n\n    positionView.setFromMatrixPosition(this.matrixWorld);\n    positionView.applyMatrix4(camera.matrixWorldInverse);\n    if (positionView.z > 0) return; // lensflare is behind the camera\n\n    positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n    screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n    if (validArea.containsPoint(screenPositionPixels)) {\n      // save current RGB to temp texture\n      renderer.copyFramebufferToTexture(screenPositionPixels, tempMap); // render pink quad\n\n      var uniforms = material1a.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null); // copy result to occlusionMap\n\n      renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap); // restore graphics\n\n      var uniforms = material1b.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null); // render elements\n\n      var vecX = -positionScreen.x * 2;\n      var vecY = -positionScreen.y * 2;\n      for (let i = 0, l = elements.length; i < l; i++) {\n        var element = elements[i];\n        var uniforms = material2.uniforms;\n        uniforms['color'].value.copy(element.color);\n        uniforms['map'].value = element.texture;\n        uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n        uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n        var size = element.size / viewport.w;\n        var invAspect = viewport.w / viewport.z;\n        uniforms['scale'].value.set(size * invAspect, size);\n        material2.uniformsNeedUpdate = true;\n        renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n      }\n    }\n  };\n  this.dispose = function () {\n    material1a.dispose();\n    material1b.dispose();\n    material2.dispose();\n    tempMap.dispose();\n    occlusionMap.dispose();\n    for (let i = 0, l = elements.length; i < l; i++) {\n      elements[i].texture.dispose();\n    }\n  };\n};\nLensflare.prototype = Object.create(Mesh.prototype);\nLensflare.prototype.constructor = Lensflare;\nLensflare.prototype.isLensflare = true; //\n\nvar LensflareElement = function (texture, size, distance, color) {\n  this.texture = texture;\n  this.size = size || 1;\n  this.distance = distance || 0;\n  this.color = color || new Color(0xffffff);\n};\nLensflareElement.Shader = {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'uniform sampler2D occlusionMap;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvUV = uv;', '\tvec2 pos = position.xy;', '\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );', '\tvVisibility =        visibility.r / 9.0;', '\tvVisibility *= 1.0 - visibility.g / 9.0;', '\tvVisibility *=       visibility.b / 9.0;', '\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'uniform vec3 color;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvec4 texture = texture2D( map, vUV );', '\ttexture.a *= vVisibility;', '\tgl_FragColor = texture;', '\tgl_FragColor.rgb *= color;', '}'].join('\\n')\n};\nLensflare.Geometry = function () {\n  var geometry = new BufferGeometry();\n  var float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n  var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n  geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  return geometry;\n}();\nexport { Lensflare, LensflareElement };","map":{"version":3,"names":["Mesh","MeshBasicMaterial","Vector3","DataTexture","RGBFormat","NearestFilter","ClampToEdgeWrapping","RawShaderMaterial","Color","Vector2","AdditiveBlending","Box2","Vector4","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","Lensflare","call","Geometry","opacity","transparent","type","frustumCulled","renderOrder","Infinity","positionScreen","positionView","tempMap","Uint8Array","minFilter","magFilter","wrapS","wrapT","occlusionMap","geometry","material1a","uniforms","scale","value","screenPosition","vertexShader","join","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","blending","mesh2","addElement","element","push","screenPositionPixels","validArea","viewport","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","texture","distance","uniformsNeedUpdate","dispose","prototype","Object","create","constructor","isLensflare","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/objects/Lensflare.js"],"sourcesContent":["import { Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4, BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute } from 'three';\n\nvar Lensflare = function () {\n  Mesh.call(this, Lensflare.Geometry, new MeshBasicMaterial({\n    opacity: 0,\n    transparent: true\n  }));\n  this.type = 'Lensflare';\n  this.frustumCulled = false;\n  this.renderOrder = Infinity; //\n\n  var positionScreen = new Vector3();\n  var positionView = new Vector3(); // textures\n\n  var tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  tempMap.minFilter = NearestFilter;\n  tempMap.magFilter = NearestFilter;\n  tempMap.wrapS = ClampToEdgeWrapping;\n  tempMap.wrapT = ClampToEdgeWrapping;\n  var occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  occlusionMap.minFilter = NearestFilter;\n  occlusionMap.magFilter = NearestFilter;\n  occlusionMap.wrapS = ClampToEdgeWrapping;\n  occlusionMap.wrapT = ClampToEdgeWrapping; // material\n\n  var geometry = Lensflare.Geometry;\n  var material1a = new RawShaderMaterial({\n    uniforms: {\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'void main() {', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'void main() {', '\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );', '}'].join('\\n'),\n    depthTest: true,\n    depthWrite: false,\n    transparent: false\n  });\n  var material1b = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: tempMap\n      },\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'void main() {', '\tvUV = uv;', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'varying vec2 vUV;', 'void main() {', '\tgl_FragColor = texture2D( map, vUV );', '}'].join('\\n'),\n    depthTest: false,\n    depthWrite: false,\n    transparent: false\n  }); // the following object is used for occlusionMap generation\n\n  var mesh1 = new Mesh(geometry, material1a); //\n\n  var elements = [];\n  var shader = LensflareElement.Shader;\n  var material2 = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: null\n      },\n      occlusionMap: {\n        value: occlusionMap\n      },\n      color: {\n        value: new Color(0xffffff)\n      },\n      scale: {\n        value: new Vector2()\n      },\n      screenPosition: {\n        value: new Vector3()\n      }\n    },\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  var mesh2 = new Mesh(geometry, material2);\n\n  this.addElement = function (element) {\n    elements.push(element);\n  }; //\n\n\n  var scale = new Vector2();\n  var screenPositionPixels = new Vector2();\n  var validArea = new Box2();\n  var viewport = new Vector4();\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    renderer.getCurrentViewport(viewport);\n    var invAspect = viewport.w / viewport.z;\n    var halfViewportWidth = viewport.z / 2.0;\n    var halfViewportHeight = viewport.w / 2.0;\n    var size = 16 / viewport.w;\n    scale.set(size * invAspect, size);\n    validArea.min.set(viewport.x, viewport.y);\n    validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16)); // calculate position in screen space\n\n    positionView.setFromMatrixPosition(this.matrixWorld);\n    positionView.applyMatrix4(camera.matrixWorldInverse);\n    if (positionView.z > 0) return; // lensflare is behind the camera\n\n    positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n    screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n    if (validArea.containsPoint(screenPositionPixels)) {\n      // save current RGB to temp texture\n      renderer.copyFramebufferToTexture(screenPositionPixels, tempMap); // render pink quad\n\n      var uniforms = material1a.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null); // copy result to occlusionMap\n\n      renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap); // restore graphics\n\n      var uniforms = material1b.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null); // render elements\n\n      var vecX = -positionScreen.x * 2;\n      var vecY = -positionScreen.y * 2;\n\n      for (let i = 0, l = elements.length; i < l; i++) {\n        var element = elements[i];\n        var uniforms = material2.uniforms;\n        uniforms['color'].value.copy(element.color);\n        uniforms['map'].value = element.texture;\n        uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n        uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n        var size = element.size / viewport.w;\n        var invAspect = viewport.w / viewport.z;\n        uniforms['scale'].value.set(size * invAspect, size);\n        material2.uniformsNeedUpdate = true;\n        renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n      }\n    }\n  };\n\n  this.dispose = function () {\n    material1a.dispose();\n    material1b.dispose();\n    material2.dispose();\n    tempMap.dispose();\n    occlusionMap.dispose();\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      elements[i].texture.dispose();\n    }\n  };\n};\n\nLensflare.prototype = Object.create(Mesh.prototype);\nLensflare.prototype.constructor = Lensflare;\nLensflare.prototype.isLensflare = true; //\n\nvar LensflareElement = function (texture, size, distance, color) {\n  this.texture = texture;\n  this.size = size || 1;\n  this.distance = distance || 0;\n  this.color = color || new Color(0xffffff);\n};\n\nLensflareElement.Shader = {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'uniform sampler2D occlusionMap;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvUV = uv;', '\tvec2 pos = position.xy;', '\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );', '\tvVisibility =        visibility.r / 9.0;', '\tvVisibility *= 1.0 - visibility.g / 9.0;', '\tvVisibility *=       visibility.b / 9.0;', '\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'uniform vec3 color;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvec4 texture = texture2D( map, vUV );', '\ttexture.a *= vVisibility;', '\tgl_FragColor = texture;', '\tgl_FragColor.rgb *= color;', '}'].join('\\n')\n};\n\nLensflare.Geometry = function () {\n  var geometry = new BufferGeometry();\n  var float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n  var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n  geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  return geometry;\n}();\n\nexport { Lensflare, LensflareElement };\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,iBAAiB,EAAEC,OAAO,EAAEC,WAAW,EAAEC,SAAS,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,KAAK,EAAEC,OAAO,EAAEC,gBAAgB,EAAEC,IAAI,EAAEC,OAAO,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,0BAA0B,QAAQ,OAAO;AAEvP,IAAIC,SAAS,GAAG,SAAAA,CAAA,EAAY;EAC1BhB,IAAI,CAACiB,IAAI,CAAC,IAAI,EAAED,SAAS,CAACE,QAAQ,EAAE,IAAIjB,iBAAiB,CAAC;IACxDkB,OAAO,EAAE,CAAC;IACVC,WAAW,EAAE;EACf,CAAC,CAAC,CAAC;EACH,IAAI,CAACC,IAAI,GAAG,WAAW;EACvB,IAAI,CAACC,aAAa,GAAG,KAAK;EAC1B,IAAI,CAACC,WAAW,GAAGC,QAAQ,CAAC,CAAC;;EAE7B,IAAIC,cAAc,GAAG,IAAIvB,OAAO,CAAC,CAAC;EAClC,IAAIwB,YAAY,GAAG,IAAIxB,OAAO,CAAC,CAAC,CAAC,CAAC;;EAElC,IAAIyB,OAAO,GAAG,IAAIxB,WAAW,CAAC,IAAIyB,UAAU,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAExB,SAAS,CAAC;EAC7EuB,OAAO,CAACE,SAAS,GAAGxB,aAAa;EACjCsB,OAAO,CAACG,SAAS,GAAGzB,aAAa;EACjCsB,OAAO,CAACI,KAAK,GAAGzB,mBAAmB;EACnCqB,OAAO,CAACK,KAAK,GAAG1B,mBAAmB;EACnC,IAAI2B,YAAY,GAAG,IAAI9B,WAAW,CAAC,IAAIyB,UAAU,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAExB,SAAS,CAAC;EAClF6B,YAAY,CAACJ,SAAS,GAAGxB,aAAa;EACtC4B,YAAY,CAACH,SAAS,GAAGzB,aAAa;EACtC4B,YAAY,CAACF,KAAK,GAAGzB,mBAAmB;EACxC2B,YAAY,CAACD,KAAK,GAAG1B,mBAAmB,CAAC,CAAC;;EAE1C,IAAI4B,QAAQ,GAAGlB,SAAS,CAACE,QAAQ;EACjC,IAAIiB,UAAU,GAAG,IAAI5B,iBAAiB,CAAC;IACrC6B,QAAQ,EAAE;MACRC,KAAK,EAAE;QACLC,KAAK,EAAE;MACT,CAAC;MACDC,cAAc,EAAE;QACdD,KAAK,EAAE;MACT;IACF,CAAC;IACDE,YAAY,EAAE,CAAC,wBAAwB,EAAE,8BAA8B,EAAE,qBAAqB,EAAE,0BAA0B,EAAE,eAAe,EAAE,wFAAwF,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACtPC,cAAc,EAAE,CAAC,wBAAwB,EAAE,eAAe,EAAE,6CAA6C,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;IAC1HE,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,KAAK;IACjBxB,WAAW,EAAE;EACf,CAAC,CAAC;EACF,IAAIyB,UAAU,GAAG,IAAItC,iBAAiB,CAAC;IACrC6B,QAAQ,EAAE;MACRU,GAAG,EAAE;QACHR,KAAK,EAAEX;MACT,CAAC;MACDU,KAAK,EAAE;QACLC,KAAK,EAAE;MACT,CAAC;MACDC,cAAc,EAAE;QACdD,KAAK,EAAE;MACT;IACF,CAAC;IACDE,YAAY,EAAE,CAAC,wBAAwB,EAAE,8BAA8B,EAAE,qBAAqB,EAAE,0BAA0B,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,eAAe,EAAE,YAAY,EAAE,wFAAwF,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAC/SC,cAAc,EAAE,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,eAAe,EAAE,wCAAwC,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;IACpKE,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,KAAK;IACjBxB,WAAW,EAAE;EACf,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAI2B,KAAK,GAAG,IAAI/C,IAAI,CAACkC,QAAQ,EAAEC,UAAU,CAAC,CAAC,CAAC;;EAE5C,IAAIa,QAAQ,GAAG,EAAE;EACjB,IAAIC,MAAM,GAAGC,gBAAgB,CAACC,MAAM;EACpC,IAAIC,SAAS,GAAG,IAAI7C,iBAAiB,CAAC;IACpC6B,QAAQ,EAAE;MACRU,GAAG,EAAE;QACHR,KAAK,EAAE;MACT,CAAC;MACDL,YAAY,EAAE;QACZK,KAAK,EAAEL;MACT,CAAC;MACDoB,KAAK,EAAE;QACLf,KAAK,EAAE,IAAI9B,KAAK,CAAC,QAAQ;MAC3B,CAAC;MACD6B,KAAK,EAAE;QACLC,KAAK,EAAE,IAAI7B,OAAO,CAAC;MACrB,CAAC;MACD8B,cAAc,EAAE;QACdD,KAAK,EAAE,IAAIpC,OAAO,CAAC;MACrB;IACF,CAAC;IACDsC,YAAY,EAAES,MAAM,CAACT,YAAY;IACjCE,cAAc,EAAEO,MAAM,CAACP,cAAc;IACrCY,QAAQ,EAAE5C,gBAAgB;IAC1BU,WAAW,EAAE,IAAI;IACjBwB,UAAU,EAAE;EACd,CAAC,CAAC;EACF,IAAIW,KAAK,GAAG,IAAIvD,IAAI,CAACkC,QAAQ,EAAEkB,SAAS,CAAC;EAEzC,IAAI,CAACI,UAAU,GAAG,UAAUC,OAAO,EAAE;IACnCT,QAAQ,CAACU,IAAI,CAACD,OAAO,CAAC;EACxB,CAAC,CAAC,CAAC;;EAGH,IAAIpB,KAAK,GAAG,IAAI5B,OAAO,CAAC,CAAC;EACzB,IAAIkD,oBAAoB,GAAG,IAAIlD,OAAO,CAAC,CAAC;EACxC,IAAImD,SAAS,GAAG,IAAIjD,IAAI,CAAC,CAAC;EAC1B,IAAIkD,QAAQ,GAAG,IAAIjD,OAAO,CAAC,CAAC;EAE5B,IAAI,CAACkD,cAAc,GAAG,UAAUC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACvDF,QAAQ,CAACG,kBAAkB,CAACL,QAAQ,CAAC;IACrC,IAAIM,SAAS,GAAGN,QAAQ,CAACO,CAAC,GAAGP,QAAQ,CAACQ,CAAC;IACvC,IAAIC,iBAAiB,GAAGT,QAAQ,CAACQ,CAAC,GAAG,GAAG;IACxC,IAAIE,kBAAkB,GAAGV,QAAQ,CAACO,CAAC,GAAG,GAAG;IACzC,IAAII,IAAI,GAAG,EAAE,GAAGX,QAAQ,CAACO,CAAC;IAC1B/B,KAAK,CAACoC,GAAG,CAACD,IAAI,GAAGL,SAAS,EAAEK,IAAI,CAAC;IACjCZ,SAAS,CAACc,GAAG,CAACD,GAAG,CAACZ,QAAQ,CAACc,CAAC,EAAEd,QAAQ,CAACe,CAAC,CAAC;IACzChB,SAAS,CAACiB,GAAG,CAACJ,GAAG,CAACZ,QAAQ,CAACc,CAAC,IAAId,QAAQ,CAACQ,CAAC,GAAG,EAAE,CAAC,EAAER,QAAQ,CAACe,CAAC,IAAIf,QAAQ,CAACO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;;IAEnF1C,YAAY,CAACoD,qBAAqB,CAAC,IAAI,CAACC,WAAW,CAAC;IACpDrD,YAAY,CAACsD,YAAY,CAACf,MAAM,CAACgB,kBAAkB,CAAC;IACpD,IAAIvD,YAAY,CAAC2C,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC;;IAEhC5C,cAAc,CAACyD,IAAI,CAACxD,YAAY,CAAC,CAACsD,YAAY,CAACf,MAAM,CAACkB,gBAAgB,CAAC,CAAC,CAAC;;IAEzExB,oBAAoB,CAACgB,CAAC,GAAGd,QAAQ,CAACc,CAAC,GAAGlD,cAAc,CAACkD,CAAC,GAAGL,iBAAiB,GAAGA,iBAAiB,GAAG,CAAC;IAClGX,oBAAoB,CAACiB,CAAC,GAAGf,QAAQ,CAACe,CAAC,GAAGnD,cAAc,CAACmD,CAAC,GAAGL,kBAAkB,GAAGA,kBAAkB,GAAG,CAAC,CAAC,CAAC;;IAEtG,IAAIX,SAAS,CAACwB,aAAa,CAACzB,oBAAoB,CAAC,EAAE;MACjD;MACAI,QAAQ,CAACsB,wBAAwB,CAAC1B,oBAAoB,EAAEhC,OAAO,CAAC,CAAC,CAAC;;MAElE,IAAIS,QAAQ,GAAGD,UAAU,CAACC,QAAQ;MAClCA,QAAQ,CAAC,OAAO,CAAC,CAACE,KAAK,GAAGD,KAAK;MAC/BD,QAAQ,CAAC,gBAAgB,CAAC,CAACE,KAAK,GAAGb,cAAc;MACjDsC,QAAQ,CAACuB,kBAAkB,CAACrB,MAAM,EAAE,IAAI,EAAE/B,QAAQ,EAAEC,UAAU,EAAEY,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;;MAE9EgB,QAAQ,CAACsB,wBAAwB,CAAC1B,oBAAoB,EAAE1B,YAAY,CAAC,CAAC,CAAC;;MAEvE,IAAIG,QAAQ,GAAGS,UAAU,CAACT,QAAQ;MAClCA,QAAQ,CAAC,OAAO,CAAC,CAACE,KAAK,GAAGD,KAAK;MAC/BD,QAAQ,CAAC,gBAAgB,CAAC,CAACE,KAAK,GAAGb,cAAc;MACjDsC,QAAQ,CAACuB,kBAAkB,CAACrB,MAAM,EAAE,IAAI,EAAE/B,QAAQ,EAAEW,UAAU,EAAEE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;;MAE9E,IAAIwC,IAAI,GAAG,CAAC9D,cAAc,CAACkD,CAAC,GAAG,CAAC;MAChC,IAAIa,IAAI,GAAG,CAAC/D,cAAc,CAACmD,CAAC,GAAG,CAAC;MAEhC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG1C,QAAQ,CAAC2C,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;QAC/C,IAAIhC,OAAO,GAAGT,QAAQ,CAACyC,CAAC,CAAC;QACzB,IAAIrD,QAAQ,GAAGgB,SAAS,CAAChB,QAAQ;QACjCA,QAAQ,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC4C,IAAI,CAACzB,OAAO,CAACJ,KAAK,CAAC;QAC3CjB,QAAQ,CAAC,KAAK,CAAC,CAACE,KAAK,GAAGmB,OAAO,CAACmC,OAAO;QACvCxD,QAAQ,CAAC,gBAAgB,CAAC,CAACE,KAAK,CAACqC,CAAC,GAAGlD,cAAc,CAACkD,CAAC,GAAGY,IAAI,GAAG9B,OAAO,CAACoC,QAAQ;QAC/EzD,QAAQ,CAAC,gBAAgB,CAAC,CAACE,KAAK,CAACsC,CAAC,GAAGnD,cAAc,CAACmD,CAAC,GAAGY,IAAI,GAAG/B,OAAO,CAACoC,QAAQ;QAC/E,IAAIrB,IAAI,GAAGf,OAAO,CAACe,IAAI,GAAGX,QAAQ,CAACO,CAAC;QACpC,IAAID,SAAS,GAAGN,QAAQ,CAACO,CAAC,GAAGP,QAAQ,CAACQ,CAAC;QACvCjC,QAAQ,CAAC,OAAO,CAAC,CAACE,KAAK,CAACmC,GAAG,CAACD,IAAI,GAAGL,SAAS,EAAEK,IAAI,CAAC;QACnDpB,SAAS,CAAC0C,kBAAkB,GAAG,IAAI;QACnC/B,QAAQ,CAACuB,kBAAkB,CAACrB,MAAM,EAAE,IAAI,EAAE/B,QAAQ,EAAEkB,SAAS,EAAEG,KAAK,EAAE,IAAI,CAAC;MAC7E;IACF;EACF,CAAC;EAED,IAAI,CAACwC,OAAO,GAAG,YAAY;IACzB5D,UAAU,CAAC4D,OAAO,CAAC,CAAC;IACpBlD,UAAU,CAACkD,OAAO,CAAC,CAAC;IACpB3C,SAAS,CAAC2C,OAAO,CAAC,CAAC;IACnBpE,OAAO,CAACoE,OAAO,CAAC,CAAC;IACjB9D,YAAY,CAAC8D,OAAO,CAAC,CAAC;IAEtB,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG1C,QAAQ,CAAC2C,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MAC/CzC,QAAQ,CAACyC,CAAC,CAAC,CAACG,OAAO,CAACG,OAAO,CAAC,CAAC;IAC/B;EACF,CAAC;AACH,CAAC;AAED/E,SAAS,CAACgF,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAClG,IAAI,CAACgG,SAAS,CAAC;AACnDhF,SAAS,CAACgF,SAAS,CAACG,WAAW,GAAGnF,SAAS;AAC3CA,SAAS,CAACgF,SAAS,CAACI,WAAW,GAAG,IAAI,CAAC,CAAC;;AAExC,IAAIlD,gBAAgB,GAAG,SAAAA,CAAU0C,OAAO,EAAEpB,IAAI,EAAEqB,QAAQ,EAAExC,KAAK,EAAE;EAC/D,IAAI,CAACuC,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACpB,IAAI,GAAGA,IAAI,IAAI,CAAC;EACrB,IAAI,CAACqB,QAAQ,GAAGA,QAAQ,IAAI,CAAC;EAC7B,IAAI,CAACxC,KAAK,GAAGA,KAAK,IAAI,IAAI7C,KAAK,CAAC,QAAQ,CAAC;AAC3C,CAAC;AAED0C,gBAAgB,CAACC,MAAM,GAAG;EACxBf,QAAQ,EAAE;IACRU,GAAG,EAAE;MACHR,KAAK,EAAE;IACT,CAAC;IACDL,YAAY,EAAE;MACZK,KAAK,EAAE;IACT,CAAC;IACDe,KAAK,EAAE;MACLf,KAAK,EAAE;IACT,CAAC;IACDD,KAAK,EAAE;MACLC,KAAK,EAAE;IACT,CAAC;IACDC,cAAc,EAAE;MACdD,KAAK,EAAE;IACT;EACF,CAAC;EACDE,YAAY,EAAE,CAAC,wBAAwB,EAAE,8BAA8B,EAAE,qBAAqB,EAAE,iCAAiC,EAAE,0BAA0B,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,4BAA4B,EAAE,eAAe,EAAE,YAAY,EAAE,0BAA0B,EAAE,iEAAiE,EAAE,6DAA6D,EAAE,6DAA6D,EAAE,6DAA6D,EAAE,6DAA6D,EAAE,6DAA6D,EAAE,6DAA6D,EAAE,6DAA6D,EAAE,6DAA6D,EAAE,2CAA2C,EAAE,2CAA2C,EAAE,2CAA2C,EAAE,uFAAuF,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAC7kCC,cAAc,EAAE,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,4BAA4B,EAAE,eAAe,EAAE,wCAAwC,EAAE,4BAA4B,EAAE,0BAA0B,EAAE,6BAA6B,EAAE,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;AACnT,CAAC;AAEDzB,SAAS,CAACE,QAAQ,GAAG,YAAY;EAC/B,IAAIgB,QAAQ,GAAG,IAAIrB,cAAc,CAAC,CAAC;EACnC,IAAIwF,YAAY,GAAG,IAAIC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACrG,IAAIC,iBAAiB,GAAG,IAAIzF,iBAAiB,CAACuF,YAAY,EAAE,CAAC,CAAC;EAC9DnE,QAAQ,CAACsE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACrCtE,QAAQ,CAACuE,YAAY,CAAC,UAAU,EAAE,IAAI1F,0BAA0B,CAACwF,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;EACjGrE,QAAQ,CAACuE,YAAY,CAAC,IAAI,EAAE,IAAI1F,0BAA0B,CAACwF,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;EAC3F,OAAOrE,QAAQ;AACjB,CAAC,CAAC,CAAC;AAEH,SAASlB,SAAS,EAAEkC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}