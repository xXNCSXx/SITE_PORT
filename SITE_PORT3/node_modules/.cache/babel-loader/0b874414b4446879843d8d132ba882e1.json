{"ast":null,"code":"import { drop, forEach } from \"../../utils/utils\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal } from \"./gast/gast_public\";\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nvar RestWalker = /** @class */function () {\n  function RestWalker() {}\n  RestWalker.prototype.walk = function (prod, prevRest) {\n    var _this = this;\n    if (prevRest === void 0) {\n      prevRest = [];\n    }\n    forEach(prod.definition, function (subProd, index) {\n      var currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        _this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        _this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        _this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        _this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        _this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        _this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        _this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        _this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        _this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  };\n  RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {};\n  RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {};\n  RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {\n    // ABCDEF => after the D the rest is EF\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, fullOrRest);\n  };\n  RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, fullOrRest);\n  };\n  RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    var fullAtLeastOneRest = [new Option({\n      definition: atLeastOneProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  };\n  RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  };\n  RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    var fullManyRest = [new Option({\n      definition: manyProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(manyProd, fullManyRest);\n  };\n  RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n    this.walk(manySepProd, fullManySepRest);\n  };\n  RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {\n    var _this = this;\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    var fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, function (alt) {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      var prodWrapper = new Alternative({\n        definition: [alt]\n      });\n      _this.walk(prodWrapper, fullOrRest);\n    });\n  };\n  return RestWalker;\n}();\nexport { RestWalker };\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  var repSepRest = [new Option({\n    definition: [new Terminal({\n      terminalType: repSepProd.separator\n    })].concat(repSepProd.definition)\n  })];\n  var fullRepSepRest = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}","map":{"version":3,"names":["drop","forEach","Alternation","Alternative","NonTerminal","Option","Repetition","RepetitionMandatory","RepetitionMandatoryWithSeparator","RepetitionWithSeparator","Terminal","RestWalker","prototype","walk","prod","prevRest","_this","definition","subProd","index","currRest","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","Error","terminal","refProd","flatProd","fullOrRest","concat","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","repSepProd","repSepRest","terminalType","separator","fullRepSepRest"],"sources":["../../../../src/parse/grammar/rest.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}