{"ast":null,"code":"import { FBXLoader } from '../loaders/FBXLoader.js';\nclass XRHandOculusMeshModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new FBXLoader();\n    const low = options && options.model === 'lowpoly' ? '_low' : '';\n    loader.setPath(path);\n    loader.load(`OculusHand_${handedness === 'right' ? 'R' : 'L'}${low}.fbx`, object => {\n      this.handModel.add(object); // Hack because of the scale of the skinnedmesh\n\n      object.scale.setScalar(0.01);\n      const mesh = object.getObjectByProperty('type', 'SkinnedMesh');\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const bonesMapping = ['b_%_wrist',\n      // XRHand.WRIST,\n      'b_%_thumb1',\n      // XRHand.THUMB_METACARPAL,\n      'b_%_thumb2',\n      // XRHand.THUMB_PHALANX_PROXIMAL,\n      'b_%_thumb3',\n      // XRHand.THUMB_PHALANX_DISTAL,\n      'b_%_thumb_null',\n      // XRHand.THUMB_PHALANX_TIP,\n      null,\n      //'b_%_index1', // XRHand.INDEX_METACARPAL,\n      'b_%_index1',\n      // XRHand.INDEX_PHALANX_PROXIMAL,\n      'b_%_index2',\n      // XRHand.INDEX_PHALANX_INTERMEDIATE,\n      'b_%_index3',\n      // XRHand.INDEX_PHALANX_DISTAL,\n      'b_%_index_null',\n      // XRHand.INDEX_PHALANX_TIP,\n      null,\n      //'b_%_middle1', // XRHand.MIDDLE_METACARPAL,\n      'b_%_middle1',\n      // XRHand.MIDDLE_PHALANX_PROXIMAL,\n      'b_%_middle2',\n      // XRHand.MIDDLE_PHALANX_INTERMEDIATE,\n      'b_%_middle3',\n      // XRHand.MIDDLE_PHALANX_DISTAL,\n      'b_%_middlenull',\n      // XRHand.MIDDLE_PHALANX_TIP,\n      null,\n      //'b_%_ring1', // XRHand.RING_METACARPAL,\n      'b_%_ring1',\n      // XRHand.RING_PHALANX_PROXIMAL,\n      'b_%_ring2',\n      // XRHand.RING_PHALANX_INTERMEDIATE,\n      'b_%_ring3',\n      // XRHand.RING_PHALANX_DISTAL,\n      'b_%_ring_inull',\n      // XRHand.RING_PHALANX_TIP,\n      'b_%_pinky0',\n      // XRHand.LITTLE_METACARPAL,\n      'b_%_pinky1',\n      // XRHand.LITTLE_PHALANX_PROXIMAL,\n      'b_%_pinky2',\n      // XRHand.LITTLE_PHALANX_INTERMEDIATE,\n      'b_%_pinky3',\n      // XRHand.LITTLE_PHALANX_DISTAL,\n      'b_%_pinkynull' // XRHand.LITTLE_PHALANX_TIP\n      ];\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      let i = 0;\n      bonesMapping.forEach(boneName => {\n        if (boneName) {\n          const bone = object.getObjectByName(boneName.replace(/%/g, handedness === 'right' ? 'r' : 'l'));\n          if (bone !== undefined) {\n            bone.jointName = joints[i];\n          }\n          this.bones.push(bone);\n        } else {\n          this.bones.push(null);\n        }\n        i++;\n      });\n    });\n  }\n  updateMesh() {\n    // XR Joints\n    const XRJoints = this.controller.joints;\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n          if (bone) {\n            bone.position.copy(position.clone().multiplyScalar(100));\n            bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n          }\n        }\n      }\n    }\n  }\n}\nexport { XRHandOculusMeshModel };","map":{"version":3,"names":["FBXLoader","XRHandOculusMeshModel","constructor","handModel","controller","path","handedness","options","bones","loader","low","model","setPath","load","object","add","scale","setScalar","mesh","getObjectByProperty","frustumCulled","castShadow","receiveShadow","bonesMapping","joints","i","forEach","boneName","bone","getObjectByName","replace","undefined","jointName","push","updateMesh","XRJoints","length","XRJoint","visible","position","copy","clone","multiplyScalar","quaternion"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/webxr/XRHandOculusMeshModel.js"],"sourcesContent":["import { FBXLoader } from '../loaders/FBXLoader.js';\n\nclass XRHandOculusMeshModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new FBXLoader();\n    const low = options && options.model === 'lowpoly' ? '_low' : '';\n    loader.setPath(path);\n    loader.load(`OculusHand_${handedness === 'right' ? 'R' : 'L'}${low}.fbx`, object => {\n      this.handModel.add(object); // Hack because of the scale of the skinnedmesh\n\n      object.scale.setScalar(0.01);\n      const mesh = object.getObjectByProperty('type', 'SkinnedMesh');\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const bonesMapping = ['b_%_wrist', // XRHand.WRIST,\n      'b_%_thumb1', // XRHand.THUMB_METACARPAL,\n      'b_%_thumb2', // XRHand.THUMB_PHALANX_PROXIMAL,\n      'b_%_thumb3', // XRHand.THUMB_PHALANX_DISTAL,\n      'b_%_thumb_null', // XRHand.THUMB_PHALANX_TIP,\n      null, //'b_%_index1', // XRHand.INDEX_METACARPAL,\n      'b_%_index1', // XRHand.INDEX_PHALANX_PROXIMAL,\n      'b_%_index2', // XRHand.INDEX_PHALANX_INTERMEDIATE,\n      'b_%_index3', // XRHand.INDEX_PHALANX_DISTAL,\n      'b_%_index_null', // XRHand.INDEX_PHALANX_TIP,\n      null, //'b_%_middle1', // XRHand.MIDDLE_METACARPAL,\n      'b_%_middle1', // XRHand.MIDDLE_PHALANX_PROXIMAL,\n      'b_%_middle2', // XRHand.MIDDLE_PHALANX_INTERMEDIATE,\n      'b_%_middle3', // XRHand.MIDDLE_PHALANX_DISTAL,\n      'b_%_middlenull', // XRHand.MIDDLE_PHALANX_TIP,\n      null, //'b_%_ring1', // XRHand.RING_METACARPAL,\n      'b_%_ring1', // XRHand.RING_PHALANX_PROXIMAL,\n      'b_%_ring2', // XRHand.RING_PHALANX_INTERMEDIATE,\n      'b_%_ring3', // XRHand.RING_PHALANX_DISTAL,\n      'b_%_ring_inull', // XRHand.RING_PHALANX_TIP,\n      'b_%_pinky0', // XRHand.LITTLE_METACARPAL,\n      'b_%_pinky1', // XRHand.LITTLE_PHALANX_PROXIMAL,\n      'b_%_pinky2', // XRHand.LITTLE_PHALANX_INTERMEDIATE,\n      'b_%_pinky3', // XRHand.LITTLE_PHALANX_DISTAL,\n      'b_%_pinkynull' // XRHand.LITTLE_PHALANX_TIP\n      ];\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      let i = 0;\n      bonesMapping.forEach(boneName => {\n        if (boneName) {\n          const bone = object.getObjectByName(boneName.replace(/%/g, handedness === 'right' ? 'r' : 'l'));\n\n          if (bone !== undefined) {\n            bone.jointName = joints[i];\n          }\n\n          this.bones.push(bone);\n        } else {\n          this.bones.push(null);\n        }\n\n        i++;\n      });\n    });\n  }\n\n  updateMesh() {\n    // XR Joints\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n\n          if (bone) {\n            bone.position.copy(position.clone().multiplyScalar(100));\n            bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n          }\n        }\n      }\n    }\n  }\n\n}\n\nexport { XRHandOculusMeshModel };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}