{"ast":null,"code":"import { Vector3, ParametricGeometry, BufferGeometry, Curve } from 'three';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, y, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return (u, v, target) => {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    let x, y, z;\n    const a = 2;\n    x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n      a = 0.125,\n      b = 0.65;\n    let x, y, z;\n    x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = function (path, segments, radius, segmentsRadius, closed) {\n  this.path = path;\n  this.segments = segments || 64;\n  this.radius = radius || 1;\n  this.segmentsRadius = segmentsRadius || 8;\n  this.closed = closed || false;\n  const scope = this,\n    numpoints = this.segments + 1;\n  const frames = path.computeFrenetFrames(segments, closed),\n    tangents = frames.tangents,\n    normals = frames.normals,\n    binormals = frames.binormals; // proxy internals\n\n  this.tangents = tangents;\n  this.normals = normals;\n  this.binormals = binormals;\n  const position = new Vector3();\n  const ParametricTube = (u, v, target) => {\n    v *= 2 * Math.PI;\n    let i = u * (numpoints - 1);\n    i = Math.floor(i);\n    path.getPointAt(u, position);\n    const normal = normals[i];\n    const binormal = binormals[i];\n    const cx = -scope.radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n    const cy = scope.radius * Math.sin(v);\n    position.x += cx * normal.x + cy * binormal.x;\n    position.y += cx * normal.y + cy * binormal.y;\n    position.z += cx * normal.z + cy * binormal.z;\n    target.copy(position);\n  };\n  ParametricGeometry.call(this, ParametricTube, segments, segmentsRadius);\n};\nParametricGeometries.TubeGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TubeGeometry.prototype.constructor = ParametricGeometries.TubeGeometry;\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = function (radius, tube, segmentsT, segmentsR, p, q) {\n  this.radius = radius || 200;\n  this.tube = tube || 40;\n  this.segmentsT = segmentsT || 64;\n  this.segmentsR = segmentsR || 8;\n  this.p = p || 2;\n  this.q = q || 3;\n  class TorusKnotCurve extends Curve {\n    constructor() {\n      super();\n    }\n    getPoint(t, optionalTarget) {\n      const point = optionalTarget || new Vector3();\n      t *= Math.PI * 2;\n      const r = 0.5;\n      const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n      const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n      const z = r * Math.sin(q * t);\n      return point.set(x, y, z).multiplyScalar(radius);\n    }\n  }\n  const segments = segmentsT;\n  const radiusSegments = segmentsR;\n  const extrudePath = new TorusKnotCurve();\n  ParametricGeometries.TubeGeometry.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n};\nParametricGeometries.TorusKnotGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TorusKnotGeometry.prototype.constructor = ParametricGeometries.TorusKnotGeometry;\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = function (size, u, v) {\n  function sphere(u, v, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    const x = size * Math.sin(u) * Math.cos(v);\n    const y = size * Math.sin(u) * Math.sin(v);\n    const z = size * Math.cos(u);\n    target.set(x, y, z);\n  }\n  ParametricGeometry.call(this, sphere, u, v);\n};\nParametricGeometries.SphereGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.SphereGeometry.prototype.constructor = ParametricGeometries.SphereGeometry;\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = function (width, depth, segmentsWidth, segmentsDepth) {\n  function plane(u, v, target) {\n    const x = u * width;\n    const y = 0;\n    const z = v * depth;\n    target.set(x, y, z);\n  }\n  ParametricGeometry.call(this, plane, segmentsWidth, segmentsDepth);\n};\nParametricGeometries.PlaneGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.PlaneGeometry.prototype.constructor = ParametricGeometries.PlaneGeometry;\nexport { ParametricGeometries };","map":{"version":3,"names":["Vector3","ParametricGeometry","BufferGeometry","Curve","ParametricGeometries","klein","v","u","target","Math","PI","x","y","z","cos","sin","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TubeGeometry","path","segments","radius","segmentsRadius","closed","scope","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","i","floor","getPointAt","normal","binormal","cx","cy","copy","call","prototype","Object","create","constructor","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"sourcesContent":["import { Vector3, ParametricGeometry, BufferGeometry, Curve } from 'three';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, y, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return (u, v, target) => {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    let x, y, z;\n    const a = 2;\n    x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x, y, z;\n    x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = function (path, segments, radius, segmentsRadius, closed) {\n  this.path = path;\n  this.segments = segments || 64;\n  this.radius = radius || 1;\n  this.segmentsRadius = segmentsRadius || 8;\n  this.closed = closed || false;\n  const scope = this,\n        numpoints = this.segments + 1;\n  const frames = path.computeFrenetFrames(segments, closed),\n        tangents = frames.tangents,\n        normals = frames.normals,\n        binormals = frames.binormals; // proxy internals\n\n  this.tangents = tangents;\n  this.normals = normals;\n  this.binormals = binormals;\n  const position = new Vector3();\n\n  const ParametricTube = (u, v, target) => {\n    v *= 2 * Math.PI;\n    let i = u * (numpoints - 1);\n    i = Math.floor(i);\n    path.getPointAt(u, position);\n    const normal = normals[i];\n    const binormal = binormals[i];\n    const cx = -scope.radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n    const cy = scope.radius * Math.sin(v);\n    position.x += cx * normal.x + cy * binormal.x;\n    position.y += cx * normal.y + cy * binormal.y;\n    position.z += cx * normal.z + cy * binormal.z;\n    target.copy(position);\n  };\n\n  ParametricGeometry.call(this, ParametricTube, segments, segmentsRadius);\n};\n\nParametricGeometries.TubeGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TubeGeometry.prototype.constructor = ParametricGeometries.TubeGeometry;\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = function (radius, tube, segmentsT, segmentsR, p, q) {\n  this.radius = radius || 200;\n  this.tube = tube || 40;\n  this.segmentsT = segmentsT || 64;\n  this.segmentsR = segmentsR || 8;\n  this.p = p || 2;\n  this.q = q || 3;\n\n  class TorusKnotCurve extends Curve {\n    constructor() {\n      super();\n    }\n\n    getPoint(t, optionalTarget) {\n      const point = optionalTarget || new Vector3();\n      t *= Math.PI * 2;\n      const r = 0.5;\n      const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n      const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n      const z = r * Math.sin(q * t);\n      return point.set(x, y, z).multiplyScalar(radius);\n    }\n\n  }\n\n  const segments = segmentsT;\n  const radiusSegments = segmentsR;\n  const extrudePath = new TorusKnotCurve();\n  ParametricGeometries.TubeGeometry.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n};\n\nParametricGeometries.TorusKnotGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TorusKnotGeometry.prototype.constructor = ParametricGeometries.TorusKnotGeometry;\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = function (size, u, v) {\n  function sphere(u, v, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    const x = size * Math.sin(u) * Math.cos(v);\n    const y = size * Math.sin(u) * Math.sin(v);\n    const z = size * Math.cos(u);\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, sphere, u, v);\n};\n\nParametricGeometries.SphereGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.SphereGeometry.prototype.constructor = ParametricGeometries.SphereGeometry;\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = function (width, depth, segmentsWidth, segmentsDepth) {\n  function plane(u, v, target) {\n    const x = u * width;\n    const y = 0;\n    const z = v * depth;\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, plane, segmentsWidth, segmentsDepth);\n};\n\nParametricGeometries.PlaneGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.PlaneGeometry.prototype.constructor = ParametricGeometries.PlaneGeometry;\n\nexport { ParametricGeometries };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,KAAK,QAAQ,OAAO;;AAE1E;AACA;AACA;;AAEA,MAAMC,oBAAoB,GAAG;EAC3BC,KAAK,EAAE,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAE;IAC7BD,CAAC,IAAIE,IAAI,CAACC,EAAE;IACZJ,CAAC,IAAI,CAAC,GAAGG,IAAI,CAACC,EAAE;IAChBH,CAAC,GAAGA,CAAC,GAAG,CAAC;IACT,IAAII,CAAC,EAAEC,CAAC,EAAEC,CAAC;IAEX,IAAIN,CAAC,GAAGE,IAAI,CAACC,EAAE,EAAE;MACfC,CAAC,GAAG,CAAC,GAAGF,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC,IAAI,CAAC,GAAGE,IAAI,CAACM,GAAG,CAACR,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACR,CAAC,CAAC;MAC/FO,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACM,GAAG,CAACR,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGE,IAAI,CAACM,GAAG,CAACR,CAAC,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACR,CAAC,CAAC;IAC9E,CAAC,MAAM;MACLK,CAAC,GAAG,CAAC,GAAGF,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC,IAAI,CAAC,GAAGE,IAAI,CAACM,GAAG,CAACR,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACR,CAAC,GAAGG,IAAI,CAACC,EAAE,CAAC;MAC3FG,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACM,GAAG,CAACR,CAAC,CAAC;IACtB;IAEAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAGH,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGE,IAAI,CAACM,GAAG,CAACT,CAAC,CAAC;IAC5CE,MAAM,CAACQ,GAAG,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACrB,CAAC;EACDI,KAAK,EAAE,SAAAA,CAAUC,KAAK,EAAEC,MAAM,EAAE;IAC9B,OAAO,CAACZ,CAAC,EAAED,CAAC,EAAEE,MAAM,KAAK;MACvB,MAAMG,CAAC,GAAGJ,CAAC,GAAGW,KAAK;MACnB,MAAMN,CAAC,GAAG,CAAC;MACX,MAAMC,CAAC,GAAGP,CAAC,GAAGa,MAAM;MACpBX,MAAM,CAACQ,GAAG,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IACrB,CAAC;EACH,CAAC;EACDO,MAAM,EAAE,SAAAA,CAAUb,CAAC,EAAEc,CAAC,EAAEb,MAAM,EAAE;IAC9B;IACA;IACAD,CAAC,GAAGA,CAAC,GAAG,GAAG;IACX,MAAMD,CAAC,GAAG,CAAC,GAAGG,IAAI,CAACC,EAAE,GAAGW,CAAC;IACzB,IAAIV,CAAC,EAAEC,CAAC,EAAEC,CAAC;IACX,MAAMS,CAAC,GAAG,CAAC;IACXX,CAAC,GAAGF,IAAI,CAACK,GAAG,CAACR,CAAC,CAAC,IAAIgB,CAAC,GAAGf,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACR,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3CM,CAAC,GAAGH,IAAI,CAACM,GAAG,CAACT,CAAC,CAAC,IAAIgB,CAAC,GAAGf,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACR,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3CO,CAAC,GAAGN,CAAC,GAAGE,IAAI,CAACM,GAAG,CAACT,CAAC,GAAG,CAAC,CAAC;IACvBE,MAAM,CAACQ,GAAG,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACrB,CAAC;EACDU,QAAQ,EAAE,SAAAA,CAAUhB,CAAC,EAAEc,CAAC,EAAEb,MAAM,EAAE;IAChC;IACAD,CAAC,IAAIE,IAAI,CAACC,EAAE;IACZW,CAAC,IAAI,CAAC,GAAGZ,IAAI,CAACC,EAAE;IAChBH,CAAC,GAAGA,CAAC,GAAG,CAAC;IACT,MAAMiB,GAAG,GAAGjB,CAAC,GAAG,CAAC;IACjB,MAAMkB,KAAK,GAAG,IAAI;MACZH,CAAC,GAAG,KAAK;MACTI,CAAC,GAAG,IAAI;IACd,IAAIf,CAAC,EAAEC,CAAC,EAAEC,CAAC;IACXF,CAAC,GAAGW,CAAC,GAAGb,IAAI,CAACK,GAAG,CAACO,CAAC,CAAC,GAAGZ,IAAI,CAACK,GAAG,CAACU,GAAG,CAAC,GAAGE,CAAC,GAAGjB,IAAI,CAACM,GAAG,CAACM,CAAC,CAAC,GAAGZ,IAAI,CAACM,GAAG,CAACS,GAAG,CAAC;IACrEX,CAAC,GAAGS,CAAC,GAAGb,IAAI,CAACK,GAAG,CAACO,CAAC,CAAC,GAAGZ,IAAI,CAACM,GAAG,CAACS,GAAG,CAAC,GAAGE,CAAC,GAAGjB,IAAI,CAACM,GAAG,CAACM,CAAC,CAAC,GAAGZ,IAAI,CAACK,GAAG,CAACU,GAAG,CAAC;IACrEZ,CAAC,GAAG,CAACa,KAAK,GAAGd,CAAC,IAAIF,IAAI,CAACM,GAAG,CAACR,CAAC,CAAC;IAC7BI,CAAC,GAAG,CAACc,KAAK,GAAGd,CAAC,IAAIF,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC;IAC7BC,MAAM,CAACQ,GAAG,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACrB;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEAT,oBAAoB,CAACuB,YAAY,GAAG,UAAUC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,cAAc,EAAEC,MAAM,EAAE;EAC5F,IAAI,CAACJ,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,QAAQ,GAAGA,QAAQ,IAAI,EAAE;EAC9B,IAAI,CAACC,MAAM,GAAGA,MAAM,IAAI,CAAC;EACzB,IAAI,CAACC,cAAc,GAAGA,cAAc,IAAI,CAAC;EACzC,IAAI,CAACC,MAAM,GAAGA,MAAM,IAAI,KAAK;EAC7B,MAAMC,KAAK,GAAG,IAAI;IACZC,SAAS,GAAG,IAAI,CAACL,QAAQ,GAAG,CAAC;EACnC,MAAMM,MAAM,GAAGP,IAAI,CAACQ,mBAAmB,CAACP,QAAQ,EAAEG,MAAM,CAAC;IACnDK,QAAQ,GAAGF,MAAM,CAACE,QAAQ;IAC1BC,OAAO,GAAGH,MAAM,CAACG,OAAO;IACxBC,SAAS,GAAGJ,MAAM,CAACI,SAAS,CAAC,CAAC;;EAEpC,IAAI,CAACF,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC1B,MAAMC,QAAQ,GAAG,IAAIxC,OAAO,CAAC,CAAC;EAE9B,MAAMyC,cAAc,GAAGA,CAAClC,CAAC,EAAED,CAAC,EAAEE,MAAM,KAAK;IACvCF,CAAC,IAAI,CAAC,GAAGG,IAAI,CAACC,EAAE;IAChB,IAAIgC,CAAC,GAAGnC,CAAC,IAAI2B,SAAS,GAAG,CAAC,CAAC;IAC3BQ,CAAC,GAAGjC,IAAI,CAACkC,KAAK,CAACD,CAAC,CAAC;IACjBd,IAAI,CAACgB,UAAU,CAACrC,CAAC,EAAEiC,QAAQ,CAAC;IAC5B,MAAMK,MAAM,GAAGP,OAAO,CAACI,CAAC,CAAC;IACzB,MAAMI,QAAQ,GAAGP,SAAS,CAACG,CAAC,CAAC;IAC7B,MAAMK,EAAE,GAAG,CAACd,KAAK,CAACH,MAAM,GAAGrB,IAAI,CAACK,GAAG,CAACR,CAAC,CAAC,CAAC,CAAC;;IAExC,MAAM0C,EAAE,GAAGf,KAAK,CAACH,MAAM,GAAGrB,IAAI,CAACM,GAAG,CAACT,CAAC,CAAC;IACrCkC,QAAQ,CAAC7B,CAAC,IAAIoC,EAAE,GAAGF,MAAM,CAAClC,CAAC,GAAGqC,EAAE,GAAGF,QAAQ,CAACnC,CAAC;IAC7C6B,QAAQ,CAAC5B,CAAC,IAAImC,EAAE,GAAGF,MAAM,CAACjC,CAAC,GAAGoC,EAAE,GAAGF,QAAQ,CAAClC,CAAC;IAC7C4B,QAAQ,CAAC3B,CAAC,IAAIkC,EAAE,GAAGF,MAAM,CAAChC,CAAC,GAAGmC,EAAE,GAAGF,QAAQ,CAACjC,CAAC;IAC7CL,MAAM,CAACyC,IAAI,CAACT,QAAQ,CAAC;EACvB,CAAC;EAEDvC,kBAAkB,CAACiD,IAAI,CAAC,IAAI,EAAET,cAAc,EAAEZ,QAAQ,EAAEE,cAAc,CAAC;AACzE,CAAC;AAED3B,oBAAoB,CAACuB,YAAY,CAACwB,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACnD,cAAc,CAACiD,SAAS,CAAC;AACrF/C,oBAAoB,CAACuB,YAAY,CAACwB,SAAS,CAACG,WAAW,GAAGlD,oBAAoB,CAACuB,YAAY;AAC3F;AACA;AACA;AACA;AACA;;AAEAvB,oBAAoB,CAACmD,iBAAiB,GAAG,UAAUzB,MAAM,EAAE0B,IAAI,EAAEC,SAAS,EAAEC,SAAS,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC3F,IAAI,CAAC9B,MAAM,GAAGA,MAAM,IAAI,GAAG;EAC3B,IAAI,CAAC0B,IAAI,GAAGA,IAAI,IAAI,EAAE;EACtB,IAAI,CAACC,SAAS,GAAGA,SAAS,IAAI,EAAE;EAChC,IAAI,CAACC,SAAS,GAAGA,SAAS,IAAI,CAAC;EAC/B,IAAI,CAACC,CAAC,GAAGA,CAAC,IAAI,CAAC;EACf,IAAI,CAACC,CAAC,GAAGA,CAAC,IAAI,CAAC;EAEf,MAAMC,cAAc,SAAS1D,KAAK,CAAC;IACjCmD,WAAWA,CAAA,EAAG;MACZ,KAAK,CAAC,CAAC;IACT;IAEAQ,QAAQA,CAACzC,CAAC,EAAE0C,cAAc,EAAE;MAC1B,MAAMC,KAAK,GAAGD,cAAc,IAAI,IAAI/D,OAAO,CAAC,CAAC;MAC7CqB,CAAC,IAAIZ,IAAI,CAACC,EAAE,GAAG,CAAC;MAChB,MAAMuD,CAAC,GAAG,GAAG;MACb,MAAMtD,CAAC,GAAG,CAAC,CAAC,GAAGsD,CAAC,GAAGxD,IAAI,CAACK,GAAG,CAAC8C,CAAC,GAAGvC,CAAC,CAAC,IAAIZ,IAAI,CAACK,GAAG,CAAC6C,CAAC,GAAGtC,CAAC,CAAC;MACrD,MAAMT,CAAC,GAAG,CAAC,CAAC,GAAGqD,CAAC,GAAGxD,IAAI,CAACK,GAAG,CAAC8C,CAAC,GAAGvC,CAAC,CAAC,IAAIZ,IAAI,CAACM,GAAG,CAAC4C,CAAC,GAAGtC,CAAC,CAAC;MACrD,MAAMR,CAAC,GAAGoD,CAAC,GAAGxD,IAAI,CAACM,GAAG,CAAC6C,CAAC,GAAGvC,CAAC,CAAC;MAC7B,OAAO2C,KAAK,CAAChD,GAAG,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAACqD,cAAc,CAACpC,MAAM,CAAC;IAClD;EAEF;EAEA,MAAMD,QAAQ,GAAG4B,SAAS;EAC1B,MAAMU,cAAc,GAAGT,SAAS;EAChC,MAAMU,WAAW,GAAG,IAAIP,cAAc,CAAC,CAAC;EACxCzD,oBAAoB,CAACuB,YAAY,CAACuB,IAAI,CAAC,IAAI,EAAEkB,WAAW,EAAEvC,QAAQ,EAAE2B,IAAI,EAAEW,cAAc,EAAE,IAAI,EAAE,KAAK,CAAC;AACxG,CAAC;AAED/D,oBAAoB,CAACmD,iBAAiB,CAACJ,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACnD,cAAc,CAACiD,SAAS,CAAC;AAC1F/C,oBAAoB,CAACmD,iBAAiB,CAACJ,SAAS,CAACG,WAAW,GAAGlD,oBAAoB,CAACmD,iBAAiB;AACrG;AACA;AACA;AACA;AACA;;AAEAnD,oBAAoB,CAACiE,cAAc,GAAG,UAAUC,IAAI,EAAE/D,CAAC,EAAED,CAAC,EAAE;EAC1D,SAASiE,MAAMA,CAAChE,CAAC,EAAED,CAAC,EAAEE,MAAM,EAAE;IAC5BD,CAAC,IAAIE,IAAI,CAACC,EAAE;IACZJ,CAAC,IAAI,CAAC,GAAGG,IAAI,CAACC,EAAE;IAChB,MAAMC,CAAC,GAAG2D,IAAI,GAAG7D,IAAI,CAACM,GAAG,CAACR,CAAC,CAAC,GAAGE,IAAI,CAACK,GAAG,CAACR,CAAC,CAAC;IAC1C,MAAMM,CAAC,GAAG0D,IAAI,GAAG7D,IAAI,CAACM,GAAG,CAACR,CAAC,CAAC,GAAGE,IAAI,CAACM,GAAG,CAACT,CAAC,CAAC;IAC1C,MAAMO,CAAC,GAAGyD,IAAI,GAAG7D,IAAI,CAACK,GAAG,CAACP,CAAC,CAAC;IAC5BC,MAAM,CAACQ,GAAG,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACrB;EAEAZ,kBAAkB,CAACiD,IAAI,CAAC,IAAI,EAAEqB,MAAM,EAAEhE,CAAC,EAAED,CAAC,CAAC;AAC7C,CAAC;AAEDF,oBAAoB,CAACiE,cAAc,CAAClB,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACnD,cAAc,CAACiD,SAAS,CAAC;AACvF/C,oBAAoB,CAACiE,cAAc,CAAClB,SAAS,CAACG,WAAW,GAAGlD,oBAAoB,CAACiE,cAAc;AAC/F;AACA;AACA;AACA;AACA;;AAEAjE,oBAAoB,CAACoE,aAAa,GAAG,UAAUtD,KAAK,EAAEuD,KAAK,EAAEC,aAAa,EAAEC,aAAa,EAAE;EACzF,SAAS1D,KAAKA,CAACV,CAAC,EAAED,CAAC,EAAEE,MAAM,EAAE;IAC3B,MAAMG,CAAC,GAAGJ,CAAC,GAAGW,KAAK;IACnB,MAAMN,CAAC,GAAG,CAAC;IACX,MAAMC,CAAC,GAAGP,CAAC,GAAGmE,KAAK;IACnBjE,MAAM,CAACQ,GAAG,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACrB;EAEAZ,kBAAkB,CAACiD,IAAI,CAAC,IAAI,EAAEjC,KAAK,EAAEyD,aAAa,EAAEC,aAAa,CAAC;AACpE,CAAC;AAEDvE,oBAAoB,CAACoE,aAAa,CAACrB,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACnD,cAAc,CAACiD,SAAS,CAAC;AACtF/C,oBAAoB,CAACoE,aAAa,CAACrB,SAAS,CAACG,WAAW,GAAGlD,oBAAoB,CAACoE,aAAa;AAE7F,SAASpE,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module"}