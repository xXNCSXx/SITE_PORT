{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { FilmShader } from '../shaders/FilmShader.js';\nvar FilmPass = function (noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n  if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\n  var shader = FilmShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n  if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n  if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n  if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n  this.fsQuad = new FullScreenQuad(this.material);\n};\nFilmPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: FilmPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime\n  /*, maskActive */) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { FilmPass };","map":{"version":3,"names":["UniformsUtils","ShaderMaterial","FullScreenQuad","Pass","FilmShader","FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","undefined","console","error","shader","uniforms","clone","material","vertexShader","fragmentShader","value","nIntensity","sIntensity","sCount","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear"],"sources":["C:/Users/drncs/OneDrive/√Årea de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/postprocessing/FilmPass.js"],"sourcesContent":["import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { FilmShader } from '../shaders/FilmShader.js';\n\nvar FilmPass = function (noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n  if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\n  var shader = FilmShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n  if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n  if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n  if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nFilmPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: FilmPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime\n  /*, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n\nexport { FilmPass };\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,cAAc,QAAQ,OAAO;AACrD,SAASC,cAAc,EAAEC,IAAI,QAAQ,WAAW;AAChD,SAASC,UAAU,QAAQ,0BAA0B;AAErD,IAAIC,QAAQ,GAAG,SAAAA,CAAUC,cAAc,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,SAAS,EAAE;EACtF,IAAIL,UAAU,KAAKM,SAAS,EAAEC,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;EAClF,IAAIC,MAAM,GAAGT,UAAU;EACvB,IAAI,CAACU,QAAQ,GAAGd,aAAa,CAACe,KAAK,CAACF,MAAM,CAACC,QAAQ,CAAC;EACpD,IAAI,CAACE,QAAQ,GAAG,IAAIf,cAAc,CAAC;IACjCa,QAAQ,EAAE,IAAI,CAACA,QAAQ;IACvBG,YAAY,EAAEJ,MAAM,CAACI,YAAY;IACjCC,cAAc,EAAEL,MAAM,CAACK;EACzB,CAAC,CAAC;EACF,IAAIT,SAAS,KAAKC,SAAS,EAAE,IAAI,CAACI,QAAQ,CAACL,SAAS,CAACU,KAAK,GAAGV,SAAS;EACtE,IAAIH,cAAc,KAAKI,SAAS,EAAE,IAAI,CAACI,QAAQ,CAACM,UAAU,CAACD,KAAK,GAAGb,cAAc;EACjF,IAAIC,kBAAkB,KAAKG,SAAS,EAAE,IAAI,CAACI,QAAQ,CAACO,UAAU,CAACF,KAAK,GAAGZ,kBAAkB;EACzF,IAAIC,cAAc,KAAKE,SAAS,EAAE,IAAI,CAACI,QAAQ,CAACQ,MAAM,CAACH,KAAK,GAAGX,cAAc;EAC7E,IAAI,CAACe,MAAM,GAAG,IAAIrB,cAAc,CAAC,IAAI,CAACc,QAAQ,CAAC;AACjD,CAAC;AAEDX,QAAQ,CAACmB,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,MAAM,CAACxB,IAAI,CAACqB,SAAS,CAAC,EAAE;EAChEI,WAAW,EAAEvB,QAAQ;EACrBwB,MAAM,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC;EACrD,mBACE;IACA,IAAI,CAACnB,QAAQ,CAAC,UAAU,CAAC,CAACK,KAAK,GAAGa,UAAU,CAACE,OAAO;IACpD,IAAI,CAACpB,QAAQ,CAAC,MAAM,CAAC,CAACK,KAAK,IAAIc,SAAS;IAExC,IAAI,IAAI,CAACE,cAAc,EAAE;MACvBL,QAAQ,CAACM,eAAe,CAAC,IAAI,CAAC;MAC9B,IAAI,CAACb,MAAM,CAACM,MAAM,CAACC,QAAQ,CAAC;IAC9B,CAAC,MAAM;MACLA,QAAQ,CAACM,eAAe,CAACL,WAAW,CAAC;MACrC,IAAI,IAAI,CAACM,KAAK,EAAEP,QAAQ,CAACO,KAAK,CAAC,CAAC;MAChC,IAAI,CAACd,MAAM,CAACM,MAAM,CAACC,QAAQ,CAAC;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,SAASzB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}