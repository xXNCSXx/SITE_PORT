{"ast":null,"code":"import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nvar ThreeMFLoader = function (manager) {\n  Loader.call(this, manager);\n  this.availableExtensions = [];\n};\nThreeMFLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: ThreeMFLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    var scope = this;\n    var textureLoader = new TextureLoader(this.manager);\n    function loadDocument(data) {\n      var zip = null;\n      var file = null;\n      var relsName;\n      var modelRelsName;\n      var modelPartNames = [];\n      var texturesPartNames = [];\n      var rels;\n      var modelRels;\n      var modelParts = {};\n      var printTicketParts = {};\n      var texturesParts = {};\n      var otherParts = {};\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ;else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n      var relsView = zip[relsName];\n      var relsFileText = LoaderUtils.decodeText(relsView);\n      rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        var relsView = zip[modelRelsName];\n        var relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        var modelPart = modelPartNames[i];\n        var view = zip[modelPart];\n        var fileText = LoaderUtils.decodeText(view);\n        var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n        var modelNode = xmlData.querySelector('model');\n        var extensions = {};\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          var attr = modelNode.attributes[i];\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n        var modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n        modelParts[modelPart] = modelData;\n      } //\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        var texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n    function parseRelsXml(relsFileText) {\n      var relationships = [];\n      var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      var relsNodes = relsXmlData.querySelectorAll('Relationship');\n      for (let i = 0; i < relsNodes.length; i++) {\n        var relsNode = relsNodes[i];\n        var relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n        };\n        relationships.push(relationship);\n      }\n      return relationships;\n    }\n    function parseMetadataNodes(metadataNodes) {\n      var metadataData = {};\n      for (let i = 0; i < metadataNodes.length; i++) {\n        var metadataNode = metadataNodes[i];\n        var name = metadataNode.getAttribute('name');\n        var validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n      return metadataData;\n    }\n    function parseBasematerialsNode(basematerialsNode) {\n      var basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      var basematerialNodes = basematerialsNode.querySelectorAll('base');\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        var basematerialNode = basematerialNodes[i];\n        var basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n      return basematerialsData;\n    }\n    function parseTexture2DNode(texture2DNode) {\n      var texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      var texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      var uvs = [];\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        var tex2coordNode = tex2coordNodes[i];\n        var u = tex2coordNode.getAttribute('u');\n        var v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n    function parseColorGroupNode(colorGroupNode) {\n      var colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      var colorNodes = colorGroupNode.querySelectorAll('color');\n      var colors = [];\n      var colorObject = new Color();\n      for (let i = 0; i < colorNodes.length; i++) {\n        var colorNode = colorNodes[i];\n        var color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      var metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n      };\n      var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      var metallicData = [];\n      for (let i = 0; i < metallicNodes.length; i++) {\n        var metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n        });\n      }\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n    function parseBasematerialNode(basematerialNode) {\n      var basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n    function parseMeshNode(meshNode) {\n      var meshData = {};\n      var vertices = [];\n      var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n      for (let i = 0; i < vertexNodes.length; i++) {\n        var vertexNode = vertexNodes[i];\n        var x = vertexNode.getAttribute('x');\n        var y = vertexNode.getAttribute('y');\n        var z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n      meshData['vertices'] = new Float32Array(vertices);\n      var triangleProperties = [];\n      var triangles = [];\n      var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n      for (let i = 0; i < triangleNodes.length; i++) {\n        var triangleNode = triangleNodes[i];\n        var v1 = triangleNode.getAttribute('v1');\n        var v2 = triangleNode.getAttribute('v2');\n        var v3 = triangleNode.getAttribute('v3');\n        var p1 = triangleNode.getAttribute('p1');\n        var p2 = triangleNode.getAttribute('p2');\n        var p3 = triangleNode.getAttribute('p3');\n        var pid = triangleNode.getAttribute('pid');\n        var triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n    function parseComponentsNode(componentsNode) {\n      var components = [];\n      var componentNodes = componentsNode.querySelectorAll('component');\n      for (let i = 0; i < componentNodes.length; i++) {\n        var componentNode = componentNodes[i];\n        var componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n      return components;\n    }\n    function parseComponentNode(componentNode) {\n      var componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      var transform = componentNode.getAttribute('transform');\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n      return componentData;\n    }\n    function parseTransform(transform) {\n      var t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      var matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n    function parseObjectNode(objectNode) {\n      var objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      var id = objectNode.getAttribute('id');\n      if (id) {\n        objectData['id'] = id;\n      }\n      var pid = objectNode.getAttribute('pid');\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n      var pindex = objectNode.getAttribute('pindex');\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n      var thumbnail = objectNode.getAttribute('thumbnail');\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n      var partnumber = objectNode.getAttribute('partnumber');\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n      var name = objectNode.getAttribute('name');\n      if (name) {\n        objectData['name'] = name;\n      }\n      var meshNode = objectNode.querySelector('mesh');\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n      var componentsNode = objectNode.querySelector('components');\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n      return objectData;\n    }\n    function parseResourcesNode(resourcesNode) {\n      var resourcesData = {};\n      resourcesData['basematerials'] = {};\n      var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        var basematerialsNode = basematerialsNodes[i];\n        var basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n      resourcesData['texture2d'] = {};\n      var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        var textures2DNode = textures2DNodes[i];\n        var texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n      resourcesData['colorgroup'] = {};\n      var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        var colorGroupNode = colorGroupNodes[i];\n        var colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n      resourcesData['texture2dgroup'] = {};\n      var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        var textures2DGroupNode = textures2DGroupNodes[i];\n        var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n      resourcesData['object'] = {};\n      var objectNodes = resourcesNode.querySelectorAll('object');\n      for (let i = 0; i < objectNodes.length; i++) {\n        var objectNode = objectNodes[i];\n        var objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n      return resourcesData;\n    }\n    function parseBuildNode(buildNode) {\n      var buildData = [];\n      var itemNodes = buildNode.querySelectorAll('item');\n      for (let i = 0; i < itemNodes.length; i++) {\n        var itemNode = itemNodes[i];\n        var buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        var transform = itemNode.getAttribute('transform');\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n        buildData.push(buildItem);\n      }\n      return buildData;\n    }\n    function parseModelNode(modelNode) {\n      var modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      var metadataNodes = modelNode.querySelectorAll('metadata');\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n      var resourcesNode = modelNode.querySelector('resources');\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n      var buildNode = modelNode.querySelector('build');\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n      return modelData;\n    }\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      var texid = texture2dgroup.texid;\n      var texture2ds = modelData.resources.texture2d;\n      var texture2d = texture2ds[texid];\n      if (texture2d) {\n        var data = textureData[texture2d.path];\n        var type = texture2d.contenttype;\n        var blob = new Blob([data], {\n          type: type\n        });\n        var sourceURI = URL.createObjectURL(blob);\n        var texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n        return texture;\n      } else {\n        return null;\n      }\n    }\n    function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {\n      var objectPindex = objectData.pindex;\n      var materialMap = {};\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n      var keys = Object.keys(materialMap);\n      var meshes = [];\n      for (let i = 0, l = keys.length; i < l; i++) {\n        var materialIndex = keys[i];\n        var trianglePropertiesProps = materialMap[materialIndex];\n        var basematerialData = basematerials.basematerials[materialIndex];\n        var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var vertices = meshData.vertices;\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          var triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        var mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n      return meshes;\n    }\n    function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {\n      // geometry\n      var geometry = new BufferGeometry();\n      var positionData = [];\n      var uvData = [];\n      var vertices = meshData.vertices;\n      var uvs = texture2dgroup.uvs;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      var material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData, objectData) {\n      // geometry\n      var geometry = new BufferGeometry();\n      var positionData = [];\n      var colorData = [];\n      var vertices = meshData.vertices;\n      var colors = colorgroup.colors;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var v1 = triangleProperty.v1;\n        var v2 = triangleProperty.v2;\n        var v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        var p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        var p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        var p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      var material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildDefaultMesh(meshData) {\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      var material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {\n      var keys = Object.keys(resourceMap);\n      var meshes = [];\n      for (let i = 0, il = keys.length; i < il; i++) {\n        var resourceId = keys[i];\n        var triangleProperties = resourceMap[resourceId];\n        var resourceType = getResourceType(resourceId, modelData);\n        switch (resourceType) {\n          case 'material':\n            var basematerials = modelData.resources.basematerials[resourceId];\n            var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n            break;\n          case 'texture':\n            var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));\n            break;\n          case 'vertexColors':\n            var colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData, objectData));\n            break;\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n      return meshes;\n    }\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n    function analyzeObject(modelData, meshData, objectData) {\n      var resourceMap = {};\n      var triangleProperties = meshData['triangleProperties'];\n      var objectPid = objectData.pid;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n      return resourceMap;\n    }\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      var group = new Group();\n      var resourceMap = analyzeObject(modelData, meshData, objectData);\n      var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n      return group;\n    }\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n      var availableExtensions = [];\n      var keys = Object.keys(extensions);\n      for (let i = 0; i < keys.length; i++) {\n        var ns = keys[i];\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          var extension = scope.availableExtensions[j];\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n      for (let i = 0; i < availableExtensions.length; i++) {\n        var extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n    function buildBasematerial(materialData, objects, modelData) {\n      var material;\n      var displaypropertiesid = materialData.displaypropertiesid;\n      var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      var displaycolor = materialData.displaycolor;\n      var color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n      return material;\n    }\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      var composite = new Group();\n      for (let j = 0; j < compositeData.length; j++) {\n        var component = compositeData[j];\n        var build = objects[component.objectId];\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n        var object3D = build.clone(); // apply component transform\n\n        var transform = component.transform;\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        composite.add(object3D);\n      }\n      return composite;\n    }\n    function buildObject(objectId, objects, modelData, textureData) {\n      var objectData = modelData['resources']['object'][objectId];\n      if (objectData['mesh']) {\n        var meshData = objectData['mesh'];\n        var extensions = modelData['extensions'];\n        var modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        var compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n    function buildObjects(data3mf) {\n      var modelsData = data3mf.model;\n      var modelRels = data3mf.modelRels;\n      var objects = {};\n      var modelsKeys = Object.keys(modelsData);\n      var textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          var modelRel = modelRels[i];\n          var textureKey = modelRel.target.substring(1);\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        var modelsKey = modelsKeys[i];\n        var modelData = modelsData[modelsKey];\n        var objectIds = Object.keys(modelData['resources']['object']);\n        for (let j = 0; j < objectIds.length; j++) {\n          var objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n      return objects;\n    }\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        var rel = rels[i];\n        var extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n    function build(objects, data3mf) {\n      var group = new Group();\n      var relationship = fetch3DModelPart(data3mf['rels']);\n      var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n      for (let i = 0; i < buildData.length; i++) {\n        var buildItem = buildData[i];\n        var object3D = objects[buildItem['objectId']]; // apply transform\n\n        var transform = buildItem['transform'];\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        group.add(object3D);\n      }\n      return group;\n    }\n    var data3mf = loadDocument(data);\n    var objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  },\n  addExtension: function (extension) {\n    this.availableExtensions.push(extension);\n  }\n});\nexport { ThreeMFLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","LoaderUtils","Group","Color","Matrix4","BufferGeometry","Float32BufferAttribute","Mesh","MeshPhongMaterial","BufferAttribute","MeshStandardMaterial","sRGBEncoding","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","LinearFilter","LinearMipmapLinearFilter","NearestFilter","unzipSync","ThreeMFLoader","manager","call","availableExtensions","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","zip","file","relsName","modelRelsName","modelPartNames","texturesPartNames","rels","modelRels","modelParts","printTicketParts","texturesParts","otherParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","parseRelsXml","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","addExtension"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/loaders/3MFLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, LoaderUtils, Group, Color, Matrix4, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, MeshStandardMaterial, sRGBEncoding, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nvar ThreeMFLoader = function (manager) {\n  Loader.call(this, manager);\n  this.availableExtensions = [];\n};\n\nThreeMFLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: ThreeMFLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    var scope = this;\n    var textureLoader = new TextureLoader(this.manager);\n\n    function loadDocument(data) {\n      var zip = null;\n      var file = null;\n      var relsName;\n      var modelRelsName;\n      var modelPartNames = [];\n      var texturesPartNames = [];\n      var rels;\n      var modelRels;\n      var modelParts = {};\n      var printTicketParts = {};\n      var texturesParts = {};\n      var otherParts = {};\n\n      try {\n        zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ; else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) ;\n      } //\n\n\n      var relsView = zip[relsName];\n      var relsFileText = LoaderUtils.decodeText(relsView);\n      rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        var relsView = zip[modelRelsName];\n        var relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        var modelPart = modelPartNames[i];\n        var view = zip[modelPart];\n        var fileText = LoaderUtils.decodeText(view);\n        var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n\n        var modelNode = xmlData.querySelector('model');\n        var extensions = {};\n\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          var attr = modelNode.attributes[i];\n\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n\n        var modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n\n        modelParts[modelPart] = modelData;\n      } //\n\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        var texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n\n    function parseRelsXml(relsFileText) {\n      var relationships = [];\n      var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      var relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n      for (let i = 0; i < relsNodes.length; i++) {\n        var relsNode = relsNodes[i];\n        var relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n\n        };\n        relationships.push(relationship);\n      }\n\n      return relationships;\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      var metadataData = {};\n\n      for (let i = 0; i < metadataNodes.length; i++) {\n        var metadataNode = metadataNodes[i];\n        var name = metadataNode.getAttribute('name');\n        var validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n\n      return metadataData;\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      var basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      var basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        var basematerialNode = basematerialNodes[i];\n        var basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n\n      return basematerialsData;\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      var texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      var texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      var uvs = [];\n\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        var tex2coordNode = tex2coordNodes[i];\n        var u = tex2coordNode.getAttribute('u');\n        var v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      var colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      var colorNodes = colorGroupNode.querySelectorAll('color');\n      var colors = [];\n      var colorObject = new Color();\n\n      for (let i = 0; i < colorNodes.length; i++) {\n        var colorNode = colorNodes[i];\n        var color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      var metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n      };\n      var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      var metallicData = [];\n\n      for (let i = 0; i < metallicNodes.length; i++) {\n        var metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      var basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n\n    function parseMeshNode(meshNode) {\n      var meshData = {};\n      var vertices = [];\n      var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n      for (let i = 0; i < vertexNodes.length; i++) {\n        var vertexNode = vertexNodes[i];\n        var x = vertexNode.getAttribute('x');\n        var y = vertexNode.getAttribute('y');\n        var z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n\n      meshData['vertices'] = new Float32Array(vertices);\n      var triangleProperties = [];\n      var triangles = [];\n      var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n      for (let i = 0; i < triangleNodes.length; i++) {\n        var triangleNode = triangleNodes[i];\n        var v1 = triangleNode.getAttribute('v1');\n        var v2 = triangleNode.getAttribute('v2');\n        var v3 = triangleNode.getAttribute('v3');\n        var p1 = triangleNode.getAttribute('p1');\n        var p2 = triangleNode.getAttribute('p2');\n        var p3 = triangleNode.getAttribute('p3');\n        var pid = triangleNode.getAttribute('pid');\n        var triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n\n    function parseComponentsNode(componentsNode) {\n      var components = [];\n      var componentNodes = componentsNode.querySelectorAll('component');\n\n      for (let i = 0; i < componentNodes.length; i++) {\n        var componentNode = componentNodes[i];\n        var componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n\n      return components;\n    }\n\n    function parseComponentNode(componentNode) {\n      var componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      var transform = componentNode.getAttribute('transform');\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n\n      return componentData;\n    }\n\n    function parseTransform(transform) {\n      var t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      var matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n\n    function parseObjectNode(objectNode) {\n      var objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      var id = objectNode.getAttribute('id');\n\n      if (id) {\n        objectData['id'] = id;\n      }\n\n      var pid = objectNode.getAttribute('pid');\n\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n\n      var pindex = objectNode.getAttribute('pindex');\n\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n\n      var thumbnail = objectNode.getAttribute('thumbnail');\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n\n      var partnumber = objectNode.getAttribute('partnumber');\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n\n      var name = objectNode.getAttribute('name');\n\n      if (name) {\n        objectData['name'] = name;\n      }\n\n      var meshNode = objectNode.querySelector('mesh');\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n\n      var componentsNode = objectNode.querySelector('components');\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n\n      return objectData;\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      var resourcesData = {};\n      resourcesData['basematerials'] = {};\n      var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        var basematerialsNode = basematerialsNodes[i];\n        var basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n\n      resourcesData['texture2d'] = {};\n      var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        var textures2DNode = textures2DNodes[i];\n        var texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n\n      resourcesData['colorgroup'] = {};\n      var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        var colorGroupNode = colorGroupNodes[i];\n        var colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n\n      resourcesData['texture2dgroup'] = {};\n      var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        var textures2DGroupNode = textures2DGroupNodes[i];\n        var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n\n      resourcesData['object'] = {};\n      var objectNodes = resourcesNode.querySelectorAll('object');\n\n      for (let i = 0; i < objectNodes.length; i++) {\n        var objectNode = objectNodes[i];\n        var objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n\n      return resourcesData;\n    }\n\n    function parseBuildNode(buildNode) {\n      var buildData = [];\n      var itemNodes = buildNode.querySelectorAll('item');\n\n      for (let i = 0; i < itemNodes.length; i++) {\n        var itemNode = itemNodes[i];\n        var buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        var transform = itemNode.getAttribute('transform');\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n\n        buildData.push(buildItem);\n      }\n\n      return buildData;\n    }\n\n    function parseModelNode(modelNode) {\n      var modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      var metadataNodes = modelNode.querySelectorAll('metadata');\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n\n      var resourcesNode = modelNode.querySelector('resources');\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n\n      var buildNode = modelNode.querySelector('build');\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n\n      return modelData;\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      var texid = texture2dgroup.texid;\n      var texture2ds = modelData.resources.texture2d;\n      var texture2d = texture2ds[texid];\n\n      if (texture2d) {\n        var data = textureData[texture2d.path];\n        var type = texture2d.contenttype;\n        var blob = new Blob([data], {\n          type: type\n        });\n        var sourceURI = URL.createObjectURL(blob);\n        var texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n\n        return texture;\n      } else {\n        return null;\n      }\n    }\n\n    function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {\n      var objectPindex = objectData.pindex;\n      var materialMap = {};\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n\n      var keys = Object.keys(materialMap);\n      var meshes = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        var materialIndex = keys[i];\n        var trianglePropertiesProps = materialMap[materialIndex];\n        var basematerialData = basematerials.basematerials[materialIndex];\n        var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var vertices = meshData.vertices;\n\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          var triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        var mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n\n      return meshes;\n    }\n\n    function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {\n      // geometry\n      var geometry = new BufferGeometry();\n      var positionData = [];\n      var uvData = [];\n      var vertices = meshData.vertices;\n      var uvs = texture2dgroup.uvs;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      var material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData, objectData) {\n      // geometry\n      var geometry = new BufferGeometry();\n      var positionData = [];\n      var colorData = [];\n      var vertices = meshData.vertices;\n      var colors = colorgroup.colors;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var v1 = triangleProperty.v1;\n        var v2 = triangleProperty.v2;\n        var v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        var p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        var p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        var p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      var material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildDefaultMesh(meshData) {\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      var material = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      var mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {\n      var keys = Object.keys(resourceMap);\n      var meshes = [];\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        var resourceId = keys[i];\n        var triangleProperties = resourceMap[resourceId];\n        var resourceType = getResourceType(resourceId, modelData);\n\n        switch (resourceType) {\n          case 'material':\n            var basematerials = modelData.resources.basematerials[resourceId];\n            var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);\n\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n\n            break;\n\n          case 'texture':\n            var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));\n            break;\n\n          case 'vertexColors':\n            var colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData, objectData));\n            break;\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n\n      return meshes;\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n\n    function analyzeObject(modelData, meshData, objectData) {\n      var resourceMap = {};\n      var triangleProperties = meshData['triangleProperties'];\n      var objectPid = objectData.pid;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        var triangleProperty = triangleProperties[i];\n        var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n\n      return resourceMap;\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      var group = new Group();\n      var resourceMap = analyzeObject(modelData, meshData, objectData);\n      var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n\n      return group;\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n\n      var availableExtensions = [];\n      var keys = Object.keys(extensions);\n\n      for (let i = 0; i < keys.length; i++) {\n        var ns = keys[i];\n\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          var extension = scope.availableExtensions[j];\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n\n      for (let i = 0; i < availableExtensions.length; i++) {\n        var extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      var material;\n      var displaypropertiesid = materialData.displaypropertiesid;\n      var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      var displaycolor = materialData.displaycolor;\n      var color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n\n      return material;\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      var composite = new Group();\n\n      for (let j = 0; j < compositeData.length; j++) {\n        var component = compositeData[j];\n        var build = objects[component.objectId];\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n\n        var object3D = build.clone(); // apply component transform\n\n        var transform = component.transform;\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        composite.add(object3D);\n      }\n\n      return composite;\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      var objectData = modelData['resources']['object'][objectId];\n\n      if (objectData['mesh']) {\n        var meshData = objectData['mesh'];\n        var extensions = modelData['extensions'];\n        var modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        var compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n    }\n\n    function buildObjects(data3mf) {\n      var modelsData = data3mf.model;\n      var modelRels = data3mf.modelRels;\n      var objects = {};\n      var modelsKeys = Object.keys(modelsData);\n      var textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          var modelRel = modelRels[i];\n          var textureKey = modelRel.target.substring(1);\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        var modelsKey = modelsKeys[i];\n        var modelData = modelsData[modelsKey];\n        var objectIds = Object.keys(modelData['resources']['object']);\n\n        for (let j = 0; j < objectIds.length; j++) {\n          var objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n\n      return objects;\n    }\n\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        var rel = rels[i];\n        var extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n\n    function build(objects, data3mf) {\n      var group = new Group();\n      var relationship = fetch3DModelPart(data3mf['rels']);\n      var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n      for (let i = 0; i < buildData.length; i++) {\n        var buildItem = buildData[i];\n        var object3D = objects[buildItem['objectId']]; // apply transform\n\n        var transform = buildItem['transform'];\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        group.add(object3D);\n      }\n\n      return group;\n    }\n\n    var data3mf = loadDocument(data);\n    var objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  },\n  addExtension: function (extension) {\n    this.availableExtensions.push(extension);\n  }\n});\n\nexport { ThreeMFLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}