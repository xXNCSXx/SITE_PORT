{"ast":null,"code":"import { Group, SphereGeometry, BoxGeometry, MeshStandardMaterial, Mesh } from 'three';\nclass XRHandPrimitiveModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.envMap = null;\n    this.handMesh = new Group();\n    this.handModel.add(this.handMesh);\n    if (window.XRHand) {\n      let geometry;\n      if (!options || !options.primitive || options.primitive === 'sphere') {\n        geometry = new SphereGeometry(1, 10, 10);\n      } else if (options.primitive === 'box') {\n        geometry = new BoxGeometry(1, 1, 1);\n      }\n      const jointMaterial = new MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 1,\n        metalness: 0\n      });\n      const tipMaterial = new MeshStandardMaterial({\n        color: 0x999999,\n        roughness: 1,\n        metalness: 0\n      });\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      for (let jointName of joints) {\n        var cube = new Mesh(geometry, jointName.indexOf('tip') !== -1 ? tipMaterial : jointMaterial);\n        cube.castShadow = true;\n        cube.receiveShadow = true;\n        cube.jointName = jointName;\n        this.handMesh.add(cube);\n      }\n    }\n  }\n  updateMesh() {\n    const defaultRadius = 0.008;\n    const objects = this.handMesh.children; // XR Joints\n\n    const XRJoints = this.controller.joints;\n    for (let i = 0; i < objects.length; i++) {\n      const jointMesh = objects[i];\n      const XRJoint = XRJoints[jointMesh.jointName];\n      if (XRJoint.visible) {\n        jointMesh.position.copy(XRJoint.position);\n        jointMesh.quaternion.copy(XRJoint.quaternion);\n        jointMesh.scale.setScalar(XRJoint.jointRadius || defaultRadius);\n      }\n      jointMesh.visible = XRJoint.visible;\n    }\n  }\n}\nexport { XRHandPrimitiveModel };","map":{"version":3,"names":["Group","SphereGeometry","BoxGeometry","MeshStandardMaterial","Mesh","XRHandPrimitiveModel","constructor","handModel","controller","path","handedness","options","envMap","handMesh","add","window","XRHand","geometry","primitive","jointMaterial","color","roughness","metalness","tipMaterial","joints","jointName","cube","indexOf","castShadow","receiveShadow","updateMesh","defaultRadius","objects","children","XRJoints","i","length","jointMesh","XRJoint","visible","position","copy","quaternion","scale","setScalar","jointRadius"],"sources":["C:/Users/drncs/OneDrive/Área de Trabalho/PORTIFOLIO/SITE3/node_modules/three-stdlib/webxr/XRHandPrimitiveModel.js"],"sourcesContent":["import { Group, SphereGeometry, BoxGeometry, MeshStandardMaterial, Mesh } from 'three';\n\nclass XRHandPrimitiveModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.envMap = null;\n    this.handMesh = new Group();\n    this.handModel.add(this.handMesh);\n\n    if (window.XRHand) {\n      let geometry;\n\n      if (!options || !options.primitive || options.primitive === 'sphere') {\n        geometry = new SphereGeometry(1, 10, 10);\n      } else if (options.primitive === 'box') {\n        geometry = new BoxGeometry(1, 1, 1);\n      }\n\n      const jointMaterial = new MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 1,\n        metalness: 0\n      });\n      const tipMaterial = new MeshStandardMaterial({\n        color: 0x999999,\n        roughness: 1,\n        metalness: 0\n      });\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n\n      for (let jointName of joints) {\n        var cube = new Mesh(geometry, jointName.indexOf('tip') !== -1 ? tipMaterial : jointMaterial);\n        cube.castShadow = true;\n        cube.receiveShadow = true;\n        cube.jointName = jointName;\n        this.handMesh.add(cube);\n      }\n    }\n  }\n\n  updateMesh() {\n    const defaultRadius = 0.008;\n    const objects = this.handMesh.children; // XR Joints\n\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < objects.length; i++) {\n      const jointMesh = objects[i];\n      const XRJoint = XRJoints[jointMesh.jointName];\n\n      if (XRJoint.visible) {\n        jointMesh.position.copy(XRJoint.position);\n        jointMesh.quaternion.copy(XRJoint.quaternion);\n        jointMesh.scale.setScalar(XRJoint.jointRadius || defaultRadius);\n      }\n\n      jointMesh.visible = XRJoint.visible;\n    }\n  }\n\n}\n\nexport { XRHandPrimitiveModel };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}