{"ast":null,"code":"import { forEach, has, isArray, isFunction, peek, some } from \"../../../utils/utils\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal } from \"../../grammar/gast/gast_public\";\nimport { Lexer } from \"../../../scan/lexer_public\";\nimport { augmentTokenTypes, hasShortKeyProperty } from \"../../../scan/tokens\";\nimport { createToken, createTokenInstance } from \"../../../scan/tokens_public\";\nimport { END_OF_FILE } from \"../parser\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys\";\nvar RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\"\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nvar HANDLE_SEPARATOR = true;\nvar MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\nvar RFT = createToken({\n  name: \"RECORDING_PHASE_TOKEN\",\n  pattern: Lexer.NA\n});\naugmentTokenTypes([RFT]);\nvar RECORDING_PHASE_TOKEN = createTokenInstance(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\\t\" + \"\" + \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n// Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nvar RECORDING_PHASE_CSTNODE = {\n  name: \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" + \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {}\n};\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nvar GastRecorder = /** @class */function () {\n  function GastRecorder() {}\n  GastRecorder.prototype.initGastRecorder = function (config) {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  };\n  GastRecorder.prototype.enableRecording = function () {\n    var _this = this;\n    this.RECORDING_PHASE = true;\n    this.TRACE_INIT(\"Enable Recording\", function () {\n      var _loop_1 = function (i) {\n        var idx = i > 0 ? i : \"\";\n        _this[\"CONSUME\" + idx] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        _this[\"SUBRULE\" + idx] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2);\n        };\n        _this[\"OPTION\" + idx] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        _this[\"OR\" + idx] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        _this[\"MANY\" + idx] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        _this[\"MANY_SEP\" + idx] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        _this[\"AT_LEAST_ONE\" + idx] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        _this[\"AT_LEAST_ONE_SEP\" + idx] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      };\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (var i = 0; i < 10; i++) {\n        _loop_1(i);\n      }\n      // DSL methods with the idx(suffix) as an argument\n      _this[\"consume\"] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      _this[\"subrule\"] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2);\n      };\n      _this[\"option\"] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      _this[\"or\"] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      _this[\"many\"] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      _this[\"atLeastOne\"] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n      _this.ACTION = _this.ACTION_RECORD;\n      _this.BACKTRACK = _this.BACKTRACK_RECORD;\n      _this.LA = _this.LA_RECORD;\n    });\n  };\n  GastRecorder.prototype.disableRecording = function () {\n    var _this = this;\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", function () {\n      for (var i = 0; i < 10; i++) {\n        var idx = i > 0 ? i : \"\";\n        delete _this[\"CONSUME\" + idx];\n        delete _this[\"SUBRULE\" + idx];\n        delete _this[\"OPTION\" + idx];\n        delete _this[\"OR\" + idx];\n        delete _this[\"MANY\" + idx];\n        delete _this[\"MANY_SEP\" + idx];\n        delete _this[\"AT_LEAST_ONE\" + idx];\n        delete _this[\"AT_LEAST_ONE_SEP\" + idx];\n      }\n      delete _this[\"consume\"];\n      delete _this[\"subrule\"];\n      delete _this[\"option\"];\n      delete _this[\"or\"];\n      delete _this[\"many\"];\n      delete _this[\"atLeastOne\"];\n      delete _this.ACTION;\n      delete _this.BACKTRACK;\n      delete _this.LA;\n    });\n  };\n  // TODO: is there any way to use this method to check no\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  GastRecorder.prototype.ACTION_RECORD = function (impl) {\n    // NO-OP during recording\n    return;\n  };\n  // Executing backtracking logic will break our recording logic assumptions\n  GastRecorder.prototype.BACKTRACK_RECORD = function (grammarRule, args) {\n    return function () {\n      return true;\n    };\n  };\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  GastRecorder.prototype.LA_RECORD = function (howMuch) {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  };\n  GastRecorder.prototype.topLevelRuleRecord = function (name, def) {\n    try {\n      var newTopLevelRule = new Rule({\n        definition: [],\n        name: name\n      });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message = originalError.message + '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' + \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  };\n  // Implementation of parsing DSL\n  GastRecorder.prototype.optionInternalRecord = function (actionORMethodDef, occurrence) {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  };\n  GastRecorder.prototype.atLeastOneInternalRecord = function (occurrence, actionORMethodDef) {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  };\n  GastRecorder.prototype.atLeastOneSepFirstInternalRecord = function (occurrence, options) {\n    recordProd.call(this, RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n  };\n  GastRecorder.prototype.manyInternalRecord = function (occurrence, actionORMethodDef) {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  };\n  GastRecorder.prototype.manySepFirstInternalRecord = function (occurrence, options) {\n    recordProd.call(this, RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n  };\n  GastRecorder.prototype.orInternalRecord = function (altsOrOpts, occurrence) {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  };\n  GastRecorder.prototype.subruleInternalRecord = function (ruleToCall, occurrence, options) {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      var error = new Error(\"<SUBRULE\" + getIdxSuffix(occurrence) + \"> argument is invalid\" + (\" expecting a Parser method reference but got: <\" + JSON.stringify(ruleToCall) + \">\") + (\"\\n inside top level rule: <\" + this.recordingProdStack[0].name + \">\"));\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    var prevProd = peek(this.recordingProdStack);\n    var ruleName = ruleToCall[\"ruleName\"];\n    var newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined\n    });\n    prevProd.definition.push(newNoneTerminal);\n    return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;\n  };\n  GastRecorder.prototype.consumeInternalRecord = function (tokType, occurrence, options) {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      var error = new Error(\"<CONSUME\" + getIdxSuffix(occurrence) + \"> argument is invalid\" + (\" expecting a TokenType reference but got: <\" + JSON.stringify(tokType) + \">\") + (\"\\n inside top level rule: <\" + this.recordingProdStack[0].name + \">\"));\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    var prevProd = peek(this.recordingProdStack);\n    var newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType\n    });\n    prevProd.definition.push(newNoneTerminal);\n    return RECORDING_PHASE_TOKEN;\n  };\n  return GastRecorder;\n}();\nexport { GastRecorder };\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {\n  if (handleSep === void 0) {\n    handleSep = false;\n  }\n  assertMethodIdxIsValid(occurrence);\n  var prevProd = peek(this.recordingProdStack);\n  var grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n  var newProd = new prodConstructor({\n    definition: [],\n    idx: occurrence\n  });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n  return RECORDING_NULL_OBJECT;\n}\nfunction recordOrProd(mainProdArg, occurrence) {\n  var _this = this;\n  assertMethodIdxIsValid(occurrence);\n  var prevProd = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  var hasOptions = isArray(mainProdArg) === false;\n  var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n  var newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n  var hasPredicates = some(alts, function (currAlt) {\n    return isFunction(currAlt.GATE);\n  });\n  newOrProd.hasPredicates = hasPredicates;\n  prevProd.definition.push(newOrProd);\n  forEach(alts, function (currAlt) {\n    var currAltFlat = new Alternative({\n      definition: []\n    });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    _this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(_this);\n    _this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\nfunction getIdxSuffix(idx) {\n  return idx === 0 ? \"\" : \"\" + idx;\n}\nfunction assertMethodIdxIsValid(idx) {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    var error = new Error(\n    // The stack trace will contain all the needed details\n    \"Invalid DSL Method idx value: <\" + idx + \">\\n\\t\" + (\"Idx value must be a none negative value smaller than \" + (MAX_METHOD_IDX + 1)));\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/gast_recorder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { forEach, has, isArray, isFunction, peek, some } from \"../../../utils/utils\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal } from \"../../grammar/gast/gast_public\";\nimport { Lexer } from \"../../../scan/lexer_public\";\nimport { augmentTokenTypes, hasShortKeyProperty } from \"../../../scan/tokens\";\nimport { createToken, createTokenInstance } from \"../../../scan/tokens_public\";\nimport { END_OF_FILE } from \"../parser\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys\";\nvar RECORDING_NULL_OBJECT = {\n    description: \"This Object indicates the Parser is during Recording Phase\"\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nvar HANDLE_SEPARATOR = true;\nvar MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\nvar RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nvar RECORDING_PHASE_TOKEN = createTokenInstance(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\", \n// Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nvar RECORDING_PHASE_CSTNODE = {\n    name: \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n        \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n    children: {}\n};\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nvar GastRecorder = /** @class */ (function () {\n    function GastRecorder() {\n    }\n    GastRecorder.prototype.initGastRecorder = function (config) {\n        this.recordingProdStack = [];\n        this.RECORDING_PHASE = false;\n    };\n    GastRecorder.prototype.enableRecording = function () {\n        var _this = this;\n        this.RECORDING_PHASE = true;\n        this.TRACE_INIT(\"Enable Recording\", function () {\n            var _loop_1 = function (i) {\n                var idx = i > 0 ? i : \"\";\n                _this[\"CONSUME\" + idx] = function (arg1, arg2) {\n                    return this.consumeInternalRecord(arg1, i, arg2);\n                };\n                _this[\"SUBRULE\" + idx] = function (arg1, arg2) {\n                    return this.subruleInternalRecord(arg1, i, arg2);\n                };\n                _this[\"OPTION\" + idx] = function (arg1) {\n                    return this.optionInternalRecord(arg1, i);\n                };\n                _this[\"OR\" + idx] = function (arg1) {\n                    return this.orInternalRecord(arg1, i);\n                };\n                _this[\"MANY\" + idx] = function (arg1) {\n                    this.manyInternalRecord(i, arg1);\n                };\n                _this[\"MANY_SEP\" + idx] = function (arg1) {\n                    this.manySepFirstInternalRecord(i, arg1);\n                };\n                _this[\"AT_LEAST_ONE\" + idx] = function (arg1) {\n                    this.atLeastOneInternalRecord(i, arg1);\n                };\n                _this[\"AT_LEAST_ONE_SEP\" + idx] = function (arg1) {\n                    this.atLeastOneSepFirstInternalRecord(i, arg1);\n                };\n            };\n            /**\n             * Warning Dark Voodoo Magic upcoming!\n             * We are \"replacing\" the public parsing DSL methods API\n             * With **new** alternative implementations on the Parser **instance**\n             *\n             * So far this is the only way I've found to avoid performance regressions during parsing time.\n             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n             *   implementations directly instead.\n             */\n            for (var i = 0; i < 10; i++) {\n                _loop_1(i);\n            }\n            // DSL methods with the idx(suffix) as an argument\n            _this[\"consume\"] = function (idx, arg1, arg2) {\n                return this.consumeInternalRecord(arg1, idx, arg2);\n            };\n            _this[\"subrule\"] = function (idx, arg1, arg2) {\n                return this.subruleInternalRecord(arg1, idx, arg2);\n            };\n            _this[\"option\"] = function (idx, arg1) {\n                return this.optionInternalRecord(arg1, idx);\n            };\n            _this[\"or\"] = function (idx, arg1) {\n                return this.orInternalRecord(arg1, idx);\n            };\n            _this[\"many\"] = function (idx, arg1) {\n                this.manyInternalRecord(idx, arg1);\n            };\n            _this[\"atLeastOne\"] = function (idx, arg1) {\n                this.atLeastOneInternalRecord(idx, arg1);\n            };\n            _this.ACTION = _this.ACTION_RECORD;\n            _this.BACKTRACK = _this.BACKTRACK_RECORD;\n            _this.LA = _this.LA_RECORD;\n        });\n    };\n    GastRecorder.prototype.disableRecording = function () {\n        var _this = this;\n        this.RECORDING_PHASE = false;\n        // By deleting these **instance** properties, any future invocation\n        // will be deferred to the original methods on the **prototype** object\n        // This seems to get rid of any incorrect optimizations that V8 may\n        // do during the recording phase.\n        this.TRACE_INIT(\"Deleting Recording methods\", function () {\n            for (var i = 0; i < 10; i++) {\n                var idx = i > 0 ? i : \"\";\n                delete _this[\"CONSUME\" + idx];\n                delete _this[\"SUBRULE\" + idx];\n                delete _this[\"OPTION\" + idx];\n                delete _this[\"OR\" + idx];\n                delete _this[\"MANY\" + idx];\n                delete _this[\"MANY_SEP\" + idx];\n                delete _this[\"AT_LEAST_ONE\" + idx];\n                delete _this[\"AT_LEAST_ONE_SEP\" + idx];\n            }\n            delete _this[\"consume\"];\n            delete _this[\"subrule\"];\n            delete _this[\"option\"];\n            delete _this[\"or\"];\n            delete _this[\"many\"];\n            delete _this[\"atLeastOne\"];\n            delete _this.ACTION;\n            delete _this.BACKTRACK;\n            delete _this.LA;\n        });\n    };\n    // TODO: is there any way to use this method to check no\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    GastRecorder.prototype.ACTION_RECORD = function (impl) {\n        // NO-OP during recording\n        return;\n    };\n    // Executing backtracking logic will break our recording logic assumptions\n    GastRecorder.prototype.BACKTRACK_RECORD = function (grammarRule, args) {\n        return function () { return true; };\n    };\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    GastRecorder.prototype.LA_RECORD = function (howMuch) {\n        // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n        // On LA return EOF at the end of the input so an infinite loop may occur.\n        return END_OF_FILE;\n    };\n    GastRecorder.prototype.topLevelRuleRecord = function (name, def) {\n        try {\n            var newTopLevelRule = new Rule({ definition: [], name: name });\n            newTopLevelRule.name = name;\n            this.recordingProdStack.push(newTopLevelRule);\n            def.call(this);\n            this.recordingProdStack.pop();\n            return newTopLevelRule;\n        }\n        catch (originalError) {\n            if (originalError.KNOWN_RECORDER_ERROR !== true) {\n                try {\n                    originalError.message =\n                        originalError.message +\n                            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n                            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n                }\n                catch (mutabilityError) {\n                    // We may not be able to modify the original error object\n                    throw originalError;\n                }\n            }\n            throw originalError;\n        }\n    };\n    // Implementation of parsing DSL\n    GastRecorder.prototype.optionInternalRecord = function (actionORMethodDef, occurrence) {\n        return recordProd.call(this, Option, actionORMethodDef, occurrence);\n    };\n    GastRecorder.prototype.atLeastOneInternalRecord = function (occurrence, actionORMethodDef) {\n        recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n    };\n    GastRecorder.prototype.atLeastOneSepFirstInternalRecord = function (occurrence, options) {\n        recordProd.call(this, RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    };\n    GastRecorder.prototype.manyInternalRecord = function (occurrence, actionORMethodDef) {\n        recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n    };\n    GastRecorder.prototype.manySepFirstInternalRecord = function (occurrence, options) {\n        recordProd.call(this, RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    };\n    GastRecorder.prototype.orInternalRecord = function (altsOrOpts, occurrence) {\n        return recordOrProd.call(this, altsOrOpts, occurrence);\n    };\n    GastRecorder.prototype.subruleInternalRecord = function (ruleToCall, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n            var error = new Error(\"<SUBRULE\" + getIdxSuffix(occurrence) + \"> argument is invalid\" +\n                (\" expecting a Parser method reference but got: <\" + JSON.stringify(ruleToCall) + \">\") +\n                (\"\\n inside top level rule: <\" + this.recordingProdStack[0].name + \">\"));\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        var prevProd = peek(this.recordingProdStack);\n        var ruleName = ruleToCall[\"ruleName\"];\n        var newNoneTerminal = new NonTerminal({\n            idx: occurrence,\n            nonTerminalName: ruleName,\n            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n            referencedRule: undefined\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;\n    };\n    GastRecorder.prototype.consumeInternalRecord = function (tokType, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!hasShortKeyProperty(tokType)) {\n            var error = new Error(\"<CONSUME\" + getIdxSuffix(occurrence) + \"> argument is invalid\" +\n                (\" expecting a TokenType reference but got: <\" + JSON.stringify(tokType) + \">\") +\n                (\"\\n inside top level rule: <\" + this.recordingProdStack[0].name + \">\"));\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        var prevProd = peek(this.recordingProdStack);\n        var newNoneTerminal = new Terminal({\n            idx: occurrence,\n            terminalType: tokType\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return RECORDING_PHASE_TOKEN;\n    };\n    return GastRecorder;\n}());\nexport { GastRecorder };\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {\n    if (handleSep === void 0) { handleSep = false; }\n    assertMethodIdxIsValid(occurrence);\n    var prevProd = peek(this.recordingProdStack);\n    var grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n    var newProd = new prodConstructor({ definition: [], idx: occurrence });\n    if (handleSep) {\n        newProd.separator = mainProdArg.SEP;\n    }\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    this.recordingProdStack.push(newProd);\n    grammarAction.call(this);\n    prevProd.definition.push(newProd);\n    this.recordingProdStack.pop();\n    return RECORDING_NULL_OBJECT;\n}\nfunction recordOrProd(mainProdArg, occurrence) {\n    var _this = this;\n    assertMethodIdxIsValid(occurrence);\n    var prevProd = peek(this.recordingProdStack);\n    // Only an array of alternatives\n    var hasOptions = isArray(mainProdArg) === false;\n    var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n    var newOrProd = new Alternation({\n        definition: [],\n        idx: occurrence,\n        ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n    });\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    var hasPredicates = some(alts, function (currAlt) { return isFunction(currAlt.GATE); });\n    newOrProd.hasPredicates = hasPredicates;\n    prevProd.definition.push(newOrProd);\n    forEach(alts, function (currAlt) {\n        var currAltFlat = new Alternative({ definition: [] });\n        newOrProd.definition.push(currAltFlat);\n        if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;\n        }\n        // **implicit** ignoreAmbiguities due to usage of gate\n        else if (has(currAlt, \"GATE\")) {\n            currAltFlat.ignoreAmbiguities = true;\n        }\n        _this.recordingProdStack.push(currAltFlat);\n        currAlt.ALT.call(_this);\n        _this.recordingProdStack.pop();\n    });\n    return RECORDING_NULL_OBJECT;\n}\nfunction getIdxSuffix(idx) {\n    return idx === 0 ? \"\" : \"\" + idx;\n}\nfunction assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n        var error = new Error(\n        // The stack trace will contain all the needed details\n        \"Invalid DSL Method idx value: <\" + idx + \">\\n\\t\" +\n            (\"Idx value must be a none negative value smaller than \" + (MAX_METHOD_IDX + 1)));\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n    }\n}\n//# sourceMappingURL=gast_recorder.js.map"]},"metadata":{},"sourceType":"module"}