{"ast":null,"code":"const t = new Uint8Array([0]),\n  e = [171, 75, 84, 88, 32, 50, 48, 187, 13, 10, 26, 10];\nvar n, i, s, a, r, o, l, f;\n!function (t) {\n  t[t.NONE = 0] = \"NONE\", t[t.BASISLZ = 1] = \"BASISLZ\", t[t.ZSTD = 2] = \"ZSTD\", t[t.ZLIB = 3] = \"ZLIB\";\n}(n || (n = {})), function (t) {\n  t[t.BASICFORMAT = 0] = \"BASICFORMAT\";\n}(i || (i = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.ETC1S = 163] = \"ETC1S\", t[t.UASTC = 166] = \"UASTC\";\n}(s || (s = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.SRGB = 1] = \"SRGB\";\n}(a || (a = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.LINEAR = 1] = \"LINEAR\", t[t.SRGB = 2] = \"SRGB\", t[t.ITU = 3] = \"ITU\", t[t.NTSC = 4] = \"NTSC\", t[t.SLOG = 5] = \"SLOG\", t[t.SLOG2 = 6] = \"SLOG2\";\n}(r || (r = {})), function (t) {\n  t[t.ALPHA_STRAIGHT = 0] = \"ALPHA_STRAIGHT\", t[t.ALPHA_PREMULTIPLIED = 1] = \"ALPHA_PREMULTIPLIED\";\n}(o || (o = {})), function (t) {\n  t[t.RGB = 0] = \"RGB\", t[t.RRR = 3] = \"RRR\", t[t.GGG = 4] = \"GGG\", t[t.AAA = 15] = \"AAA\";\n}(l || (l = {})), function (t) {\n  t[t.RGB = 0] = \"RGB\", t[t.RGBA = 3] = \"RGBA\", t[t.RRR = 4] = \"RRR\", t[t.RRRG = 5] = \"RRRG\";\n}(f || (f = {}));\nclass U {\n  constructor() {\n    this.vkFormat = 0, this.typeSize = 1, this.pixelWidth = 0, this.pixelHeight = 0, this.pixelDepth = 0, this.layerCount = 0, this.faceCount = 1, this.supercompressionScheme = n.NONE, this.levels = [], this.dataFormatDescriptor = [{\n      vendorId: 0,\n      descriptorType: i.BASICFORMAT,\n      versionNumber: 2,\n      descriptorBlockSize: 40,\n      colorModel: s.UNSPECIFIED,\n      colorPrimaries: a.SRGB,\n      transferFunction: a.SRGB,\n      flags: o.ALPHA_STRAIGHT,\n      texelBlockDimension: {\n        x: 4,\n        y: 4,\n        z: 1,\n        w: 1\n      },\n      bytesPlane: [],\n      samples: []\n    }], this.keyValue = {}, this.globalData = null;\n  }\n}\nclass c {\n  constructor(t, e, n, i) {\n    this._dataView = new DataView(t.buffer, t.byteOffset + e, n), this._littleEndian = i, this._offset = 0;\n  }\n  _nextUint8() {\n    const t = this._dataView.getUint8(this._offset);\n    return this._offset += 1, t;\n  }\n  _nextUint16() {\n    const t = this._dataView.getUint16(this._offset, this._littleEndian);\n    return this._offset += 2, t;\n  }\n  _nextUint32() {\n    const t = this._dataView.getUint32(this._offset, this._littleEndian);\n    return this._offset += 4, t;\n  }\n  _nextUint64() {\n    const t = this._dataView.getUint32(this._offset, this._littleEndian) + 2 ** 32 * this._dataView.getUint32(this._offset + 4, this._littleEndian);\n    return this._offset += 8, t;\n  }\n  _skip(t) {\n    return this._offset += t, this;\n  }\n  _scan(t, e = 0) {\n    const n = this._offset;\n    let i = 0;\n    for (; this._dataView.getUint8(this._offset) !== e && i < t;) i++, this._offset++;\n    return i < t && this._offset++, new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + n, i);\n  }\n}\nfunction h(t) {\n  return \"undefined\" != typeof TextEncoder ? new TextEncoder().encode(t) : Buffer.from(t);\n}\nfunction _(t) {\n  return \"undefined\" != typeof TextDecoder ? new TextDecoder().decode(t) : Buffer.from(t).toString(\"utf8\");\n}\nfunction g(t) {\n  let e = 0;\n  for (const n of t) e += n.byteLength;\n  const n = new Uint8Array(e);\n  let i = 0;\n  for (const e of t) n.set(new Uint8Array(e), i), i += e.byteLength;\n  return n;\n}\nfunction p(t) {\n  const n = new Uint8Array(t.buffer, t.byteOffset, e.length);\n  if (n[0] !== e[0] || n[1] !== e[1] || n[2] !== e[2] || n[3] !== e[3] || n[4] !== e[4] || n[5] !== e[5] || n[6] !== e[6] || n[7] !== e[7] || n[8] !== e[8] || n[9] !== e[9] || n[10] !== e[10] || n[11] !== e[11]) throw new Error(\"Missing KTX 2.0 identifier.\");\n  const i = new U(),\n    s = 17 * Uint32Array.BYTES_PER_ELEMENT,\n    a = new c(t, e.length, s, !0);\n  i.vkFormat = a._nextUint32(), i.typeSize = a._nextUint32(), i.pixelWidth = a._nextUint32(), i.pixelHeight = a._nextUint32(), i.pixelDepth = a._nextUint32(), i.layerCount = a._nextUint32(), i.faceCount = a._nextUint32();\n  const r = a._nextUint32();\n  i.supercompressionScheme = a._nextUint32();\n  const o = a._nextUint32(),\n    l = a._nextUint32(),\n    f = a._nextUint32(),\n    h = a._nextUint32(),\n    g = a._nextUint64(),\n    p = a._nextUint64(),\n    x = new c(t, e.length + s, 3 * r * 8, !0);\n  for (let e = 0; e < r; e++) i.levels.push({\n    levelData: new Uint8Array(t.buffer, t.byteOffset + x._nextUint64(), x._nextUint64()),\n    uncompressedByteLength: x._nextUint64()\n  });\n  const u = new c(t, o, l, !0),\n    y = {\n      vendorId: u._skip(4)._nextUint16(),\n      descriptorType: u._nextUint16(),\n      versionNumber: u._nextUint16(),\n      descriptorBlockSize: u._nextUint16(),\n      colorModel: u._nextUint8(),\n      colorPrimaries: u._nextUint8(),\n      transferFunction: u._nextUint8(),\n      flags: u._nextUint8(),\n      texelBlockDimension: {\n        x: u._nextUint8() + 1,\n        y: u._nextUint8() + 1,\n        z: u._nextUint8() + 1,\n        w: u._nextUint8() + 1\n      },\n      bytesPlane: [u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8()],\n      samples: []\n    },\n    D = (y.descriptorBlockSize / 4 - 6) / 4;\n  for (let t = 0; t < D; t++) y.samples[t] = {\n    bitOffset: u._nextUint16(),\n    bitLength: u._nextUint8(),\n    channelID: u._nextUint8(),\n    samplePosition: [u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8()],\n    sampleLower: u._nextUint32(),\n    sampleUpper: u._nextUint32()\n  };\n  i.dataFormatDescriptor.length = 0, i.dataFormatDescriptor.push(y);\n  const b = new c(t, f, h, !0);\n  for (; b._offset < h;) {\n    const t = b._nextUint32(),\n      e = b._scan(t),\n      n = _(e),\n      s = b._scan(t - e.byteLength);\n    i.keyValue[n] = n.match(/^ktx/i) ? _(s) : s, b._offset % 4 && b._skip(4 - b._offset % 4);\n  }\n  if (p <= 0) return i;\n  const d = new c(t, g, p, !0),\n    B = d._nextUint16(),\n    w = d._nextUint16(),\n    A = d._nextUint32(),\n    S = d._nextUint32(),\n    m = d._nextUint32(),\n    L = d._nextUint32(),\n    I = [];\n  for (let t = 0; t < r; t++) I.push({\n    imageFlags: d._nextUint32(),\n    rgbSliceByteOffset: d._nextUint32(),\n    rgbSliceByteLength: d._nextUint32(),\n    alphaSliceByteOffset: d._nextUint32(),\n    alphaSliceByteLength: d._nextUint32()\n  });\n  const R = g + d._offset,\n    E = R + A,\n    T = E + S,\n    O = T + m,\n    P = new Uint8Array(t.buffer, t.byteOffset + R, A),\n    C = new Uint8Array(t.buffer, t.byteOffset + E, S),\n    F = new Uint8Array(t.buffer, t.byteOffset + T, m),\n    G = new Uint8Array(t.buffer, t.byteOffset + O, L);\n  return i.globalData = {\n    endpointCount: B,\n    selectorCount: w,\n    imageDescs: I,\n    endpointsData: P,\n    selectorsData: C,\n    tablesData: F,\n    extendedData: G\n  }, i;\n}\nfunction x() {\n  return (x = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n      for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nconst u = {\n  keepWriter: !1\n};\nfunction y(n, s = {}) {\n  s = x({}, u, s);\n  let a = new ArrayBuffer(0);\n  if (n.globalData) {\n    const t = new ArrayBuffer(20 + 5 * n.globalData.imageDescs.length * 4),\n      e = new DataView(t);\n    e.setUint16(0, n.globalData.endpointCount, !0), e.setUint16(2, n.globalData.selectorCount, !0), e.setUint32(4, n.globalData.endpointsData.byteLength, !0), e.setUint32(8, n.globalData.selectorsData.byteLength, !0), e.setUint32(12, n.globalData.tablesData.byteLength, !0), e.setUint32(16, n.globalData.extendedData.byteLength, !0);\n    for (let t = 0; t < n.globalData.imageDescs.length; t++) {\n      const i = n.globalData.imageDescs[t];\n      e.setUint32(20 + 5 * t * 4 + 0, i.imageFlags, !0), e.setUint32(20 + 5 * t * 4 + 4, i.rgbSliceByteOffset, !0), e.setUint32(20 + 5 * t * 4 + 8, i.rgbSliceByteLength, !0), e.setUint32(20 + 5 * t * 4 + 12, i.alphaSliceByteOffset, !0), e.setUint32(20 + 5 * t * 4 + 16, i.alphaSliceByteLength, !0);\n    }\n    a = g([t, n.globalData.endpointsData, n.globalData.selectorsData, n.globalData.tablesData, n.globalData.extendedData]);\n  }\n  const r = [];\n  let o = n.keyValue;\n  s.keepWriter || (o = x({}, n.keyValue, {\n    KTXwriter: \"KTX-Parse v0.0.5\"\n  }));\n  for (const e in o) {\n    const n = o[e],\n      i = h(e),\n      s = \"string\" == typeof n ? h(n) : n,\n      a = i.byteLength + 1 + s.byteLength + 1,\n      l = a % 4 ? 4 - a % 4 : 0;\n    r.push(g([new Uint32Array([a]), i, t, s, t, new Uint8Array(l).fill(0)]));\n  }\n  const l = g(r),\n    f = new ArrayBuffer(44),\n    U = new DataView(f);\n  if (1 !== n.dataFormatDescriptor.length || n.dataFormatDescriptor[0].descriptorType !== i.BASICFORMAT) throw new Error(\"Only BASICFORMAT Data Format Descriptor output supported.\");\n  const c = n.dataFormatDescriptor[0];\n  U.setUint32(0, 44, !0), U.setUint16(4, c.vendorId, !0), U.setUint16(6, c.descriptorType, !0), U.setUint16(8, c.versionNumber, !0), U.setUint16(10, c.descriptorBlockSize, !0), U.setUint8(12, c.colorModel), U.setUint8(13, c.colorPrimaries), U.setUint8(14, c.transferFunction), U.setUint8(15, c.flags), U.setUint8(16, c.texelBlockDimension.x - 1), U.setUint8(17, c.texelBlockDimension.y - 1), U.setUint8(18, c.texelBlockDimension.z - 1), U.setUint8(19, c.texelBlockDimension.w - 1);\n  for (let t = 0; t < 8; t++) U.setUint8(20 + t, c.bytesPlane[t]);\n  for (let t = 0; t < c.samples.length; t++) {\n    const e = c.samples[t],\n      n = 28 + 16 * t;\n    U.setUint16(n + 0, e.bitOffset, !0), U.setUint8(n + 2, e.bitLength), U.setUint8(n + 3, e.channelID), U.setUint8(n + 4, e.samplePosition[0]), U.setUint8(n + 5, e.samplePosition[1]), U.setUint8(n + 6, e.samplePosition[2]), U.setUint8(n + 7, e.samplePosition[3]), U.setUint32(n + 8, e.sampleLower, !0), U.setUint32(n + 12, e.sampleUpper, !0);\n  }\n  const _ = e.length + 68 + 3 * n.levels.length * 8,\n    p = _ + f.byteLength;\n  let y = p + l.byteLength;\n  y % 8 && (y += 8 - y % 8);\n  const D = [],\n    b = new DataView(new ArrayBuffer(3 * n.levels.length * 8));\n  let d = y + a.byteLength;\n  for (let t = 0; t < n.levels.length; t++) {\n    const e = n.levels[t];\n    D.push(e.levelData), b.setBigUint64(24 * t + 0, BigInt(d), !0), b.setBigUint64(24 * t + 8, BigInt(e.levelData.byteLength), !0), b.setBigUint64(24 * t + 16, BigInt(e.uncompressedByteLength), !0), d += e.levelData.byteLength;\n  }\n  const B = new ArrayBuffer(68),\n    w = new DataView(B);\n  return w.setUint32(0, n.vkFormat, !0), w.setUint32(4, n.typeSize, !0), w.setUint32(8, n.pixelWidth, !0), w.setUint32(12, n.pixelHeight, !0), w.setUint32(16, n.pixelDepth, !0), w.setUint32(20, n.layerCount, !0), w.setUint32(24, n.faceCount, !0), w.setUint32(28, n.levels.length, !0), w.setUint32(32, n.supercompressionScheme, !0), w.setUint32(36, _, !0), w.setUint32(40, f.byteLength, !0), w.setUint32(44, p, !0), w.setUint32(48, l.byteLength, !0), w.setBigUint64(52, BigInt(y), !0), w.setBigUint64(60, BigInt(a.byteLength), !0), new Uint8Array(g([new Uint8Array(e).buffer, B, b.buffer, f, l, new ArrayBuffer(y - (p + l.byteLength)), a, ...D]));\n}\nexport { U as KTX2Container, p as read, y as write };","map":{"version":3,"sources":["../src/constants.ts","../src/container.ts","../src/buffer-reader.ts","../src/util.ts","../src/read.ts","../src/write.ts"],"names":["NUL","Uint8Array","KTX2_ID","KTX2SupercompressionScheme","KTX2DataFormatType","KTX2DataFormatModel","KTX2DataFormatPrimaries","KTX2DataFormatTransfer","KTX2DataFormatFlags","KTX2DataFormatChannelETC1S","KTX2DataFormatChannelUASTC","constructor","KTX2Container","this","NONE","vendorId","descriptorType","BASICFORMAT","versionNumber","descriptorBlockSize","colorModel","UNSPECIFIED","colorPrimaries","SRGB","transferFunction","flags","ALPHA_STRAIGHT","texelBlockDimension","x","y","z","w","bytesPlane","samples","BufferReader","data","byteOffset","byteLength","littleEndian","_dataView","DataView","buffer","_littleEndian","_offset","_nextUint8","value","getUint8","_nextUint16","getUint16","_nextUint32","getUint32","_nextUint64","_skip","bytes","_scan","maxByteLength","term","encodeText","text","TextEncoder","encode","Buffer","from","decodeText","TextDecoder","decode","toString","concat","buffers","totalByteLength","result","set","read","id","length","Error","container","headerByteLength","Uint32Array","BYTES_PER_ELEMENT","headerReader","vkFormat","typeSize","pixelWidth","pixelHeight","pixelDepth","layerCount","faceCount","levelCount","supercompressionScheme","dfdByteOffset","dfdByteLength","kvdByteOffset","kvdByteLength","sgdByteOffset","sgdByteLength","levelReader","i","levels","push","levelData","uncompressedByteLength","dfdReader","dfd","numSamples","bitOffset","bitLength","channelID","samplePosition","sampleLower","sampleUpper","dataFormatDescriptor","kvdReader","keyValueByteLength","keyData","key","valueData","keyValue","match","sgdReader","endpointCount","selectorCount","endpointsByteLength","selectorsByteLength","tablesByteLength","extendedByteLength","imageDescs","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","endpointsByteOffset","selectorsByteOffset","tablesByteOffset","extendedByteOffset","endpointsData","selectorsData","tablesData","extendedData","globalData","DEFAULT_OPTIONS","keepWriter","write","options","sgdBuffer","ArrayBuffer","sgdHeaderBuffer","sgdHeaderView","setUint16","setUint32","imageDesc","keyValueData","KTXwriter","kvByteLength","kvPadding","fill","kvdBuffer","dfdBuffer","dfdView","setUint8","sample","sampleByteOffset","levelIndex","levelDataByteOffset","level","setBigUint64","BigInt","headerBuffer","headerView"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\nexport const KTX_WRITER = `KTX-Parse v${PACKAGE_VERSION}`;\n\nexport const NUL = new Uint8Array([0x00]);\n\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KTX2_ID = [\n\t// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t0xAB, 0x4B, 0x54, 0x58, 0x20, 0x32, 0x30, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n];\n\nexport const HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\nexport enum KTX2SupercompressionScheme {\n\tNONE = 0,\n\tBASISLZ = 1,\n\tZSTD = 2,\n\tZLIB = 3,\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport enum KTX2DataFormatType {\n    BASICFORMAT = 0x00,\n};\n\nexport const KHR_DF_VENDORID_KHRONOS = 0;\n\nexport const KHR_DF_VERSION = 2;\n\nexport const KHR_DF_BLOCKSIZE = 40;\n\nexport const VK_FORMAT_UNDEFINED = 0;\n\nexport enum KTX2DataFormatModel {\n    UNSPECIFIED = 0,\n\tETC1S = 163,\n\tUASTC = 166,\n};\n\nexport enum KTX2DataFormatPrimaries {\n    UNSPECIFIED = 0,\n    SRGB = 1,\n};\n\nexport enum KTX2DataFormatTransfer {\n    UNSPECIFIED = 0,\n    LINEAR = 1,\n    SRGB = 2,\n    ITU = 3,\n    NTSC = 4,\n    SLOG = 5,\n    SLOG2 = 6,\n};\n\nexport enum KTX2DataFormatFlags {\n    ALPHA_STRAIGHT = 0,\n    ALPHA_PREMULTIPLIED = 1,\n};\n\nexport enum KTX2DataFormatChannelETC1S {\n    RGB = 0,\n    RRR = 3,\n    GGG = 4,\n    AAA = 15,\n};\n\nexport enum KTX2DataFormatChannelUASTC {\n    RGB = 0,\n    RGBA = 3,\n    RRR = 4,\n    RRRG = 5,\n};\n","import { KHR_DF_BLOCKSIZE, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, KTX2DataFormatFlags, KTX2DataFormatModel, KTX2DataFormatPrimaries, KTX2DataFormatType, KTX2SupercompressionScheme, VK_FORMAT_UNDEFINED } from './constants';\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nexport class KTX2Container {\n\t/**\n\t * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n\t * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n\t */\n\tpublic vkFormat = VK_FORMAT_UNDEFINED;\n\n\t/**\n\t * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n\t * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n\t */\n\tpublic typeSize: number = 1;\n\n\t/** Width of the texture image for level 0, in pixels. */\n\tpublic pixelWidth: number = 0;\n\n\t/** Height of the texture image for level 0, in pixels. */\n\tpublic pixelHeight: number = 0;\n\n\t/** Depth of the texture image for level 0, in pixels (3D textures only). */\n\tpublic pixelDepth: number = 0;\n\n\t/** Number of array elements (array textures only). */\n\tpublic layerCount: number = 0;\n\n\t/**\n\t * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n\t * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n\t * order.\n\t */\n\tpublic faceCount: number = 1;\n\n\t/** Indicates which supercompression scheme has been applied to mip level images, if any. */\n\tpublic supercompressionScheme = KTX2SupercompressionScheme.NONE;\n\n\t/** Mip levels, ordered largest (original) to smallest (~1px). */\n\tpublic levels: KTX2Level[] = [];\n\n\t/** Data Format Descriptor. */\n\tpublic dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat[] = [{\n\t\tvendorId: KHR_DF_VENDORID_KHRONOS,\n\t\tdescriptorType: KTX2DataFormatType.BASICFORMAT,\n\t\tversionNumber: KHR_DF_VERSION,\n\t\tdescriptorBlockSize: KHR_DF_BLOCKSIZE,\n\t\tcolorModel: KTX2DataFormatModel.UNSPECIFIED,\n\t\tcolorPrimaries: KTX2DataFormatPrimaries.SRGB,\n\t\ttransferFunction: KTX2DataFormatPrimaries.SRGB,\n\t\tflags: KTX2DataFormatFlags.ALPHA_STRAIGHT,\n\t\ttexelBlockDimension: {x: 4, y: 4, z: 1, w: 1},\n\t\tbytesPlane: [],\n\t\tsamples: [],\n\t}];\n\n\t/** Key/Value Data. */\n\tpublic keyValue: {[key: string]: string | Uint8Array} = {};\n\n\t/** Supercompression Global Data. */\n\tpublic globalData: KTX2GlobalDataBasisLZ | null = null;\n}\n\n\n///////////////////////////////////////////////////\n// Mip Levels.\n///////////////////////////////////////////////////\n\nexport interface KTX2Level {\n\t/** Compressed data of the mip level. */\n\tlevelData: Uint8Array;\n\n\t/**\n\t * Size of the mip level after reflation from supercompression, if applicable. When\n\t * `supercompressionType` is BASISLZ, `uncompressedByteLength` must be 0. When\n\t * `supercompressionType` is `NONE`, `uncompressedByteLength` must match the `levelData` byte\n\t * length.\n\t *\n\t * _**NOTICE:** this implies that for formats such as UASTC, `uncompressedByteLength` may\n\t * indicate size after ZSTD reflation (and of transcoded ASTC data), but does _not_ indicate\n\t * size of decoded RGBA32 pixels._\n\t */\n\tuncompressedByteLength: number;\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport interface KTX2DataFormatDescriptorBasicFormat {\n\tvendorId: number;\n\tdescriptorType: number;\n\tversionNumber: number;\n\tdescriptorBlockSize: number;\n\tcolorModel: number;\n\tcolorPrimaries: number;\n\ttransferFunction: number;\n\tflags: number;\n\ttexelBlockDimension: KTX2BasicFormatTexelBlockDimensions;\n\tbytesPlane: number[];\n\tsamples: KTX2BasicFormatSample[],\n};\n\nexport interface KTX2BasicFormatTexelBlockDimensions {\n\tx: number;\n\ty: number;\n\tz: number;\n\tw: number;\n};\n\nexport interface KTX2BasicFormatSample {\n\tbitOffset: number;\n\tbitLength: number;\n\tchannelID: number;\n\tsamplePosition: number[];\n\tsampleLower: number;\n\tsampleUpper: number;\n};\n\n\n///////////////////////////////////////////////////\n// Supercompression Global Data.\n///////////////////////////////////////////////////\n\nexport interface KTX2GlobalDataBasisLZ {\n\tendpointCount: number;\n\tselectorCount: number;\n\timageDescs: KTX2GlobalDataBasisLZImageDesc[];\n\tendpointsData: Uint8Array;\n\tselectorsData: Uint8Array;\n\ttablesData: Uint8Array;\n\textendedData: Uint8Array;\n};\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n\timageFlags: number;\n\trgbSliceByteOffset: number;\n\trgbSliceByteLength: number;\n\talphaSliceByteOffset: number;\n\talphaSliceByteLength: number;\n};\n","export class BufferReader {\n\tprivate _dataView: DataView;\n\tprivate _littleEndian: boolean;\n\tpublic _offset: number;\n\n\tconstructor(data: Uint8Array, byteOffset: number, byteLength: number, littleEndian: boolean) {\n\t\tthis._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n\t\tthis._littleEndian = littleEndian;\n\t\tthis._offset = 0;\n\t}\n\n\t_nextUint8() {\n\t\tconst value = this._dataView.getUint8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn value;\n\t}\n\n\t_nextUint16() {\n\t\tconst value = this._dataView.getUint16(this._offset, this._littleEndian);\n\t\tthis._offset += 2;\n\t\treturn value;\n\t}\n\n\t_nextUint32() {\n\t\tconst value = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint64() {\n\t\tconst left = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tconst right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\t\t// TODO(cleanup): Just test this...\n\t\t// const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\t\tconst value = left + (2 ** 32 * right);\n\t\tthis._offset += 8;\n\t\treturn value;\n\t}\n\n\t_skip(bytes: number) {\n\t\tthis._offset += bytes;\n\t\treturn this;\n\t}\n\n\t_scan(maxByteLength: number, term: number = 0x00): Uint8Array {\n\t\tconst byteOffset = this._offset;\n\t\tlet byteLength = 0;\n\t\twhile (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n\t\t\tbyteLength++;\n\t\t\tthis._offset++;\n\t\t}\n\n\t\tif (byteLength < maxByteLength) this._offset++;\n\n\t\treturn new Uint8Array(\n\t\t\tthis._dataView.buffer,\n\t\t\tthis._dataView.byteOffset + byteOffset,\n\t\t\tbyteLength\n\t\t);\n\t}\n}\n","\n/** Encodes text to an ArrayBuffer. */\nexport function encodeText(text: string): Uint8Array {\n\tif (typeof TextEncoder !== 'undefined') {\n\t\treturn new TextEncoder().encode(text);\n\t}\n\treturn Buffer.from(text);\n}\n\n/** Decodes an ArrayBuffer to text. */\nexport function decodeText(buffer: Uint8Array): string {\n\tif (typeof TextDecoder !== 'undefined') {\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\treturn Buffer.from(buffer).toString('utf8');\n}\n\n/** Concatenates N ArrayBuffers. */\nexport function concat (buffers: (ArrayBuffer | Uint8Array)[]): Uint8Array {\n\tlet totalByteLength = 0;\n\tfor (const buffer of buffers) {\n\t\ttotalByteLength += buffer.byteLength;\n\t}\n\n\tconst result = new Uint8Array(totalByteLength);\n\tlet byteOffset = 0;\n\n\tfor (const buffer of buffers) {\n\t\tresult.set(new Uint8Array(buffer), byteOffset);\n\t\tbyteOffset += buffer.byteLength;\n\t}\n\n\treturn result;\n}","import { BufferReader } from './buffer-reader';\nimport { KTX2_ID } from './constants';\nimport { KTX2Container, KTX2DataFormatDescriptorBasicFormat } from './container';\nimport { decodeText } from './util';\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nexport function read(data: Uint8Array): KTX2Container {\n\n\t///////////////////////////////////////////////////\n\t// KTX 2.0 Identifier.\n\t///////////////////////////////////////////////////\n\n\tconst id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\tif (id[0] !== KTX2_ID[0] || // '´'\n\t\tid[1] !== KTX2_ID[1] || // 'K'\n\t\tid[2] !== KTX2_ID[2] || // 'T'\n\t\tid[3] !== KTX2_ID[3] || // 'X'\n\t\tid[4] !== KTX2_ID[4] || // ' '\n\t\tid[5] !== KTX2_ID[5] || // '2'\n\t\tid[6] !== KTX2_ID[6] || // '0'\n\t\tid[7] !== KTX2_ID[7] || // 'ª'\n\t\tid[8] !== KTX2_ID[8] || // '\\r'\n\t\tid[9] !== KTX2_ID[9] || // '\\n'\n\t\tid[10] !== KTX2_ID[10] || // '\\x1A'\n\t\tid[11] !== KTX2_ID[11] // '\\n'\n\t) {\n\t\tthrow new Error('Missing KTX 2.0 identifier.');\n\t}\n\n\tconst container = new KTX2Container();\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n\tconst headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n\n\tcontainer.vkFormat = headerReader._nextUint32();\n\tcontainer.typeSize = headerReader._nextUint32();\n\tcontainer.pixelWidth = headerReader._nextUint32();\n\tcontainer.pixelHeight = headerReader._nextUint32();\n\tcontainer.pixelDepth = headerReader._nextUint32();\n\tcontainer.layerCount = headerReader._nextUint32();\n\tcontainer.faceCount = headerReader._nextUint32();\n\n\tconst levelCount = headerReader._nextUint32();\n\n\tcontainer.supercompressionScheme = headerReader._nextUint32();\n\n\tconst dfdByteOffset = headerReader._nextUint32();\n\tconst dfdByteLength = headerReader._nextUint32();\n\tconst kvdByteOffset = headerReader._nextUint32();\n\tconst kvdByteLength = headerReader._nextUint32();\n\tconst sgdByteOffset = headerReader._nextUint64();\n\tconst sgdByteLength = headerReader._nextUint64();\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelByteLength = levelCount * 3 * 8;\n\tconst levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\tcontainer.levels.push({\n\t\t\tlevelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n\t\t\tuncompressedByteLength: levelReader._nextUint64(),\n\t\t});\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n\n\tconst dfd: KTX2DataFormatDescriptorBasicFormat = {\n\t\tvendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n\t\tdescriptorType: dfdReader._nextUint16(),\n\t\tversionNumber: dfdReader._nextUint16(),\n\t\tdescriptorBlockSize: dfdReader._nextUint16(),\n\t\tcolorModel: dfdReader._nextUint8(),\n\t\tcolorPrimaries: dfdReader._nextUint8(),\n\t\ttransferFunction: dfdReader._nextUint8(),\n\t\tflags: dfdReader._nextUint8(),\n\t\ttexelBlockDimension: {\n\t\t\tx: dfdReader._nextUint8() + 1,\n\t\t\ty: dfdReader._nextUint8() + 1,\n\t\t\tz: dfdReader._nextUint8() + 1,\n\t\t\tw: dfdReader._nextUint8() + 1,\n\t\t},\n\t\tbytesPlane: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tsamples: [],\n\t};\n\n\tconst sampleStart = 6;\n\tconst sampleWords = 4;\n\tconst numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n\tfor (let i = 0; i < numSamples; i ++) {\n\t\tdfd.samples[ i ] = {\n\t\t\tbitOffset: dfdReader._nextUint16(),\n\t\t\tbitLength: dfdReader._nextUint8(),\n\t\t\tchannelID: dfdReader._nextUint8(),\n\t\t\tsamplePosition: [\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t],\n\t\t\tsampleLower: dfdReader._nextUint32(),\n\t\t\tsampleUpper: dfdReader._nextUint32(),\n\t\t};\n\t}\n\n\tcontainer.dataFormatDescriptor.length = 0;\n\tcontainer.dataFormatDescriptor.push(dfd);\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n\twhile (kvdReader._offset < kvdByteLength) {\n\t\tconst keyValueByteLength = kvdReader._nextUint32();\n\t\tconst keyData = kvdReader._scan(keyValueByteLength);\n\t\tconst key = decodeText(keyData);\n\n\t\tconst valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n\t\tcontainer.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData;\n\n\t\t// 4-byte alignment.\n\t\tif (kvdReader._offset % 4) kvdReader._skip(4 - (kvdReader._offset % 4));\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tif (sgdByteLength <= 0) return container;\n\n\tconst sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n\tconst endpointCount = sgdReader._nextUint16();\n\tconst selectorCount = sgdReader._nextUint16();\n\tconst endpointsByteLength = sgdReader._nextUint32();\n\tconst selectorsByteLength = sgdReader._nextUint32();\n\tconst tablesByteLength = sgdReader._nextUint32();\n\tconst extendedByteLength = sgdReader._nextUint32();\n\n\tconst imageDescs = [];\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\timageDescs.push({\n\t\t\timageFlags: sgdReader._nextUint32(),\n\t\t\trgbSliceByteOffset: sgdReader._nextUint32(),\n\t\t\trgbSliceByteLength: sgdReader._nextUint32(),\n\t\t\talphaSliceByteOffset: sgdReader._nextUint32(),\n\t\t\talphaSliceByteLength: sgdReader._nextUint32(),\n\t\t});\n\t}\n\n\tconst endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n\tconst selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n\tconst tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n\tconst extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n\tconst endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n\tconst selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n\tconst tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n\tconst extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n\n\tcontainer.globalData = {\n\t\tendpointCount,\n\t\tselectorCount,\n\t\timageDescs,\n\t\tendpointsData,\n\t\tselectorsData,\n\t\ttablesData,\n\t\textendedData,\n\t};\n\n\treturn container;\n}\n","import { HEADER_BYTE_LENGTH, KTX2DataFormatType, KTX2_ID, KTX_WRITER, NUL } from './constants';\nimport { KTX2Container } from './container';\nimport { concat, encodeText } from './util';\n\ninterface WriteOptions {keepWriter?: boolean};\nconst DEFAULT_OPTIONS: WriteOptions = {keepWriter: false};\n\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nexport function write(container: KTX2Container, options: WriteOptions = {}): Uint8Array {\n\toptions = {...DEFAULT_OPTIONS, ...options};\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tlet sgdBuffer = new ArrayBuffer(0);\n\tif (container.globalData) {\n\t\tconst sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n\t\tconst sgdHeaderView = new DataView(sgdHeaderBuffer);\n\t\tsgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n\t\tsgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n\t\tsgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n\t\tsgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n\t\tfor (let i = 0; i < container.globalData.imageDescs.length; i++) {\n\t\t\tconst imageDesc = container.globalData.imageDescs[i];\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n\t\t}\n\n\t\tsgdBuffer = concat([\n\t\t\tsgdHeaderBuffer,\n\t\t\tcontainer.globalData.endpointsData,\n\t\t\tcontainer.globalData.selectorsData,\n\t\t\tcontainer.globalData.tablesData,\n\t\t\tcontainer.globalData.extendedData,\n\t\t]);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst keyValueData: Uint8Array[] = [];\n\tlet keyValue = container.keyValue;\n\n\tif (!options.keepWriter) {\n\t\tkeyValue = {...container.keyValue, 'KTXwriter': KTX_WRITER};\n\t}\n\n\tfor (const key in keyValue) {\n\t\tconst value = keyValue[key];\n\t\tconst keyData = encodeText(key);\n\t\tconst valueData = typeof value === 'string' ? encodeText(value) : value;\n\t\tconst kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n\t\tconst kvPadding = kvByteLength % 4 ? (4 - (kvByteLength % 4)) : 0; // align(4)\n\t\tkeyValueData.push(concat([\n\t\t\tnew Uint32Array([kvByteLength]),\n\t\t\tkeyData,\n\t\t\tNUL,\n\t\t\tvalueData,\n\t\t\tNUL,\n\t\t\tnew Uint8Array(kvPadding).fill(0x00), // align(4)\n\t\t]));\n\t}\n\n\tconst kvdBuffer = concat(keyValueData);\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdBuffer = new ArrayBuffer(44);\n\tconst dfdView = new DataView(dfdBuffer);\n\n\tif (container.dataFormatDescriptor.length !== 1\n\t\t\t|| container.dataFormatDescriptor[0].descriptorType !== KTX2DataFormatType.BASICFORMAT) {\n\t\tthrow new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n\t}\n\n\tconst dfd = container.dataFormatDescriptor[0];\n\n\tdfdView.setUint32(0, 44, true);\n\tdfdView.setUint16(4, dfd.vendorId, true);\n\tdfdView.setUint16(6, dfd.descriptorType, true);\n\tdfdView.setUint16(8, dfd.versionNumber, true);\n\tdfdView.setUint16(10, dfd.descriptorBlockSize, true);\n\n\tdfdView.setUint8(12, dfd.colorModel);\n\tdfdView.setUint8(13, dfd.colorPrimaries);\n\tdfdView.setUint8(14, dfd.transferFunction);\n\tdfdView.setUint8(15, dfd.flags);\n\n\tdfdView.setUint8(16, dfd.texelBlockDimension.x - 1);\n\tdfdView.setUint8(17, dfd.texelBlockDimension.y - 1);\n\tdfdView.setUint8(18, dfd.texelBlockDimension.z - 1);\n\tdfdView.setUint8(19, dfd.texelBlockDimension.w - 1);\n\n\tfor (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n\tfor (let i = 0; i < dfd.samples.length; i++) {\n\t\tconst sample = dfd.samples[i];\n\t\tconst sampleByteOffset = 28 + i * 16;\n\n\t\tdfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n\t\tdfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n\t\tdfdView.setUint8(sampleByteOffset + 3, sample.channelID);\n\n\t\tdfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n\t\tdfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n\t\tdfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n\t\tdfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n\t\tdfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\tdfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data alignment.\n\t///////////////////////////////////////////////////\n\n\tconst dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n\tconst kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n\tlet sgdByteOffset = kvdByteOffset + kvdBuffer.byteLength;\n\tif (sgdByteOffset % 8) sgdByteOffset += 8 - (sgdByteOffset % 8); // align(8)\n\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelData: Uint8Array[] = [];\n\tconst levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n\n\tlet levelDataByteOffset = sgdByteOffset + sgdBuffer.byteLength;\n\tfor (let i = 0; i < container.levels.length; i++) {\n\t\tconst level = container.levels[i];\n\t\tlevelData.push(level.levelData);\n\t\tlevelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffset), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n\t\tlevelDataByteOffset += level.levelData.byteLength;\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n\tconst headerView = new DataView(headerBuffer);\n\theaderView.setUint32(0, container.vkFormat, true);\n\theaderView.setUint32(4, container.typeSize, true);\n\theaderView.setUint32(8, container.pixelWidth, true);\n\theaderView.setUint32(12, container.pixelHeight, true);\n\theaderView.setUint32(16, container.pixelDepth, true);\n\theaderView.setUint32(20, container.layerCount, true);\n\theaderView.setUint32(24, container.faceCount, true);\n\theaderView.setUint32(28, container.levels.length, true);\n\theaderView.setUint32(32, container.supercompressionScheme, true);\n\n\theaderView.setUint32(36, dfdByteOffset, true);\n\theaderView.setUint32(40, dfdBuffer.byteLength, true);\n\theaderView.setUint32(44, kvdByteOffset, true);\n\theaderView.setUint32(48, kvdBuffer.byteLength, true);\n\theaderView.setBigUint64(52, BigInt(sgdByteOffset), true);\n\theaderView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n\n\n\t///////////////////////////////////////////////////\n\t// Compose.\n\t///////////////////////////////////////////////////\n\n\treturn new Uint8Array(concat([\n\t\tnew Uint8Array(KTX2_ID).buffer,\n\t\theaderBuffer,\n\t\tlevelIndex.buffer,\n\t\tdfdBuffer,\n\t\tkvdBuffer,\n\t\tnew ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)), // align(8)\n\t\tsgdBuffer,\n\t\t...levelData,\n\t]));\n}\n\n"]},"metadata":{},"sourceType":"module"}