{"ast":null,"code":"import { forEach, map } from \"../utils/utils\";\nimport { RepetitionMandatory, Option, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal, NonTerminal, Alternation, Alternative, Repetition } from \"../parse/grammar/gast/gast_public\";\n/**\n * Missing features\n * 1. Rule arguments\n * 2. Gates\n * 3. embedded actions\n */\nvar NL = \"\\n\";\nexport function genUmdModule(options) {\n  return \"\\n(function (root, factory) {\\n    if (typeof define === 'function' && define.amd) {\\n        // AMD. Register as an anonymous module.\\n        define(['chevrotain'], factory);\\n    } else if (typeof module === 'object' && module.exports) {\\n        // Node. Does not work with strict CommonJS, but\\n        // only CommonJS-like environments that support module.exports,\\n        // like Node.\\n        module.exports = factory(require('chevrotain'));\\n    } else {\\n        // Browser globals (root is window)\\n        root.returnExports = factory(root.b);\\n    }\\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\\n\\n\" + genClass(options) + \"\\n    \\nreturn {\\n    \" + options.name + \": \" + options.name + \" \\n}\\n}));\\n\";\n}\nexport function genWrapperFunction(options) {\n  return \"    \\n\" + genClass(options) + \"\\nreturn new \" + options.name + \"(tokenVocabulary, config)    \\n\";\n}\nexport function genClass(options) {\n  // TODO: how to pass the token vocabulary? Constructor? other?\n  var result = \"\\nfunction \" + options.name + \"(tokenVocabulary, config) {\\n    // invoke super constructor\\n    // No support for embedded actions currently, so we can 'hardcode'\\n    // The use of CstParser.\\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\\n\\n    const $ = this\\n\\n    \" + genAllRules(options.rules) + \"\\n\\n    // very important to call this after all the rules have been defined.\\n    // otherwise the parser may not work correctly as it will lack information\\n    // derived during the self analysis phase.\\n    this.performSelfAnalysis(this)\\n}\\n\\n// inheritance as implemented in javascript in the previous decade... :(\\n\" + options.name + \".prototype = Object.create(chevrotain.CstParser.prototype)\\n\" + options.name + \".prototype.constructor = \" + options.name + \"    \\n    \";\n  return result;\n}\nexport function genAllRules(rules) {\n  var rulesText = map(rules, function (currRule) {\n    return genRule(currRule, 1);\n  });\n  return rulesText.join(\"\\n\");\n}\nexport function genRule(prod, n) {\n  var result = indent(n, \"$.RULE(\\\"\" + prod.name + \"\\\", function() {\") + NL;\n  result += genDefinition(prod.definition, n + 1);\n  result += indent(n + 1, \"})\") + NL;\n  return result;\n}\nexport function genTerminal(prod, n) {\n  var name = prod.terminalType.name;\n  // TODO: potential performance optimization, avoid tokenMap Dictionary access\n  return indent(n, \"$.CONSUME\" + prod.idx + \"(this.tokensMap.\" + name + \")\" + NL);\n}\nexport function genNonTerminal(prod, n) {\n  return indent(n, \"$.SUBRULE\" + prod.idx + \"($.\" + prod.nonTerminalName + \")\" + NL);\n}\nexport function genAlternation(prod, n) {\n  var result = indent(n, \"$.OR\" + prod.idx + \"([\") + NL;\n  var alts = map(prod.definition, function (altDef) {\n    return genSingleAlt(altDef, n + 1);\n  });\n  result += alts.join(\",\" + NL);\n  result += NL + indent(n, \"])\" + NL);\n  return result;\n}\nexport function genSingleAlt(prod, n) {\n  var result = indent(n, \"{\") + NL;\n  result += indent(n + 1, \"ALT: function() {\") + NL;\n  result += genDefinition(prod.definition, n + 1);\n  result += indent(n + 1, \"}\") + NL;\n  result += indent(n, \"}\");\n  return result;\n}\nfunction genProd(prod, n) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return genNonTerminal(prod, n);\n  } else if (prod instanceof Option) {\n    return genDSLRule(\"OPTION\", prod, n);\n  } else if (prod instanceof RepetitionMandatory) {\n    return genDSLRule(\"AT_LEAST_ONE\", prod, n);\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return genDSLRule(\"AT_LEAST_ONE_SEP\", prod, n);\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return genDSLRule(\"MANY_SEP\", prod, n);\n  } else if (prod instanceof Repetition) {\n    return genDSLRule(\"MANY\", prod, n);\n  } else if (prod instanceof Alternation) {\n    return genAlternation(prod, n);\n  } else if (prod instanceof Terminal) {\n    return genTerminal(prod, n);\n  } else if (prod instanceof Alternative) {\n    return genDefinition(prod.definition, n);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nfunction genDSLRule(dslName, prod, n) {\n  var result = indent(n, \"$.\" + (dslName + prod.idx) + \"(\");\n  if (prod.separator) {\n    result += \"{\" + NL;\n    result += indent(n + 1, \"SEP: this.tokensMap.\" + prod.separator.name) + \",\" + NL;\n    result += \"DEF: \" + genDefFunction(prod.definition, n + 2) + NL;\n    result += indent(n, \"}\") + NL;\n  } else {\n    result += genDefFunction(prod.definition, n + 1);\n  }\n  result += indent(n, \")\") + NL;\n  return result;\n}\nfunction genDefFunction(definition, n) {\n  var def = \"function() {\" + NL;\n  def += genDefinition(definition, n);\n  def += indent(n, \"}\") + NL;\n  return def;\n}\nfunction genDefinition(def, n) {\n  var result = \"\";\n  forEach(def, function (prod) {\n    result += genProd(prod, n + 1);\n  });\n  return result;\n}\nfunction indent(howMuch, text) {\n  var spaces = Array(howMuch * 4 + 1).join(\" \");\n  return spaces + text;\n}","map":{"version":3,"sources":["../../../src/generate/generate.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { forEach, map } from \"../utils/utils\";\nimport { RepetitionMandatory, Option, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal, NonTerminal, Alternation, Alternative, Repetition } from \"../parse/grammar/gast/gast_public\";\n/**\n * Missing features\n * 1. Rule arguments\n * 2. Gates\n * 3. embedded actions\n */\nvar NL = \"\\n\";\nexport function genUmdModule(options) {\n    return \"\\n(function (root, factory) {\\n    if (typeof define === 'function' && define.amd) {\\n        // AMD. Register as an anonymous module.\\n        define(['chevrotain'], factory);\\n    } else if (typeof module === 'object' && module.exports) {\\n        // Node. Does not work with strict CommonJS, but\\n        // only CommonJS-like environments that support module.exports,\\n        // like Node.\\n        module.exports = factory(require('chevrotain'));\\n    } else {\\n        // Browser globals (root is window)\\n        root.returnExports = factory(root.b);\\n    }\\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\\n\\n\" + genClass(options) + \"\\n    \\nreturn {\\n    \" + options.name + \": \" + options.name + \" \\n}\\n}));\\n\";\n}\nexport function genWrapperFunction(options) {\n    return \"    \\n\" + genClass(options) + \"\\nreturn new \" + options.name + \"(tokenVocabulary, config)    \\n\";\n}\nexport function genClass(options) {\n    // TODO: how to pass the token vocabulary? Constructor? other?\n    var result = \"\\nfunction \" + options.name + \"(tokenVocabulary, config) {\\n    // invoke super constructor\\n    // No support for embedded actions currently, so we can 'hardcode'\\n    // The use of CstParser.\\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\\n\\n    const $ = this\\n\\n    \" + genAllRules(options.rules) + \"\\n\\n    // very important to call this after all the rules have been defined.\\n    // otherwise the parser may not work correctly as it will lack information\\n    // derived during the self analysis phase.\\n    this.performSelfAnalysis(this)\\n}\\n\\n// inheritance as implemented in javascript in the previous decade... :(\\n\" + options.name + \".prototype = Object.create(chevrotain.CstParser.prototype)\\n\" + options.name + \".prototype.constructor = \" + options.name + \"    \\n    \";\n    return result;\n}\nexport function genAllRules(rules) {\n    var rulesText = map(rules, function (currRule) {\n        return genRule(currRule, 1);\n    });\n    return rulesText.join(\"\\n\");\n}\nexport function genRule(prod, n) {\n    var result = indent(n, \"$.RULE(\\\"\" + prod.name + \"\\\", function() {\") + NL;\n    result += genDefinition(prod.definition, n + 1);\n    result += indent(n + 1, \"})\") + NL;\n    return result;\n}\nexport function genTerminal(prod, n) {\n    var name = prod.terminalType.name;\n    // TODO: potential performance optimization, avoid tokenMap Dictionary access\n    return indent(n, \"$.CONSUME\" + prod.idx + \"(this.tokensMap.\" + name + \")\" + NL);\n}\nexport function genNonTerminal(prod, n) {\n    return indent(n, \"$.SUBRULE\" + prod.idx + \"($.\" + prod.nonTerminalName + \")\" + NL);\n}\nexport function genAlternation(prod, n) {\n    var result = indent(n, \"$.OR\" + prod.idx + \"([\") + NL;\n    var alts = map(prod.definition, function (altDef) { return genSingleAlt(altDef, n + 1); });\n    result += alts.join(\",\" + NL);\n    result += NL + indent(n, \"])\" + NL);\n    return result;\n}\nexport function genSingleAlt(prod, n) {\n    var result = indent(n, \"{\") + NL;\n    result += indent(n + 1, \"ALT: function() {\") + NL;\n    result += genDefinition(prod.definition, n + 1);\n    result += indent(n + 1, \"}\") + NL;\n    result += indent(n, \"}\");\n    return result;\n}\nfunction genProd(prod, n) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n        return genNonTerminal(prod, n);\n    }\n    else if (prod instanceof Option) {\n        return genDSLRule(\"OPTION\", prod, n);\n    }\n    else if (prod instanceof RepetitionMandatory) {\n        return genDSLRule(\"AT_LEAST_ONE\", prod, n);\n    }\n    else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        return genDSLRule(\"AT_LEAST_ONE_SEP\", prod, n);\n    }\n    else if (prod instanceof RepetitionWithSeparator) {\n        return genDSLRule(\"MANY_SEP\", prod, n);\n    }\n    else if (prod instanceof Repetition) {\n        return genDSLRule(\"MANY\", prod, n);\n    }\n    else if (prod instanceof Alternation) {\n        return genAlternation(prod, n);\n    }\n    else if (prod instanceof Terminal) {\n        return genTerminal(prod, n);\n    }\n    else if (prod instanceof Alternative) {\n        return genDefinition(prod.definition, n);\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction genDSLRule(dslName, prod, n) {\n    var result = indent(n, \"$.\" + (dslName + prod.idx) + \"(\");\n    if (prod.separator) {\n        result += \"{\" + NL;\n        result +=\n            indent(n + 1, \"SEP: this.tokensMap.\" + prod.separator.name) + \",\" + NL;\n        result += \"DEF: \" + genDefFunction(prod.definition, n + 2) + NL;\n        result += indent(n, \"}\") + NL;\n    }\n    else {\n        result += genDefFunction(prod.definition, n + 1);\n    }\n    result += indent(n, \")\") + NL;\n    return result;\n}\nfunction genDefFunction(definition, n) {\n    var def = \"function() {\" + NL;\n    def += genDefinition(definition, n);\n    def += indent(n, \"}\") + NL;\n    return def;\n}\nfunction genDefinition(def, n) {\n    var result = \"\";\n    forEach(def, function (prod) {\n        result += genProd(prod, n + 1);\n    });\n    return result;\n}\nfunction indent(howMuch, text) {\n    var spaces = Array(howMuch * 4 + 1).join(\" \");\n    return spaces + text;\n}\n//# sourceMappingURL=generate.js.map"]},"metadata":{},"sourceType":"module"}