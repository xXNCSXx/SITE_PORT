{"ast":null,"code":"import { uniq, map, flatten } from \"../../utils/utils\";\nimport { NonTerminal, Terminal } from \"./gast/gast_public\";\nimport { isBranchingProd, isOptionalProd, isSequenceProd } from \"./gast/gast\";\nexport function first(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first(prod.referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexport function firstForSequence(prod) {\n  var firstSet = [];\n  var seq = prod.definition;\n  var nextSubProdIdx = 0;\n  var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  var currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  var isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n  return uniq(firstSet);\n}\nexport function firstForBranching(prod) {\n  var allAlternativesFirsts = map(prod.definition, function (innerProd) {\n    return first(innerProd);\n  });\n  return uniq(flatten(allAlternativesFirsts));\n}\nexport function firstForTerminal(terminal) {\n  return [terminal.terminalType];\n}","map":{"version":3,"names":["uniq","map","flatten","NonTerminal","Terminal","isBranchingProd","isOptionalProd","isSequenceProd","first","prod","referencedRule","firstForTerminal","firstForSequence","firstForBranching","Error","firstSet","seq","definition","nextSubProdIdx","hasInnerProdsRemaining","length","currSubProd","isLastInnerProdOptional","concat","allAlternativesFirsts","innerProd","terminal","terminalType"],"sources":["../../../../src/parse/grammar/first.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,OAAO,QAAQ,mBAAmB;AACtD,SAA6BC,WAAW,EAAEC,QAAQ,QAAQ,oBAAoB;AAC9E,SAASC,eAAe,EAAEC,cAAc,EAAEC,cAAc,QAAQ,aAAa;AAG7E,OAAM,SAAUC,KAAKA,CAACC,IAAiB;EACrC;EACA,IAAIA,IAAI,YAAYN,WAAW,EAAE;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAOK,KAAK,CAAeC,IAAK,CAACC,cAAc,CAAC;GACjD,MAAM,IAAID,IAAI,YAAYL,QAAQ,EAAE;IACnC,OAAOO,gBAAgB,CAAWF,IAAI,CAAC;GACxC,MAAM,IAAIF,cAAc,CAACE,IAAI,CAAC,EAAE;IAC/B,OAAOG,gBAAgB,CAAqBH,IAAI,CAAC;GAClD,MAAM,IAAIJ,eAAe,CAACI,IAAI,CAAC,EAAE;IAChC,OAAOI,iBAAiB,CAAqBJ,IAAI,CAAC;GACnD,MAAM;IACL,MAAMK,KAAK,CAAC,sBAAsB,CAAC;;AAEvC;AAEA,OAAM,SAAUF,gBAAgBA,CAACH,IAAwB;EACvD,IAAIM,QAAQ,GAAgB,EAAE;EAC9B,IAAIC,GAAG,GAAGP,IAAI,CAACQ,UAAU;EACzB,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,sBAAsB,GAAGH,GAAG,CAACI,MAAM,GAAGF,cAAc;EACxD,IAAIG,WAAW;EACf;EACA,IAAIC,uBAAuB,GAAG,IAAI;EAClC;EACA,OAAOH,sBAAsB,IAAIG,uBAAuB,EAAE;IACxDD,WAAW,GAAGL,GAAG,CAACE,cAAc,CAAC;IACjCI,uBAAuB,GAAGhB,cAAc,CAACe,WAAW,CAAC;IACrDN,QAAQ,GAAGA,QAAQ,CAACQ,MAAM,CAACf,KAAK,CAACa,WAAW,CAAC,CAAC;IAC9CH,cAAc,GAAGA,cAAc,GAAG,CAAC;IACnCC,sBAAsB,GAAGH,GAAG,CAACI,MAAM,GAAGF,cAAc;;EAGtD,OAAOlB,IAAI,CAACe,QAAQ,CAAC;AACvB;AAEA,OAAM,SAAUF,iBAAiBA,CAACJ,IAAwB;EACxD,IAAIe,qBAAqB,GAAkBvB,GAAG,CAC5CQ,IAAI,CAACQ,UAAU,EACf,UAACQ,SAAS;IACR,OAAOjB,KAAK,CAACiB,SAAS,CAAC;EACzB,CAAC,CACF;EACD,OAAOzB,IAAI,CAACE,OAAO,CAAYsB,qBAAqB,CAAC,CAAC;AACxD;AAEA,OAAM,SAAUb,gBAAgBA,CAACe,QAAkB;EACjD,OAAO,CAACA,QAAQ,CAACC,YAAY,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module"}